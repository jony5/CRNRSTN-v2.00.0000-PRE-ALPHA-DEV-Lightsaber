<?php
/**
* @package CRNRSTN

// J5
// Code is Poetry */
# # C # R # N # R # S # T # N # : : # # # #
#
#        CRNRSTN :: An open source PHP class library supporting enterprise application development that is framed within
#                   the context of mature/rigid RTM protocols.
#        VERSION :: 2.00.0000 PRE-ALPHA-DEV (Lightsaber)
#      TIMESTAMP :: Tuesday, November 28, 2023 @ 16:20:00.065620.
#  DATE (v1.0.0) :: July 4, 2018 - Happy Independence Day from my dog and I to you...wherever and whenever you are.
#         AUTHOR :: Jonathan '5' Harris, CEO, CTO, Lead Full Stack Developer, jharris@eVifweb.com, eVifweb@gmail.com.
#            URI :: https://crnrstn.jony5.com
#       OVERVIEW :: CRNRSTN :: An Open Source PHP Class Library that stands on top of a robust web services oriented
#                   architecture to both facilitate, augment, and enhance (with stability) the operations of a code base
#                   for a web application across multiple hosting environments.
#
#                   CRNRSTN :: is powered by eVifweb; CRNRSTN :: is powered by eCRM Strategy and Execution,
#                   Web Design & Development, and Only The Best Coffee.
#
#                   Copyright (c) 2012-2024 :: eVifweb development :: All Rights Reserved.
#    DESCRIPTION :: CRNRSTN :: is an open source PHP class library that will facilitate and spread (via SOAP services)
#                   operations of a web application across multiple servers or environments (e.g. localhost, stage,
#                   preprod, and production). With this tool, data and functionality possessing characteristics that
#                   inherently create distinctions between one environment and another can all be managed through one
#                   framework for an entire application. IP address restrictions, error logging profiles, and database
#                   authentication credentials are a few areas within an application's architecture where
#                   CRNRSTN :: was designed to excel.
#
#                   Once CRNRSTN :: has been configured to support all of a web application's running servers, one can
#                   seamlessly RTM the codebase of the web site without having to modify the configuration to account
#                   for any unique and environmentally specific parameters. Receive the benefit of a robust and polished
#                   framework that will bubble up logs from exception notifications to any output channel (email, hidden
#                   HTML comment, native default,...etc.) of one's own choosing.
#
#                   Stand on top of the CRNRSTN :: SOAP Services Layer to, for example, organize and strengthen the
#                   communications architecture of any web application. By supporting many-to-one proxy messaging
#                   relationships between slaves and a master "communications server", CRNRSTN :: can streamline and
#                   simplify the management of web application communications; one can configure everything from SMTP
#                   credentials to the character count for line wrapping in the text versions of multi-part HTML email.
#
#                   This is the "King's Highway" for sending email communications.
#        LICENSE :: MIT
#                   Permission is hereby granted, free of charge, to any person obtaining
#                   a copy of this software and associated documentation files (the
#                   "Software"), to deal in the Software without restriction, including
#                   without limitation the rights to use, copy, modify, merge, publish,
#                   distribute, sublicense, and/or sell copies of the Software, and to
#                   permit persons to whom the Software is furnished to do so, subject to
#                   the following conditions:
#
#                   The above copyright notice and this permission notice shall be
#                   included in all copies or substantial portions of the Software.
#
#                   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#                   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#                   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#                   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
#                   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#                   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#                   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# # C # R # N # R # S # T # N # : : # # # #
#
#  CLASS :: crnrstn
#  VERSION :: 2.00.0000
#  DATE :: September 28, 2013 @ 2115 hrs.
#  AUTHOR :: Jonathan '5' Harris, jharris@eVifweb.com, eVifweb@gmail.com.
#  URI :: http://eVifweb.jony5.com
#  DESCRIPTION :: The first class instantiated in the joining of the
#                 "wall of server" to the "wall of application".
#  LICENSE :: MIT | https://crnrstn.jony5.com/licensing/
#
class crnrstn {

    private static $oLogger;
    private static $oCRNRSTN_IP_MGR;
    private static $oCRNRSTN_ORESL_MGR;
    private static $oCRNRSTN_DATABASE;
    private static $oSESSION_MGR;
    public $oCRNRSTN_ENV;
    public $oCRNRSTN_USR;
    private static $oCRNRSTN_RRS_MAP;
    public $oCRNRSTN_TRM;
    public $oINTERACT_UI_HTML_MGR;
    public $oCRNRSTN_CS_CONTROLLER;
    private static $oCRNRSTN_CONFIG_MGR;
    public $oMYSQLI_CONN_MGR;
    private static $oLOG_PROFILE_MGR;
    public $oCRNRSTN_ASSET_MGR;
    private static $oCRNRSTN_BITFLIP_MGR;
    private static $oCRNRSTN_PERFORMANCE_REGULATOR;
    public $oCRNRSTN_LANG_MGR;
    public $oDATA_TUNNEL_SERVICES_MGR;
    public $oCRNRSTN_GABRIEL;

    protected $oMessenger_ARRAY = array();

    //
    // THIS CAN BE MORE ROBUST (A PRETTY HTML
    // DOCUMENT), BUT WE SHOULD HANDLE SOAP
    // (RESPONSES TO OTHER SERVERS), AS
    // WELL...RIGHT? ERR HERE MAY BE SUPER
    // LOW-LEVEL THO.
    public $destruct_output = '';
    public $device_type = '';
    public $device_type_bit = 0;
    private static $system_termination_flag_ARRAY = array();

    private static $byte_units_ARRAY = array();
    private static $permissions_chmod = 775;
    private static $system_hmac_algorithm = 'sha256';
    private static $system_openssl_cipher = 'aes-192-ofb';
    private static $system_openssl_cipher_preferred_ARRAY = array();
    private static $system_openssl_digest_preferred_ARRAY = array();
    private static $system_hmac_algorithm_preferred_ARRAY = array();
    private static $channel_integer_syntax_ARRAY = array();
    private static $channel_syntax_ARRAY = array();
    private static $timezone_syntax_ARRAY = array();
    private static $get_channel_system_parameters_ARRAY = array();
    private static $html_comments_profile_ARRAY = array();
    private static $sql_interval_ARRAY = array();
    private static $static_css_length_unit = 'px';
    private static $system_output_profile_constant = CRNRSTN_ASSET_MODE_PNG;
    private static $system_output_profile_constants_ARRAY = array();
    private static $system_device_channel_constants_ARRAY = array();
    private static $theme_integer_constant = CRNRSTN_UI_DARKNIGHT;
    private static $byte_reporting_units = 'ISO_80000';             // ['ISO_80000' or 'SI_METRIC']
    private static $byte_reporting_precision = 2;
    public $iso_language_html_default;
    public $iso_language_html_available_ARRAY = array();
    public $iso_profile_ARRAY = array();
    private static $lang_content_ARRAY = array();
    private static $system_logging_output_profile_ARRAY = array();
    private static $sys_logging_meta_ARRAY = array();
    public $cache_meta_ARRAY = array();
    public $asset_routing_data_key_lookup_ARRAY = array();
    protected $terminate_configuration_error_ARRAY = array();

    private static $crnrstn_session_salt;
    protected $content_token_index;
    private static $config_serial;
    private static $env_key_config_ARRAY = array();
    private static $env_key_hash_config_ARRAY = array();
    private static $data_channel_init_sequence = 'GPHSJCDROF';

    public $css_length_unit;
    public $total_bytes_hashed_ARRAY = array();
    public $total_bytes_encrypted = 0;
    public $total_bytes_decrypted = 0;
    public $hash_acceleration_ARRAY = array();
    public $is_SSL = false;

    public $session_client_id;

    private static $channel_master_ARRAY = array();
    private static $system_channel_ARRAY = array();
    private static $system_channel_alpha_ARRAY = array();
    private static $system_default_logging_output_profile;
    private static $system_log_output_profile_constants_ARRAY = array();

    private static $system_file_attributes_master_ARRAY = array();
    private static $system_resource_profile_ARRAY = array();
    private static $channel_auto_load_broken = false;
    public $memory_performance_delta_history_ARRAY = array();
    public $memory_performance_time_ARRAY = array();
    public $memory_performance_history_ARRAY = array();
    public $memory_performance_index_ARRAY = array();
    private static $os_bit_size;
    protected $global_constants_string_ARRAY = array();
    private static $request_id;
    private static $request_serial;
    public $process_id;

    private static $server_cache_int_pointer_ARRAY = array();
    private static $server_operations_ARRAY = array();

    private static $hmac_hash_algorithm_int;
    private static $openssl_cipher_int;
    private static $hmac_hash_algorithm_ARRAY = array('DEFAULT' => array(CRNRSTN_INTEGER => '-1', 'NAME' => 'sha256'));
    private static $openssl_ARRAY = array(
        'CIPHER' => array('DEFAULT' => array(CRNRSTN_INTEGER => '-1', 'NAME' => 'aes-128-ocb')),
        'DIGEST_METHOD' => array('DEFAULT' => array(CRNRSTN_INTEGER => '-1', 'NAME' => 'aes-128-ocb'))
    );

    private static $ddo_serializable_data_types_ARRAY = array(CRNRSTN_OBJECT => 1, CRNRSTN_ARRAY => 1);
    private static $object_serializable_channels_ARRAY = array(
        CRNRSTN_CHANNEL_GET => 'G', CRNRSTN_CHANNEL_POST => 'P', CRNRSTN_CHANNEL_SESSION => 'H',
        CRNRSTN_CHANNEL_SSDTLA => 'S', CRNRSTN_CHANNEL_PSSDTLA => 'J',
        CRNRSTN_CHANNEL_COOKIE => 'C', CRNRSTN_CHANNEL_DATABASE => 'D',
        CRNRSTN_CHANNEL_SOAP => 'O', CRNRSTN_CHANNEL_FILE => 'F'
    );

    public $operating_system;
    public $config_queue_theme;
    public $theme_attributes_ARRAY = array();
    public $random_theme_constant;

    private static $mbstring_func_overload = false;

    public $opensslSessEncryptCipher = array();
    public $opensslSessEncryptSecretKey = array();
    public $opensslSessEncryptOptions = array();
    public $sessHmac_algorithm = array();
    public $opensslCookieEncryptCipher = array();
    public $opensslCookieEncryptSecretKey = array();
    public $opensslCookieEncryptOptions = array();
    public $cookieHmac_algorithm = array();

    public $opensslTunnelEncryptCipher = array();
    public $opensslTunnelEncryptSecretKey = array();
    public $opensslTunnelEncryptOptions = array();
    public $tunnelHmac_algorithm = array();

    private static $env_detect_ARRAY = array();
    public $env_err_reporting_profile_ARRAY = array();
    public $env_html_comments_mode_ARRAY = array();
    public $ini_set_ARRAY = array();

    public $grant_accessIP_ARRAY = array();
    public $deny_accessIP_ARRAY = array();
    public $add_admin_creds_ARRAY = array();

    private static $database_extension_type_ARRAY = array();

    private static $log_silo_profile_ARRAY;
    public $starttime;
    public $cache_ttl_default = 80;         // TODO :: REFACTOR THIS.
    public $useCURL_default = true;
    public $oLog_output_ARRAY = array();

    private static $oCRNRSTN_oWCR_ARRAY = array();
    public $wildCardResource_filePath_ARRAY = array();

    private static $datatype_master_ARRAY = array();
    private static $encryptable_data_types_ARRAY = array();
    private static $system_resource_constants_ARRAY = array();
    protected $system_ui_module_constants_ARRAY = array();

    protected $system_head_html_asset_array_spool_ARRAY = array();
    protected $head_asset_footer_spool_ARRAY = array();

    private static $head_resource_index_spool_ARRAY = array();
    private static $footer_resource_index_spool_ARRAY = array();

    private static $crnrstn_debug_mode = CRNRSTN_DEBUG_OFF;
    private static $phpmailer_debug_mode = CRNRSTN_PHPMAILER_DEBUG_OFF;
    private static $crnrstn_debug_mode_ARRAY = array();
    private static $phpmailer_debug_mode_ARRAY = array();
    protected $system_data_profile_constants_ARRAY = array();
    private static $system_theme_style_constants_ARRAY = array();
    protected $current_theme_style_ARRAY = array();
    public $system_response_map_output_format_constants = array();
    public $system_http_get_param_prefix = 'crnrstn_';
    private static $system_creative_element_keys_ARRAY = array();
    public $weighted_elements_keys_ARRAY = array();
    private static $system_files_version_hash_ARRAY = array();
    private static $system_creative_http_path_ARRAY = array();
    private static $crnrstn_tmp_dir;
    private static $m_starttime = array();
    private static $requestProtocol;

    public $log_initial_profile_ARRAY = array();
    protected $log_initial_profile_meta_ARRAY = array();
    public $soap_permissions_file_path_ARRAY = array();
    public $wp_config_file_path_ARRAY = array();
    public $analytics_config_file_path_ARRAY = array();
    public $engagement_config_file_path_ARRAY = array();
    public $response_header_attribute_ARRAY = array();

    private static $char_01_ARRAY = array();
    private static $char_01_index_ARRAY = array();
    private static $wheel_encoder_salt;
    private static $salt_string_length = 64;

    public $data_packet_ttl_default;
    public $crnrstn_data_packet_data_key_index_ARRAY = array();
    public $crnrstn_data_packet_spoiler_ARRAY = array();
    public $form_integrations_data_index_ARRAY = array();

    public $html_footer_build_flag_ARRAY = array();
    public $html_head_build_flag_ARRAY = array();

    private static $CRNRSTN_debug_mode;

    //
    // MAXIMUM PERCENTAGE OF DISK (E.G. "FILL VOLUME UP TO 85%
    // AND STOP. START WARNINGS AT 70.") USAGE BEFORE CRNRSTN ::
    // WILL STOP WRITING FILES. SETTING $max_disk_storage_utilization=100,
    // WILL EVENTUALLY BRICK YOUR SERVER IF "LOGGING TO CUSTOM
    // FILE" IS ENABLED.
    private static $max_disk_storage_utilization = 85;
    private static $max_disk_storage_utilization_warning = 70;
    private static $os_bit_size_override;
    private static $max_write_file_size_override;
    private static $crnrstn_file_bytes_reserve_override;
    private static $max_write_volume_size_override;
    private static $crnrstn_volume_bytes_reserve_override;
    private static $volume_bytes_reserve_override;
    private static $max_count_folder_items_override;
    private static $crnrstn_folder_items_reserve_override;
    private static $max_count_volume_items_override;
    private static $crnrstn_volume_items_reserve_override;
    private static $crnrstn_max_length_filename_override;
    private static $crnrstn_max_length_filepath_override;
    private static $crnrstn_soap_services_enabled_override;
    private static $crnrstn_slow_queries_acceleration_enabled_override;
    private static $max_connections_override;
    private static $connection_keepalive_override;
    private static $connection_ttl_override;
    private static $crnrstn_query_cache_enabled_override;
    private static $crnrstn_results_cache_enabled_override;
    private static $max_allowed_packet_override;
    private static $max_cache_packet_bytes_override;
    private static $cache_ttl_packet_override;
    private static $max_cache_results_bytes_override;
    private static $cache_ttl_results_override;
    private static $table_prefix_override;
    private static $max_table_record_count_override;
    private static $shard_ttl_override;
    private static $max_bytes_throughput_override;
    private static $max_pid_threads_override;
    private static $max_conn_ftp_override;
    private static $ftp_conn_timeout_override;
    private static $max_cpu_load_percentage_override;
    private static $max_incoming_data_connections_override;
    private static $max_outgoing_data_connections_override;
    private static $ftp_graceful_degrade_override;
    private static $default_zipcode_override;
    private static $forecast_length_override;
    private static $default_units_celsius_override;
    private static $database_enabled_override;

    private static $system_integrations_directory_content_ARRAY = array();

    private static $version_crnrstn = '2.00.0000 PRE-ALPHA-DEV (Lightsaber)';

    public function __construct($config_filepath, $CRNRSTN_config_salt = '', $CRNRSTN_debug_mode = 0, $PHPMAILER_debug_mode = 0, $CRNRSTN_log_silo_profile = CRNRSTN_LOG_ALL, $file_mod_config_reset = true){

        try{

            $this->starttime = $_SERVER['REQUEST_TIME_FLOAT'];

            //
            // CREATE A MONITORING AND REPORTING TOUCH POINT
            // FOR CRNRSTN :: SYSTEM RESOURCE CONSUMPTION MANAGEMENT.
            $this->memory_performance('CRNRSTN_CONSTRUCTOR');

            /*
            CRNRSTN :: DATA HANDLING ARCHITECTURES
            -----
            G :: HTTP $_GET REQUEST.
            P :: HTTP $_POST REQUEST.
            H :: PHP SERVER SESSION ($_SESSION SUPER GLOBAL ARRAY).
            S :: CRNRSTN :: SSDTLA PACKET (SOAP WRAPPED ENCRYPTED PSSDTLA PACKET. THE BROWSER WILL TALK LIKE A SERVER).
            J :: CRNRSTN :: PSSDTLA PACKET (OPENSSL ENCRYPTED JSON OBJECT).
            C :: CARRIER PIGEON (AVIAN OF HOMING VARIANT)...OR BROWSER COOKIE...
            D :: DATABASE (MySQLi CONNECTION).
            R :: RUNTIME.
            O :: SIMPLE OBJECT ACCESS PROTOCOL (NuSOAP 0.9.5, SOAP 1.1).
            F :: SERVER LOCAL FILE SYSTEM.

            CRNRSTN :: ORDER OF OPERATIONS (PREFERENCE) FOR SPECIFICATION OF
            AUTHORIZED PROPRIETARY DATA ARCHITECTURES OR CHANNELS.
            -----
            GPHSJCDROF

            */

            //
            // INITIALIZE THE CRNRSTN :: SYSTEM DEBUG MODE ARRAY.
            self::$crnrstn_debug_mode_ARRAY = array(CRNRSTN_DEBUG_OFF => 'CRNRSTN_DEBUG_OFF',
            CRNRSTN_DEBUG_NATIVE_ERR_LOG => 'CRNRSTN_DEBUG_NATIVE_ERR_LOG',
            CRNRSTN_DEBUG_AGGREGATION_ON => 'CRNRSTN_DEBUG_AGGREGATION_ON');

            //
            // INITIALIZE THE CRNRSTN :: PHPMAILER SYSTEM DEBUG MODE ARRAY.
            self::$phpmailer_debug_mode_ARRAY = array(CRNRSTN_PHPMAILER_DEBUG_OFF => 'CRNRSTN_PHPMAILER_DEBUG_OFF',
            CRNRSTN_PHPMAILER_DEBUG_CLIENT => 'CRNRSTN_PHPMAILER_DEBUG_CLIENT',
            CRNRSTN_PHPMAILER_DEBUG_SERVER => 'CRNRSTN_PHPMAILER_DEBUG_SERVER',
            CRNRSTN_PHPMAILER_DEBUG_CONNECTION => 'CRNRSTN_PHPMAILER_DEBUG_CONNECTION',
            CRNRSTN_PHPMAILER_DEBUG_LOWLEVEL => 'CRNRSTN_PHPMAILER_DEBUG_LOWLEVEL');

            //
            // INITIALIZE CRNRSTN :: MULTI-CHANNEL DECOUPLED
            // DATA OBJECT (MC-DDO) SYNTAX SUPPORT STRUCTURES.
            //
            // Thursday, October 12, 2023 @ 0734 hrs.
            self::$channel_integer_syntax_ARRAY = array(CRNRSTN_CHANNEL_GET => 'G', CRNRSTN_CHANNEL_POST => 'P',
            CRNRSTN_CHANNEL_SESSION => 'H', CRNRSTN_CHANNEL_SSDTLA => 'S', CRNRSTN_CHANNEL_PSSDTLA => 'J',
            CRNRSTN_CHANNEL_COOKIE => 'C', CRNRSTN_CHANNEL_DATABASE => 'D', CRNRSTN_CHANNEL_RUNTIME => 'R',
            CRNRSTN_CHANNEL_SOAP => 'O', CRNRSTN_CHANNEL_FILE => 'F');
            self::$channel_syntax_ARRAY = array('G' => 'get', 'P' => 'post', 'H' => 'session', 'S' => 'ssdtla',
            'J' => 'pssdtla', 'C' => 'cookie', 'D' => 'database', 'R' => 'runtime', 'O' => 'soap', 'F' => 'file');

            //
            // INITIALIZE AN ARRAY OF ENCRYPTABLE DATA TYPES.
            // TODO :: REARCHITECT THE DATA HANDLING POLICIES OF
            //         THE CRNRSTN :: ENCRYPTION SERVICES LAYER
            //         SO THAT OBJECT AND ARRAY DATA TYPES ARE COOL.
            //         Monday, December 11, 2023 @ 2031 hrs.
            self::$encryptable_data_types_ARRAY = array('string' => 'string', 'integer' => 'integer', 'double' => 'double',
            'float' => 'float', 'int' => 'int');

            //
            // WE STORE BYTE UNITS POWER DATA WITH THE ARRAY INDEX, SINCE WE DON'T NEED
            // ANY ADDITIONAL STRING META DATA WHERE THIS STRUCTURE IS USED.
            self::$byte_units_ARRAY['SI_METRIC']['STRING_PATTERN']['UNITS_EXPONENTIAL_POSITIVE'] = array('terabytes' => 4,
            'terabyte' => 4, 'exabytes' => 6, 'exabyte' => 6, 'yottabytes' => 8, 'yottabyte' => 8);
            self::$byte_units_ARRAY['ISO_80000']['STRING_PATTERN']['UNITS_BYTES_POSITIVE'] = array('bytes' => 0,
            'byte' => 0);

            //
            // INITIALIZE ISO/IEC 80000-13 INFORMATION SCIENCE AND
            // TECHNOLOGY QUANTITIES AND UNITS DETECTION, POWER,
            // AND DATA ARCHITECTURE SUPPORT DATA STRUCTURES.
            //
            // Wednesday, September 27, 2023 @ 2012 hrs.
            self::$byte_units_ARRAY['ISO_80000']['BASE'] = 1024;
            self::$byte_units_ARRAY['SI_METRIC']['BASE'] = 1000;
            self::$byte_units_ARRAY['ISO_80000']['UNITS'] = array('bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB',
            'ZiB', 'YiB');
            self::$byte_units_ARRAY['SI_METRIC']['UNITS'] = array('bytes', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB');
            self::$byte_units_ARRAY['ISO_80000']['CONTROL_PATTERN'] = array('b' => 0, 'ki' => 1, 'mi' => 2, 'gi' => 3,
            'ti' => 4, 'pi' => 5, 'ei' => 6, 'zi' => 7, 'yi' => 8);
            self::$byte_units_ARRAY['SI_METRIC']['CONTROL_PATTERN'] = array('b' => 0, 'k' => 1, 'm' => 2, 'g' => 3,
            't' => 4, 'p' => 5, 'e' => 6, 'z' => 7, 'y' => 8);
            self::$byte_units_ARRAY['ISO_80000']['STRING_PATTERN']['ISO_UNITS_BYTES'] = array('bytes' => 'bytes',
            'byte' => 'bytes', 'b' => 'bytes');
            self::$byte_units_ARRAY['ISO_80000']['STRING_PATTERN']['ISO_UNITS_EXPONENTIAL'] = array('ki' => 'kibibyte',
            'mi' => 'mebibyte', 'gi' => 'gibibyte', 'ti' => 'tebibyte', 'pi' => 'pebibyte', 'ei' => 'exbibyte',
            'zi' => 'zebibyte', 'yi' => 'yobibyte');
            self::$byte_units_ARRAY['SI_METRIC']['STRING_PATTERN']['SI_UNITS_BYTES'] = array('bytes' => 'bytes',
            'byte' => 'bytes', 'b' => 'bytes');
            self::$byte_units_ARRAY['SI_METRIC']['STRING_PATTERN']['SI_UNITS_EXPONENTIAL'] = array('k' => 'kilobyte',
            'm' => 'megabyte', 'g' => 'gigabyte', 't' => 'terabyte', 'p' => 'petabyte', 'e' => 'exabyte',
            'z' => 'zettabyte', 'y' => 'yottabyte');

            //
            // STAT() AND FSTAT() SERVER FILE META OUTPUT RESULT CRNRSTN :: SYSTEM KEY IDENTIFIERS.
            // THE STRING KEYS ARE MAPPED WITH IS_ACTIVE = 1 (ON) STATE.
            // SEE, system_file_active_attributes_profile, FOR RUNTIME SETTINGS
            // OVERRIDES IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
            self::$system_file_attributes_master_ARRAY = array('TOTAL_FILESIZE' => 1, 'PERMISSIONS_OCTAL' => 1,
            'PERMISSIONS_FULL' => 1, 'BLOCK_ALLOCATE' => 1, 'BLOCK_SIZE' => 1, 'DATE_LASTMODIFIED' => 1,
            'DATE_LASTACCESSED' => 1, 'GID_STRING' => 1, 'GID_INT' => 1, 'UID_STRING' => 1,
            'UID_INTEGER' => 1, 'FILESIZE' => 1);

            self::$datatype_master_ARRAY = array(
            'string'                => array(CRNRSTN_INTEGER => CRNRSTN_STRING,           CRNRSTN_STRING => 'CRNRSTN_STRING',           'PHP_NATIVE' => 'string'),
            'int'                   => array(CRNRSTN_INTEGER => CRNRSTN_INT,              CRNRSTN_STRING => 'CRNRSTN_INT',              'PHP_NATIVE' => 'int'),
            'integer'               => array(CRNRSTN_INTEGER => CRNRSTN_INTEGER,          CRNRSTN_STRING => 'CRNRSTN_INTEGER',          'PHP_NATIVE' => 'integer'),
            'bool'                  => array(CRNRSTN_INTEGER => CRNRSTN_BOOL,             CRNRSTN_STRING => 'CRNRSTN_BOOL',             'PHP_NATIVE' => 'bool'),
            'boolean'               => array(CRNRSTN_INTEGER => CRNRSTN_BOOLEAN,          CRNRSTN_STRING => 'CRNRSTN_BOOLEAN',          'PHP_NATIVE' => 'boolean'),
            'float'                 => array(CRNRSTN_INTEGER => CRNRSTN_FLOAT,            CRNRSTN_STRING => 'CRNRSTN_FLOAT',            'PHP_NATIVE' => 'float'),
            'double'                => array(CRNRSTN_INTEGER => CRNRSTN_DOUBLE,           CRNRSTN_STRING => 'CRNRSTN_DOUBLE',           'PHP_NATIVE' => 'double'),
            'array'                 => array(CRNRSTN_INTEGER => CRNRSTN_ARRAY,            CRNRSTN_STRING => 'CRNRSTN_ARRAY',            'PHP_NATIVE' => 'array'),
            'object'                => array(CRNRSTN_INTEGER => CRNRSTN_OBJECT,           CRNRSTN_STRING => 'CRNRSTN_OBJECT',           'PHP_NATIVE' => 'object'),
            'resource'              => array(CRNRSTN_INTEGER => CRNRSTN_RESOURCE,         CRNRSTN_STRING => 'CRNRSTN_RESOURCE',         'PHP_NATIVE' => 'resource'),
            'resource (closed)'     => array(CRNRSTN_INTEGER => CRNRSTN_RESOURCE_CLOSED,  CRNRSTN_STRING => 'CRNRSTN_RESOURCE_CLOSED',  'PHP_NATIVE' => 'resource (closed)'),
            'unknown type'          => array(CRNRSTN_INTEGER => CRNRSTN_UNKNOWN_TYPE,     CRNRSTN_STRING => 'CRNRSTN_UNKNOWN_TYPE',     'PHP_NATIVE' => 'unknown type'),
            'NULL'                  => array(CRNRSTN_INTEGER => CRNRSTN_NULL,             CRNRSTN_STRING => 'CRNRSTN_NULL',             'PHP_NATIVE' => 'NULL')
            );

            //
            // THE FOLLOWING ARRAYS ARE ONLY FOR GLOBAL DEFINITION; THESE ARE
            // NOT FOR SEQUENCE CONTROL (ORDER OF OPERATIONS)...NOT EVEN A LITTLE.
            self::$channel_master_ARRAY = array(CRNRSTN_CHANNEL_GET => 'G', CRNRSTN_CHANNEL_POST => 'P',
            CRNRSTN_CHANNEL_SESSION => 'H', CRNRSTN_CHANNEL_SSDTLA => 'S', CRNRSTN_CHANNEL_PSSDTLA => 'J',
            CRNRSTN_CHANNEL_COOKIE => 'C', CRNRSTN_CHANNEL_DATABASE => 'D', CRNRSTN_CHANNEL_RUNTIME => 'R',
            CRNRSTN_CHANNEL_SOAP => 'O', CRNRSTN_CHANNEL_FILE => 'F');
            self::$system_default_logging_output_profile = CRNRSTN_LOG_DEFAULT;
            self::$system_log_output_profile_constants_ARRAY = array(
            CRNRSTN_LOG_EMAIL => 'CRNRSTN_LOG_EMAIL', CRNRSTN_LOG_EMAIL_PROXY => 'CRNRSTN_LOG_EMAIL_PROXY',
            CRNRSTN_LOG_FILE => 'CRNRSTN_LOG_FILE', CRNRSTN_CHANNEL_FILE => 'CRNRSTN_CHANNEL_FILE',
            CRNRSTN_LOG_FILE_FTP => 'CRNRSTN_LOG_FILE_FTP', CRNRSTN_LOG_SCREEN_TEXT => 'CRNRSTN_LOG_SCREEN_TEXT',
            CRNRSTN_LOG_SCREEN => 'CRNRSTN_LOG_SCREEN', CRNRSTN_LOG_SCREEN_HTML => 'CRNRSTN_LOG_SCREEN_HTML',
            CRNRSTN_LOG_SCREEN_HTML_HIDDEN => 'CRNRSTN_LOG_SCREEN_HTML_HIDDEN', CRNRSTN_LOG_DEFAULT => 'CRNRSTN_LOG_DEFAULT',
            CRNRSTN_LOG_ELECTRUM => 'CRNRSTN_LOG_ELECTRUM', CRNRSTN_LOG_DATABASE => 'CRNRSTN_LOG_DATABASE',
            CRNRSTN_LOG_SSDTLA => 'CRNRSTN_LOG_SSDTLA', CRNRSTN_LOG_PSSDTLA => 'CRNRSTN_LOG_PSSDTLA',
            CRNRSTN_LOG_SOAP => 'CRNRSTN_LOG_SOAP');

            //
            // TODO :: OVERWRITE THIS DEFAULT DURING CRNRSTN :: MC-DDO DATABASE DRIVEN CONFIGURATION.           // Tuesday, December 12, 2023 @ 2256 hrs.
            // THIS LANGUAGE DEFAULT DOES NOT CHANGE.
            // NOTE: INTERESTED IN THE DOM VISIBLE (BUFFER OUTPUT WRITTEN) <HTML> LANG ATTRIBUTE?
            //       PLEASE SEE, $oCRNRSTN->iso_language_html();
            //
            //       THANKS!
            $this->iso_language_html_default = 'en';                                // DOES NOT CHANGE.
            $this->iso_language_html_available_ARRAY = array('en' => 'en');         // WILL REFLECT OFFICIALLY SUPPORTED/AVAILABLE LANGUAGES...NOT A DIRECT MIRROR OF ACTUAL CONTENT.
            //        $this->iso_language_html_default = 'ko';
            //        $this->iso_language_html_available_ARRAY = array('ko' => 'ko', 'es' => 'es', 'zh' => 'zh');

            //
            // INSTANTIATE THE CRNRSTN :: LOGGING CLASS OBJECT.
            // THE CRNRSTN :: SOAP SERVICES LOGGING SERVICES
            // LAYER PROVIDES MULTIPLE TOUCH POINTS FOR AN
            // ENRICHED DEBUGGING/LOG TRACE EXPERIENCE.
            self::$oLogger = new crnrstn_logging(__CLASS__, $this);

            //
            // INSTANTIATE THE CRNRSTN :: OPENSSL ENCRYPTION
            // ROTATION SERVICES LAYER (OERSL) MANAGER CLASS OBJECT.
            self::$oCRNRSTN_ORESL_MGR = new crnrstn_openssl_encryption_rotation_services_manager($this);

            //
            // INSTANTIATE THE CRNRSTN :: SESSION MANAGER CLASS OBJECT.
            self::$oSESSION_MGR = new crnrstn_session_manager($this);

            //
            // INSTANTIATE CRNRSTN :: DATABASE CLASS OBJECT WITH CONNECTION,
            // QUERY, AND RESPONSE HANDLING DATABASE INTEGRATIONS.
            self::$oCRNRSTN_DATABASE = new crnrstn_database_crnrstn($this);

            //
            // INSTANTIATE THE CRNRSTN :: CONFIGURATION MANAGER CLASS OBJECT.
            self::$oCRNRSTN_CONFIG_MGR = new crnrstn_configuration_manager($this, $config_filepath, $CRNRSTN_config_salt, $file_mod_config_reset, 'sha256');

            //
            // SOURCE :: https://www.youtube.com/watch?v=eiWClZrJSZY
            // TITLE :: Warren G Ft. Nate Dogg - Regulate (Dirty+Lyrics)
            // AUTHOR :: R.I.P. NATE DOGG [1969-2011] | WARREN G.
            //
            // Monday, March 22, 2021 @ 0226 hrs.
            //
            // INSTANTIATE THE CRNRSTN :: PERFORMANCE REGULATOR CLASS OBJECT.
            self::$oCRNRSTN_PERFORMANCE_REGULATOR = new crnrstn_performance_regulator($this);

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //              CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //              SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //              ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //              EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', self::$version_crnrstn, 'version_crnrstn', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // Monday, December 11, 2023 @ 1057 hrs.
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $CRNRSTN_debug_mode, 'CRNRSTN_debug_mode', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

            //
            // INSTANTIATE THE CRNRSTN :: DATA TUNNEL SERVICES MANAGER CLASS OBJECT.
            $this->oDATA_TUNNEL_SERVICES_MGR = new crnrstn_data_tunnel_services_manager($this);

            //
            // INSTANTIATE THE CRNRSTN :: UI TUNNEL RESPONSE MANAGER CLASS OBJECT.
            $this->oCRNRSTN_TRM = new crnrstn_ui_tunnel_response_manager($this);

            //
            // TODO :: MAKE THIS WINDOWS COMPATIBLE
            // PROCESS ID :: SITUATIONAL AWARENESS
            $this->initialize_os();
            $this->process_id = getmypid();

            //
            // INSTANTIATE THE CRNRSTN :: MULTI-LANGUAGE MANAGER CLASS OBJECT.
            $this->oCRNRSTN_LANG_MGR = new crnrstn_multi_language_manager($this);

            //
            // THE INSTANTIATION AND INITIALIZATION OF THE CRNRSTN ::
            // BITWISE SWITCHING ENGINE WITH ALL THE INTEGER CONSTANTS,
            // WITH ALL THE BITS, AND WITH ALL THE FLIPPING CLASS OBJECTS.
            $this->initialize_bitwise();
            $this->initialize_integer_length();
            $this->initialize_language();

            //
            // INSTANTIATE THE CRNRSTN :: 1.0.0 SYSTEM EMAIL CONTENT HELPER
            // CLASS OBJECT THAT HAS SINCE BEEN PROMOTED TO BE THE CRNRSTN :: ASSET MANAGER.
            $this->oCRNRSTN_ASSET_MGR = new crnrstn_system_asset_manager($this);

            //
            // J5, my boy!
            // INITIALIZE ALPHA SHIFT CRYPT KEY.
            $this->initialize_alpha_shift_crypt('JFIVEMYBOY');

            //
            // CRNRSTN :: HTML <!-- COMMENTS MODE --> PROFILE CONSTANTS.
            self::$html_comments_profile_ARRAY = array(CRNRSTN_HTML_COMMENTS_SILENT_GOLD => 'CRNRSTN_HTML_COMMENTS_SILENT_GOLD',
            CRNRSTN_HTML_COMMENTS_NONE => 'CRNRSTN_HTML_COMMENTS_NONE',
            CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED => 'CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED',
            CRNRSTN_HTML_COMMENTS_ENLARGED_PHYLACTERIES => 'CRNRSTN_HTML_COMMENTS_ENLARGED_PHYLACTERIES',
            CRNRSTN_HTML_COMMENTS_FULL => 'CRNRSTN_HTML_COMMENTS_FULL');

            //
            // INITIALIZE SOME GROUPED INTEGER CONSTANTS ARRAYS
            // FOR SUPPORT OF CRNRSTN :: INTERNAL DATA ARCHITECTURE.
            $this->system_data_profile_constants_ARRAY = array(CRNRSTN_CHANNEL_ALL, CRNRSTN_CHANNEL_GET,
            CRNRSTN_CHANNEL_POST, CRNRSTN_CHANNEL_COOKIE, CRNRSTN_CHANNEL_SESSION,
            CRNRSTN_CHANNEL_DATABASE, CRNRSTN_CHANNEL_SSDTLA, CRNRSTN_CHANNEL_PSSDTLA,
            CRNRSTN_CHANNEL_RUNTIME, CRNRSTN_CHANNEL_SOAP, CRNRSTN_CHANNEL_FILE);   // CRNRSTN_CHANNEL_FILE [Saturday, November 18, 2023 @ 0618 hrs.]
            $this->system_ui_module_constants_ARRAY = array(CRNRSTN_RESOURCE_ALL => 'CRNRSTN_RESOURCE_ALL',
            CRNRSTN_RESOURCE_BASSDRIVE => 'CRNRSTN_RESOURCE_BASSDRIVE',
            CRNRSTN_RESOURCE_NATIONAL_WEATHER_SERVICE => 'CRNRSTN_RESOURCE_NATIONAL_WEATHER_SERVICE',
            CRNRSTN_RESOURCE_CSS_VALIDATOR => 'CRNRSTN_RESOURCE_CSS_VALIDATOR',
            CRNRSTN_RESOURCE_DOCUMENTATION => 'CRNRSTN_RESOURCE_DOCUMENTATION',
            CRNRSTN_RESOURCE_IMAGE => 'CRNRSTN_RESOURCE_IMAGE', CRNRSTN_RESOURCE_DOCUMENT => 'CRNRSTN_RESOURCE_DOCUMENT',
            CRNRSTN_RESOURCE_OPENSOURCE => 'CRNRSTN_RESOURCE_OPENSOURCE',
            CRNRSTN_RESOURCE_ELECTRUM => 'CRNRSTN_RESOURCE_ELECTRUM',
            CRNRSTN_RESOURCE_NEWS_SYNDICATION => 'CRNRSTN_RESOURCE_NEWS_SYNDICATION',
            CRNRSTN_LOG_DEFAULT => 'CRNRSTN_LOG_DEFAULT', CRNRSTN_UI_TAG_ANALYTICS => 'CRNRSTN_UI_TAG_ANALYTICS',
            CRNRSTN_UI_TAG_ENGAGEMENT => 'CRNRSTN_UI_TAG_ENGAGEMENT',
            CRNRSTN_UI_COOKIE_PREFERENCE => 'CRNRSTN_UI_COOKIE_PREFERENCE',
            CRNRSTN_UI_COOKIE_YESNO => 'CRNRSTN_UI_COOKIE_YESNO', CRNRSTN_UI_COOKIE_NOTICE => 'CRNRSTN_UI_COOKIE_NOTICE',
            CRNRSTN_PROXY_KINGS_HIGHWAY => 'CRNRSTN_PROXY_KINGS_HIGHWAY', CRNRSTN_PROXY_EMAIL => 'CRNRSTN_PROXY_EMAIL',
            CRNRSTN_PROXY_ELECTRUM => 'CRNRSTN_PROXY_ELECTRUM', CRNRSTN_PROXY_AUTHENTICATE => 'CRNRSTN_PROXY_AUTHENTICATE',
            CRNRSTN_RESPONSE_REPORT => 'CRNRSTN_RESPONSE_REPORT', CRNRSTN_CLIENT_SSDTLA_DEBUG => 'CRNRSTN_CLIENT_SSDTLA_DEBUG');
            self::$system_resource_constants_ARRAY = array(CRNRSTN_RESOURCE_ALL, CRNRSTN_RESOURCE_BASSDRIVE,
            CRNRSTN_RESOURCE_NATIONAL_WEATHER_SERVICE, CRNRSTN_RESOURCE_CSS_VALIDATOR, CRNRSTN_RESOURCE_DOCUMENTATION,
            CRNRSTN_RESOURCE_DEEP_LINK, CRNRSTN_RESOURCE_IMAGE, CRNRSTN_RESOURCE_DOCUMENT, CRNRSTN_RESOURCE_OPENSOURCE,
            CRNRSTN_RESOURCE_NEWS_SYNDICATION, CRNRSTN_LOG_EMAIL, CRNRSTN_LOG_EMAIL_PROXY, CRNRSTN_LOG_FILE, CRNRSTN_CHANNEL_FILE,
            CRNRSTN_LOG_FILE_FTP, CRNRSTN_LOG_SCREEN_TEXT, CRNRSTN_LOG_SCREEN, CRNRSTN_LOG_SCREEN_HTML,
            CRNRSTN_LOG_SCREEN_HTML_HIDDEN, CRNRSTN_LOG_DEFAULT, CRNRSTN_LOG_ELECTRUM, CRNRSTN_LOG_SCREEN,
            CRNRSTN_CHANNEL_DATABASE, CRNRSTN_CHANNEL_SSDTLA, CRNRSTN_CHANNEL_PSSDTLA, CRNRSTN_CHANNEL_SOAP);
            self::$system_theme_style_constants_ARRAY = array(CRNRSTN_UI_PHPNIGHT => CRNRSTN_UI_PHPNIGHT,
            CRNRSTN_UI_DARKNIGHT => CRNRSTN_UI_DARKNIGHT, CRNRSTN_UI_PHP => CRNRSTN_UI_PHP,
            CRNRSTN_UI_GREYSKY => CRNRSTN_UI_GREYSKY, CRNRSTN_UI_HTML => CRNRSTN_UI_HTML,
            CRNRSTN_UI_DAYLIGHT => CRNRSTN_UI_DAYLIGHT, CRNRSTN_UI_FEATHER => CRNRSTN_UI_FEATHER,
            CRNRSTN_UI_GLASS_LIGHT_COPY => CRNRSTN_UI_GLASS_LIGHT_COPY,
            CRNRSTN_UI_GLASS_DARK_COPY => CRNRSTN_UI_GLASS_DARK_COPY, CRNRSTN_UI_WOOD => CRNRSTN_UI_WOOD,
            CRNRSTN_UI_TERMINAL => CRNRSTN_UI_TERMINAL, CRNRSTN_UI_RANDOM => CRNRSTN_UI_RANDOM);
            self::$system_output_profile_constants_ARRAY = array(CRNRSTN_ASSET_MODE_PNG => CRNRSTN_ASSET_MODE_PNG,
            CRNRSTN_ASSET_MODE_JPEG => CRNRSTN_ASSET_MODE_JPEG, CRNRSTN_ASSET_MODE_BASE64 => CRNRSTN_ASSET_MODE_BASE64);
            self::$system_device_channel_constants_ARRAY = array(CRNRSTN_CHANNEL_DESKTOP, CRNRSTN_CHANNEL_TABLET, CRNRSTN_CHANNEL_MOBILE);
            $this->system_response_map_output_format_constants = array(CRNRSTN_ASSET_MAPPING, CRNRSTN_ASSET_MAPPING_PROXY);
            self::$system_creative_element_keys_ARRAY = array('STACHE', 'CRNRSTN ::', 'LINUX_PENGUIN_SMALL',
            'REDHAT_LOGO', 'APACHE_FEATHER', 'APACHE_POWER_VERSION', 'CRNRSTN_R', 'FIVE', 'MYSQL_DOLPHIN',
            'PHP_ELLIPSE', 'POWER_BY_PHP', 'ZEND_LOGO', 'ZEND_FRAMEWORK', 'ZEND_FRAMEWORK_3', 'REDHAT_HAT_LOGO');
            $this->generate_weighted_elements_keys(count(self::$system_creative_element_keys_ARRAY));

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_mixed', $CRNRSTN_log_silo_profile, 'CRNRSTN_log_silo_profile', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

            $sys_logging_profile_pack = $this->return_sys_logging_init_profile_pack();

            //
            // INSTANTIATE THE CRNRSTN :: LOGGING PROFILE MANAGER CLASS OBJECT.
            self::$oLOG_PROFILE_MGR = new crnrstn_logging_oprofile_manager($sys_logging_profile_pack, $this);

            //
            // STORE THE CRNRSTN :: RRS MAP OBJECT IN THE CRNRSTN :: CONFIGURATION MANAGER.
            self::$oCRNRSTN_CONFIG_MGR->consume_rrs_map(self::$oCRNRSTN_RRS_MAP);

            //
            // LOAD $_SERVER[] DATA INTO THE CRNRSTN :: MC-DDO.
            // TODO :: BUILD THIS INTO APPLICATION CACHE.
            //$this->initialize_config_manager();

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_datetime', $this->starttime, 'starttime', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $PHPMAILER_debug_mode, 'PHPMAILER_debug_mode', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

            //
            // INITIALIZE L.A.M.P. PROFILE META WITHIN CRNRSTN ::
            // Saturday, November 25, 2023 @ 1529 hrs.
            $this->response_header_attribute_ARRAY['log'] = '';
            $this->initialize_linux_profile();
            $this->initialize_apache_profile();
            $this->initialize_php_profile();
            $this->initialize_openssl_profile();

            $this->error_log('SERVER / CRNRSTN :: start time [' . $this->starttime . ']', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            $this->error_log('TODO :: EVALUATE CONFIG FILE INCLUDES PER SOAP INCLUDES STANDARDS. 11/12/2020 0412 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: CONFIRM EXCLUSIVE USE OF ONLY-GET-WHAT-YOU-NEED-TO-oCRNRSTN_ENV ON NEW CONFIGURATION INCLUDES WITHIN CRNRSTN [oWCR, PROXY, etc.] :: 11/13/2020 1159 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: WRAP NUSOAP PHP SERVER ENDPOINT IN oCRNRSTN_USR...AND PREPARE TO SUPPORT DYNAMIC WSDL ENDPOINTS :: 11/14/2020 2114 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: PREFIX NUSOAP PHP SERVER WSDL ENDPOINT WITH --> CONFIGURABLE ALLOW/DENY IP ADDRESS CHECK. 11/15/2020 0705 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: TTL FUNCTIONALITY ADDED TO ELECTRUM DESTINATION FTP/DIR PROFILE TO SUPPORT ROTATION. 1/25/2021 1228 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: FACILITATE GRACEFUL ROTATION OF ENCRYPTION PROFILES. 1/27/2021 1145 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: ENSURE GRANULAR APPLICATION OF METHOD FALSE PATHWAY :: $oCRNRSTN_USR->electrum_deleteSourceData_OnSuccess(). 2/4/2021 @1636 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: // https://www.php.net/manual/en/language.operators.bitwise.php#108679 2/4/2021 1637 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: // https://www.php.net/manual/en/language.operators.bitwise.php // https://www.php.net/manual/en/language.operators.bitwise.php#108679 // https://stackoverflow.com/questions/12380478/bits-counting-algorithm-brian-kernighan-in-an-integer-time-complexity & // https://stackoverflow.com/questions/16848931/how-to-fastest-count-the-number-of-set-bits-in-php 2/4/2021 1637 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: // apache_get_version() & https://en.wikipedia.org/wiki/XML-RPC 2/10/2021 2231 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: // https://www.percona.com/blog/2008/01/10/php-vs-bigint-vs-float-conversion-caveat/ 2/14/2021 0326 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: PHPMailer is "Compatible with PHP 5.5 and later, including PHP 8.0". Make sure NuSOAP, MobileDetect, and CRNRSTN :: are as well. 3/10/2021 0547 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: CONSIDER USE OF STATIC METHODS AND SHIPPING CALCULATIONS API INTEGRATIONS DONE SAME TIME AS PAYMENT GATEWAY INTEGRATIONS :: 3/10/2021 0547 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: CRNRSTN :: DO WE REFRESH SESSION SERIALIZATION AFTER ANY OR ALL MODIFIED LINKED RESOURCES IN THE CONFIG-CHAIN? WE DO THIS FOR THE CONFIG FILE ONLY, NOW. 11/13/2021 2102 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: LOGIN ERR CONSIDER TRACKING STALE PASSWORD...FORCED RESET...EVEN CERTAIN STRING PATTERN BEHAVIOR. 5/13/2021 2102 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: EXPOSE self::$lscpu_output FROM BITWISE MANAGER TO oCRNRSTN_USR [CPU MHz, Vendor ID, Byte Order...] 5/19/2021 1613 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: FORCE DATABASE CONFIG ENV MISALIGNMENT, AND THEN CATCH IT @ LINE 303 HERE _crnrstn/class/database/mysqli/crnrstn.mysqli.inc.php] 9/17/2021 1023 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: MIGRATE crnrstn_bassdrive_stream_manager USE OF oCRNRSTN_USR->wp_db_name() TO CRNRSTN :: NATIVE SOLUTION 11/17/2021 0543 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: SERIALIZE (BEHIND THE SCENES) THE BATCH ID HANDLING FOR $this->oQUERY_PROFILE_MANAGER->loadQueryProfile() 11/17/2021 1235 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: PASSWORD CHANGE INTERSTITIAL LANGUAGE..."YOU\'LL "STAY" SIGNED IN ON THESE DEVICES..."  05/16/2023 0340 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->error_log('TODO :: __DESTRUCT() FIRE ALL STICKY REDIRECTS TO ALLOW FOR THE CONFIGURATION OF ANALYTICS.  08/16/2023 0728 hrs', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            if(!array_key_exists('SERVER_ADDR', $_SERVER)){

                //
                // HOOOSTON...VE HAF PROBLEM!
                // SOURCE :: https://www.wired.com/2011/04/alt-text-spacecraft/
                $this->error_log('ERROR :: unable to load CRNRSTN :: $_SERVER[] super global has not been initialized. If calling this program via script, try using cURL (/usr/bin/curl).', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                throw new Exception('CRNRSTN :: initialization error :: $_SERVER[] super global has not been initialized. If calling this program via script, try using cURL (/usr/bin/curl). SERVER_NAME(SERVER_ADDR)-> ' . $_SERVER['SERVER_NAME'] . ' (' . $_SERVER['SERVER_ADDR'] . ').');

            }

            //
            // IF SESSION ACCELERATION IS ACTIVE FOR ENVIRONMENTAL DETECTION, MAYBE INITIALIZE THE ENVIRONMENT META HERE.
            // NOTE: CRNRSTN :: CURRENTLY RUNS ENVIRONMENTAL DETECTION FROM
            //      SCRATCH FROM THE STATIC CONFIG FILE ON *EVERY LOAD.
            //      DUE TO THE NATIVE SUPPORT REQUIREMENT CRNRSTN :: BEARS
            //      FOR SOAP SERVICES SUPPORT, IT IS DESIRABLE TO WAIT FOR DATABASE
            //      SETUP TO BEGIN BEFORE INITIATING SUPPORT FOR SESSION ACCELERATED
            //      ENVIRONMENTAL DETECTION.
            //
            //      * AT THE LAST CHECK, CRNRSTN :: LIGHTSABER LOAD TIME WAS FASTER
            //      THAN PAGE LOAD TIMES ACHIEVED BY CRNRSTN :: v1.0.0, WHICH HAS
            //      SESSION ACCELERATED CONFIGURATION ENABLED.
            self::$env_key_hash_config_ARRAY[self::$config_serial] = '';

            //
            // INSTANTIATE THE CRNRSTN :: MYSQLI DATABASE CONNECTION MANAGER CLASS OBJECT.
            $this->error_log('Instantiating mysqli database connection manager object. Ready to configure database authentication profiles.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            $this->oMYSQLI_CONN_MGR = new crnrstn_mysqli_conn_manager($this);

            //
            // INSTANTIATE THE CRNRSTN :: IP ADDRESS SECURITY MANAGER CLASS OBJECT.
            $this->error_log('Instantiating IP security manager object with client IP of [' . $_SERVER['REMOTE_ADDR'] . '] and phpsessionid[' . session_id() . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            self::$oCRNRSTN_IP_MGR = new crnrstn_ip_authorization_manager($this);

            //
            // INSTANTIATE THE CRNRSTN :: INTERACT UI HTML MANAGER CLASS OBJECT.
            $this->oINTERACT_UI_HTML_MGR = new crnrstn_ui_html_manager($this);

            //
            // INSTANTIATE THE CRNRSTN :: CONTENT SOURCE CONTROLLER CLASS OBJECT.
            $this->oCRNRSTN_CS_CONTROLLER = $this->return_content_source_controller();

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    public function config_init_config_serialization($config_filepath, $CRNRSTN_config_salt, $file_mod_config_reset, $hash_algorithm){

        self::$config_serial = self::$oSESSION_MGR->config_init_config_serialization($config_filepath, $CRNRSTN_config_salt, $file_mod_config_reset, $hash_algorithm);

        self::$oLogger->set_crnrstn_logging('config_serial', self::$config_serial);
        self::$oLogger->set_crnrstn_logging('config_serial', self::$config_serial);

        return self::$config_serial;


//        //
//        // THIS COULD BE DEVELOPED TO BE A BIT MORE SUFFICIENT FOR SUCH A LOW LEVEL ERR...THO.
//        // TODO :: THIS IS ABOUT TO BE AUTOMATED. Saturday, October 28, 2023 @ 1839 hrs.
//        $tmp_configuration_init = false;
//
//        //
//        // CRNRSTN :: CONFIGURATION INITIALIZATION FIRST RUN.
//        // TODO :: PUSH THIS THROUGH THE SESSION MGR, AND ADD
//        //         SUPPORT FOR DATABASE DRIVEN SESSION MGMT.
//        //         Friday, December 8, 2023 @ 1735 hrs.
//        if(!isset($_SESSION['CRNRSTN_CONFIG_SERIALIZATION_HASH']) || $_SESSION['CRNRSTN_CONFIG_SERIALIZATION_HASH'] == 'FILE_MOD_RESET'){
//
//            //
//            // AUTOMATE THE GENERATION OF A SYSTEM CONFIGURATION KEY AND
//            // PERSIST THIS KEY IN SESSION.
//            //
//            // Friday, December 8, 2023 @ 1054 hrs.
//            $_SESSION['CRNRSTN_CONFIG_SERIALIZATION_SALT'] = $tmp_session_salt = $this->oCRNRSTN->generate_new_key(64, -1, true, $hash_algorithm) . strval($CRNRSTN_config_salt);
//
//            if($file_mod_config_reset !== false){
//
//                //
//                // FORCE RE-SERIALIZATION OF SESSION WITH CONFIG FILE CHANGE.
//                $tmp_configuration_serial = $tmp_session_salt . '_420.000.' . filesize($config_filepath) . '.' . filemtime($config_filepath) . '.5';
//
//            }else{
//
//                //
//                // IGNORE CONFIG FILE CHANGES.
//                $tmp_configuration_serial = $tmp_session_salt . '_420.000.' . $config_filepath . '.5';
//
//            }
//
//            $_SESSION['CRNRSTN_CONFIG_SERIALIZATION_HASH'] = $this->oCRNRSTN->hash($tmp_configuration_serial, $hash_algorithm);
//            $tmp_configuration_init = true;
//
//        }else{
//
//            //
//            // SESSION IS SET.
//            if($file_mod_config_reset !== false){
//
//                //
//                // FORCE RE-SERIALIZATION OF SESSION WITH CONFIG FILE CHANGE.
//                $tmp_configuration_serial = $_SESSION['CRNRSTN_CONFIG_SERIALIZATION_SALT'] . '_420.000.' . filesize($config_filepath) . '.' . filemtime($config_filepath) . '.5';
//                $tmp_session_reset_code = 'FILE_MOD_RESET';
//
//            }else{
//
//                //
//                // IGNORE CONFIG FILE CHANGES.
//                $tmp_configuration_serial = $_SESSION['CRNRSTN_CONFIG_SERIALIZATION_SALT'] . '_420.000.' . $config_filepath . '.5';
//                $tmp_session_reset_code = 'CONFIG_MOD_RESET';
//
//            }
//
//            $tmp_configuration_serial_hash = $this->oCRNRSTN->hash($tmp_configuration_serial, $hash_algorithm);
//
//            //
//            // CHECK FOR CONFIG DELTA.
//            if($_SESSION['CRNRSTN_CONFIG_SERIALIZATION_HASH'] != $tmp_configuration_serial_hash){
//
//                error_log(__LINE__ . ' ' . __METHOD__ . ' RESETTING SESSION. RESET CODE[' . $tmp_session_reset_code . '].');
//                $_SESSION['CRNRSTN_CONFIG_SERIALIZATION_HASH'] = $tmp_session_reset_code;
//                $this->config_init_config_serialization($config_filepath, $CRNRSTN_config_salt, $file_mod_config_reset, $hash_algorithm);
//
//            }
//
//        }
//
//        $this->oCRNRSTN->set_crnrstn('config_serial', $_SESSION['CRNRSTN_CONFIG_SERIALIZATION_HASH']);
//
//        //
//        // SETTING THIS ARRAY DURING THE INITIALIZATION OF CRNRSTN :: WILL RUN SYSTEM TERMINATE.
//        //$this->terminate_configuration_error_ARRAY['EMPTY_CONFIG_SERIAL'] = '$CRNRSTN_config_salt is length ' . $tmp_configuration_serial_len . '.';

        self::$request_id = $this->generate_new_key(64, -1, true, $hash_algorithm);
        self::$request_serial = $this->generate_new_key(32, -3, true);

    }

    public function crnrstn_include_file($calling_method, $file_path, $file_method_name = 'include_once', $hash_algorithm = NULL, $hash_output_binary = false, $enable_file_validation = true){

        try{

            if($enable_file_validation !== false){

                if(!is_file($file_path)){

                    throw new Exception('CRNRSTN :: FILE LOAD ERROR. ' . $calling_method . ' could not load the file, ' .
                        $this->gettype($file_path) . ') ' . strval($file_path) . '. ' .
                        $this->data_report($file_path, 'CRNRSTN :: MC-DDO INPUT DATA REPORT'));

                }

            }

            //
            // TRACK ACCESSED CONFIGURATION FILES THROUGH THE
            // APPLICATION OF A COMPUTED FILE VERSIONING HASH.
            $this->set_crnrstn('system_files_version_hash_ARRAY', $this->hash_file($file_path, $hash_algorithm, $hash_output_binary, true, $file_path), $file_path);

            switch($file_method_name){
                case 'include_once':
                    /*
                    The include_once statement includes and evaluates the specified
                    file during the execution of the script. This is a behavior
                    similar to the include statement, with the only difference being
                    that if the code from a file has already been included, it will
                    not be included again, and include_once returns true.

                    As the name suggests, the file will be included just once.

                    include_once may be used in cases where the same file might be
                    included and evaluated more than once during a particular
                    execution of a script, so in this case it may help avoid
                    problems such as function redefinitions, variable value
                    reassignments, etc.

                    */

                    include_once($file_path);

                break;
                case 'include':
                    /*
                    The include expression includes and evaluates the specified file.

                    The documentation below also applies to require.

                    Files are included based on the file path given or, if none is
                    given, the include_path specified. If the file isn't found in the
                    include_path, include will finally check in the calling script's
                    own directory and the current working directory before failing.

                    The include construct will emit an E_WARNING if it cannot find a
                    file; this is different behavior from require, which will emit
                    an E_ERROR.

                    Note that both include and require raise additional E_WARNINGs,
                    if the file cannot be accessed, before raising the final
                    E_WARNING or E_ERROR, respectively.

                    */
                    include($file_path);

                break;
                case 'require_once':
                    /*
                    The require_once expression is identical to require except PHP
                    will check if the file has already been included, and if so,
                    not include (require) it again.

                    */

                    require_once($file_path);

                break;
                case 'require':
                    /*
                    require is identical to include except upon failure it will
                    also produce a fatal E_COMPILE_ERROR level error. In other
                    words, it will halt the script whereas include only emits a
                    warning (E_WARNING) which allows the script to continue.

                    */

                    require($file_path);

                break;

            }

            return true;

        }catch(Exception $e) {

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    private function config_load_static_application_data(){

        //
        // A DEVELOPER NOTE:
        // WHAT HAPPENS AFTER THIS METHOD LOADS IT'S
        // CONTAINED STATIC APPLICATION DATA FOR CRNRSTN ::
        // -----
        // THE CRNRSTN :: CONFIGURATION SPOOLING SERVICES
        // LAYER WILL REPLAY ALL CONFIGURATION INPUT DATA
        // THAT WAS RECORDED BEFORE ENVIRONMENTAL
        // DETECTION COULD BE SIGNED OFF ON BY CRNRSTN ::
        //
        // Sunday, November 19, 2023 @ 1217 hrs.
        //
        //
        // HERE, WE WILL INITIALIZE DEFAULT SYSTEM CHANNEL
        // PROPERTIES FOR THE CRNRSTN :: MULTI-CHANNEL
        // DECOUPLED DATA OBJECT SERVICES LAYER.
        //
        // FOR CHANNEL REPORTING PURPOSES, WE WILL ALSO GO
        // AHEAD AND INITIALIZE CHANNEL BYTES TO ZED.
        //
        // Thursday, November 23, 2023 @ 0254 hrs.
        $this->config_load_system_channel_properties();

        //
        // TODO :: THE HMAC SHOULD BE COMPATIBLE BACK TO PHP 5.5. REGARDING OpenSSL...NEED PRE-v1.1.1 SUPPORT?
        // TODO :: CONFIRM THESE NEW VALUES FROM 06/29/2022 @ 1953 hrs IN CONFIG VALIDATION, AND REMOVE THE NON-MATCHED. Wednesday, October 18, 2023 @ 0328 hrs.
        // Wednesday, June 29, 2022 @ 1953 hrs
        self::$system_hmac_algorithm_preferred_ARRAY = self::$oCRNRSTN_ORESL_MGR->config_load_static_application_data('system_hmac_algorithm_preferred_ARRAY');
        self::$system_openssl_cipher_preferred_ARRAY = self::$oCRNRSTN_ORESL_MGR->config_load_static_application_data('system_openssl_cipher_preferred_ARRAY');
        self::$system_openssl_digest_preferred_ARRAY = self::$oCRNRSTN_ORESL_MGR->config_load_static_application_data('system_openssl_digest_preferred_ARRAY');

        //
        // TODO :: RE-ARCHITECT THIS META INTO CRNRSTN :: ADMINISTRATOR SETTINGS CONFIGURATION AND MANAGEMENT.
        // SOURCE :: https://datatracker.ietf.org/doc/html/rfc8017#appendix-B
        // INITIALIZE ARRAY OF OPENSSL DIGEST METHODS (RECOMMENDED BY PKCS #1: RSA Cryptography
        // Specifications Version 2.2). For the EMSA-PKCS1-v1_5 encoding method, SHA-224, SHA-256,
        // SHA-384, SHA-512, SHA-512/224, and SHA-512/256 are RECOMMENDED for new applications.
        // MD2, MD5, and SHA-1 are recommended only for compatibility with existing applications
        // based on PKCS #1 v1.5.
        // self::$openssl_preferred_digest_ARRAY = array('sha256', 'sha224', 'sha384', 'sha512', 'sha512-224',
        // 'sha512-256', 'RSA-SHA224', 'RSA-SHA256', 'RSA-SHA384', 'RSA-SHA512', 'RSA-SHA512/224', 'RSA-SHA512/256',
        // 'md5', 'sha1', 'RSA-MD5', 'RSA-SHA1');

        //
        // INITIALIZE SUPPORT DATA STRUCTURES FOR SQL TEMPORAL INTERVALS.
        // https://dev.mysql.com/doc/refman/8.0/en/expressions.html
        //
        // Wednesday, October 4, 2023 @ 1256 hrs.
        self::$sql_interval_ARRAY['UNITS']['VALUES'] = self::$oCRNRSTN_DATABASE->config_load_static_application_data('sql_interval_values');
        self::$sql_interval_ARRAY['UNITS']['STRING_PATTERN'] =  self::$oCRNRSTN_DATABASE->config_load_static_application_data('sql_interval_string_patterns');

        //
        // INITIALIZE TIMEZONES. LAST UPDATED Wednesday, November 1, 2023 @ 2331 hrs
        // SOURCE :: https://www.php.net/manual/en/timezones.php
        // AUTHOR :: info at scheduleplus dot xyz
        // COMMENT :: https://www.php.net/manual/en/timezones.php#128799
        self::$timezone_syntax_ARRAY = $this->oCRNRSTN_ENV->config_load_static_application_data('timezone_syntax_ARRAY');

        //
        // INITIALIZE GLOBAL SYSTEM PARAMETERS FOR
        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT
        // (MC-DDO) PLAID INTEGRATIONS ON THE $_GET[] CHANNEL.
        //
        // Saturday, November 4, 2023 @ 0752 hrs.
        self::$get_channel_system_parameters_ARRAY = $this->oCRNRSTN_ENV->config_load_static_application_data('get_channel_system_parameters_ARRAY');

        //
        // INITIALIZE DATA STRUCTURES FOR THE SUPPORT AND
        // MANAGEMENT OF APPLICATION ACCELERATION FOR UGC
        // INPUT VALIDATION.
        //
        // Saturday, November 18, 2023 @ 2059 hrs.
        self::$server_operations_ARRAY = array(
            'ini_restore'                   => array(
                                                'KEY'                   => 'CRNRSTN_PHP_INI',
                                                'URL'                   => 'https://www.php.net/manual/en/function.ini-restore.php',
                                                'LINK_TEXT'             => 'ini_restore',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 4, PHP 5, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Restores the value of a configuration option. Restores a given configuration option to its original value.',
                                                                            'TEXT' => 'Restores the value of a configuration option. Restores a given configuration option to its original value.'
                                                                            )),
            'ini_set'                       => array(
                                                'KEY'                   => 'CRNRSTN_PHP_INI',
                                                'URL'                   => 'https://www.php.net/manual/en/function.ini-set.php',
                                                'LINK_TEXT'             => 'ini_set',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 4, PHP 5, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Sets the value of a configuration option. Sets the value of the given configuration option. The configuration option will keep this new value during the script\'s execution, and will be restored at the script\'s ending.',
                                                                            'TEXT' => 'Sets the value of a configuration option. Sets the value of the given configuration option. The configuration option will keep this new value during the script\'s execution, and will be restored at the script\'s ending.'
                                                                            )),
            'ini_get'                       => array(
                                                'KEY'                   => 'CRNRSTN_PHP_INI',
                                                'URL'                   => 'https://www.php.net/manual/en/function.ini-get.php',
                                                'LINK_TEXT'             => 'ini_get',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 4, PHP 5, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Gets the value of a configuration option. Returns the value of the configuration option on success.',
                                                                            'TEXT' => 'Gets the value of a configuration option. Returns the value of the configuration option on success.'
                                                                            )),
            'ini_get_all'                   => array(
                                                'KEY'                   => 'CRNRSTN_PHP_INI',
                                                'URL'                   => 'https://www.php.net/manual/en/function.ini-get-all.php',
                                                'LINK_TEXT'             => 'ini_get_all',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 4 >= 4.2.0, PHP 5, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Gets all configuration options. Returns all the registered configuration options.',
                                                                            'TEXT' => 'Gets all configuration options. Returns all the registered configuration options.'
                                                                            )),
            'get_declared_classes'          => array(
                                                'KEY'                   => 'CRNRSTN_DECLARED_CLASSES',
                                                'URL'                   => 'https://www.php.net/manual/en/function.get-declared-classes',
                                                'LINK_TEXT'             => 'get_declared_classes',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 4, PHP 5, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Returns an array with the name of the defined classes.',
                                                                            'TEXT' => 'Returns an array with the name of the defined classes.'
                                                                            )),
            'get_extension_funcs'           => array(
                                                'KEY'                   => 'CRNRSTN_MODULE_EXTENSION_FUNCTIONS',
                                                'URL'                   => 'https://www.php.net/manual/en/function.get-extension-funcs.php',
                                                'LINK_TEXT'             => 'get_extension_funcs',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 4, PHP 5, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Returns an array with the names of the functions of a module. This function returns the names of all the functions defined in the module indicated by extension.',
                                                                            'TEXT' => 'Returns an array with the names of the functions of a module. This function returns the names of all the functions defined in the module indicated by extension.'
                                                                            )),
            'get_defined_functions'         => array(
                                                'KEY'                   => 'CRNRSTN_NATIVE_PHP_DEFINED_FUNCTIONS',
                                                'URL'                   => 'https://www.php.net/manual/en/function.get-defined-functions.php',
                                                'LINK_TEXT'             => 'get_defined_functions',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 4 >= 4.0.4, PHP 5, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Returns an array of all defined functions.',
                                                                            'TEXT' => 'Returns an array of all defined functions.'
                                                                            )),
            'get_defined_constants'         => array(
                                                'KEY'                   => 'CRNRSTN_PHP_DEFINED_CONSTANTS',
                                                'URL'                   => 'https://www.php.net/manual/en/function.get-defined-constants.php',
                                                'LINK_TEXT'             => 'get_defined_constants',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 4 >= 4.1.0, PHP 5, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Returns an associative array with the names of all the constants and their values. Returns the names and values of all the constants currently defined. This includes those created by extensions as well as those created with the ' . $this->return_crnrstn_text_link('define', 'PHP_ELLIPSE', 'https://www.php.net/manual/en/function.define.php') . ' function.',
                                                                            'TEXT' => 'Returns an associative array with the names of all the constants and their values. Returns the names and values of all the constants currently defined. This includes those created by extensions as well as those created with the define() function.'
                                                                            )),
            'get_defined_vars'              => array(
                                                'KEY'                   => 'CRNRSTN_PHP_DEFINED_VARIABLES',
                                                'URL'                   => 'https://www.php.net/manual/en/function.get-defined-vars.php',
                                                'LINK_TEXT'             => 'get_defined_vars',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 4 >= 4.0.4, PHP 5, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Returns an array of all defined variables. This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that get_defined_vars() is called.',
                                                                            'TEXT' => 'Returns an array of all defined variables. This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that get_defined_vars() is called.'
                                                                            )),
            'extension_loaded'              => array(
                                                'KEY'                   => 'CRNRSTN_PHP_LOADED_EXTENSIONS',
                                                'URL'                   => 'https://www.php.net/manual/en/function.extension-loaded.php',
                                                'LINK_TEXT'             => 'extension_loaded',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 4, PHP 5, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Find out whether an extension is loaded.',
                                                                            'TEXT' => 'Find out whether an extension is loaded.'
                                                                            )),
            'get_loaded_extensions'         => array(
                                                'KEY'                   => 'CRNRSTN_PHP_LOADED_EXTENSION_MODULES',
                                                'URL'                   => 'https://www.php.net/manual/en/function.get-loaded-extensions.php',
                                                'LINK_TEXT'             => 'get_loaded_extensions',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 4, PHP 5, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Returns an array with the names of all modules compiled and loaded. This function returns the names of all the modules compiled and loaded in the PHP interpreter.',
                                                                            'TEXT' => 'Returns an array with the names of all modules compiled and loaded. This function returns the names of all the modules compiled and loaded in the PHP interpreter.'
                                                                            )),
            'openssl_get_md_methods'        => array(
                                                'KEY'                   => 'CRNRSTN_OPENSSL_DIGEST_METHODS',
                                                'URL'                   => 'https://www.php.net/manual/en/function.openssl-get-md-methods.php',
                                                'LINK_TEXT'             => 'openssl_get_md_methods',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 5 >= 5.3.0, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Gets a list of available digest methods.',
                                                                            'TEXT' => 'Gets a list of available digest methods.'
                                                                            )),
            'openssl_get_cipher_methods'    => array(
                                                'KEY'                   => 'CRNRSTN_OPENSSL_CIPHERS',
                                                'URL'                   => 'https://www.php.net/manual/en/function.openssl-get-cipher-methods.php',
                                                'LINK_TEXT'             => 'openssl_get_cipher_methods',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 5 >= 5.3.0, PHP 7, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Gets a list of available cipher methods.',
                                                                            'TEXT' => 'Gets a list of available cipher methods.'
                                                                            )),
            'hash_hmac_algos'               => array(
                                                'KEY'                   => 'CRNRSTN_HMAC_HASH_ALGORITHMS',
                                                'URL'                   => 'https://www.php.net/manual/en/function.hash-hmac-algos.php',
                                                'LINK_TEXT'             => 'hash_hmac_algos',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                    'DEFAULT' =>
                                                        array(
                                                            CRNRSTN_INTEGER => '-1',
                                                            'NAME' => ''
                                                        )
                                                ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 7 >= 7.2.0, PHP 8',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Return a list of registered hashing algorithms suitable for hash_hmac.',
                                                                            'TEXT' => 'Return a list of registered hashing algorithms suitable for hash_hmac.'
                                                                        )),
            'hash_algos'                    => array(
                                                'KEY'                   => 'CRNRSTN_HASH_ALGORITHMS',
                                                'URL'                   => 'https://www.php.net/manual/en/function.hash-algos',
                                                'LINK_TEXT'             => 'hash_algos',
                                                'MEDIA_ELEMENT_KEY'     => 'PHP_ELLIPSE',
                                                'DATA_TYPE'             => CRNRSTN_RESOURCE_DOCUMENTATION,
                                                'INITIALIZATION'        => array(
                                                                                'DEFAULT' =>
                                                                                    array(
                                                                                        CRNRSTN_INTEGER => '-1',
                                                                                        'NAME' => ''
                                                                                    )
                                                                            ),
                                                'REMOVED_PHP_VERSION'   => '',
                                                'DEPRECATED_PHP_VERSION'=> '',
                                                'SUPPORTED_PHP_VERSION' => 'PHP 5 >= 5.1.2, PHP 7, PHP 8, PECL hash >= 1.1',
                                                'DESCRIPTION_PHP_NET'   => array(
                                                                            'HTML' => 'Return a list of registered hashing algorithms.',
                                                                            'TEXT' => 'Return a list of registered hashing algorithms.'
                                                                            ))
        );

    }

    private function return_server_system_cache($data_key){

        switch($data_key){
            case 'CRNRSTN_PHP_INI':
                /*
                'ini_restore'                   => 'CRNRSTN_PHP_INI',
                'ini_set'                       => 'CRNRSTN_PHP_INI',
                'ini_get'                       => 'CRNRSTN_PHP_INI',
                'ini_get_all'                   => 'CRNRSTN_PHP_INI'

                */

                return ini_get_all();

            break;
            case 'CRNRSTN_DECLARED_CLASSES':
                /*
                'get_declared_classes'          => 'CRNRSTN_DECLARED_CLASSES',

                */

                return get_declared_classes();

            break;
            case 'CRNRSTN_MODULE_EXTENSION_FUNCTIONS':
                /*
                'get_extension_funcs'           => 'CRNRSTN_MODULE_EXTENSION_FUNCTIONS',

                */

                $tmp_ext_functions_ARRAY = array();
                $tmp_loaded_ext_ARRAY = get_loaded_extensions();
                foreach($tmp_loaded_ext_ARRAY as $ext_index => $ext_name){

                    $tmp_ext_functions_ARRAY[$ext_name] = get_extension_funcs($ext_name);

                }

                return $tmp_ext_functions_ARRAY;

            break;
            case 'CRNRSTN_NATIVE_PHP_DEFINED_FUNCTIONS':
                /*
                'get_defined_functions'         => 'CRNRSTN_NATIVE_PHP_DEFINED_FUNCTIONS',

                */

                return get_defined_functions();

            break;
            case 'CRNRSTN_PHP_DEFINED_CONSTANTS':
                /*
                'get_defined_constants'         => 'CRNRSTN_PHP_DEFINED_CONSTANTS',

                */

                return get_defined_constants(true);

            break;
            case 'CRNRSTN_PHP_DEFINED_VARIABLES':
                /*
                'get_defined_vars'              => 'CRNRSTN_PHP_DEFINED_VARIABLES',

                */

                return get_defined_vars();

            break;
            case 'CRNRSTN_PHP_LOADED_EXTENSIONS':
                /*
                'extension_loaded'              => 'CRNRSTN_PHP_LOADED_EXTENSIONS',

                */

                return get_loaded_extensions();

            break;
            case 'CRNRSTN_PHP_LOADED_EXTENSION_MODULES':
                /*
                'get_loaded_extensions'         => 'CRNRSTN_PHP_LOADED_EXTENSION_MODULES',

                */

                return get_loaded_extensions();

            break;
            case 'CRNRSTN_OPENSSL_DIGEST_METHODS':
                /*
                'openssl_get_md_methods'        => 'CRNRSTN_OPENSSL_DIGEST_METHODS',

                */

                return $this->oCRNRSTN_ENV->openssl_get_md_methods(false, false);

            break;
            case 'CRNRSTN_OPENSSL_CIPHERS':
                /*
                'openssl_get_cipher_methods'    => 'CRNRSTN_OPENSSL_CIPHERS',

                */

                return $this->oCRNRSTN_ENV->openssl_get_cipher_methods(false, false);

            break;
            case 'CRNRSTN_HMAC_HASH_ALGORITHMS':
                /*
                'hash_hmac_algos'               => 'CRNRSTN_HMAC_HASH_ALGORITHMS'

                */

                return hash_hmac_algos();

            break;
            case 'CRNRSTN_HASH_ALGORITHMS':
                /*
                'hash_algos'                    => 'CRNRSTN_HASH_ALGORITHMS',

                */

                return hash_algos();

            break;
            default:

                error_log(__LINE__ . ' ' . __METHOD__ . ' UNKNOWN SWITCH CASE RECEIVED ['. strval($data_key) . '].');
                return -1;

            break;

        }

    }

    public function server_system_attribute_is_valid($cache_type = NULL, $attribute = NULL){

        switch($cache_type){
            case 'ini_restore':
            case 'ini_set':
            case 'ini_get':
            case 'ini_get_all':
            case 'get_declared_classes':
            case 'get_extension_funcs':
            case 'get_defined_functions':
            case 'get_defined_constants':
            case 'get_defined_vars':
            case 'extension_loaded':
            case 'get_loaded_extensions':
            case 'openssl_get_md_methods':
            case 'openssl_get_cipher_methods':
            case 'hash_algos':

                $tmp_attribute_is_valid = false;
                $tmp_attribute = strtolower(trim($attribute));
                $tmp_data_key = self::$server_operations_ARRAY[$cache_type]['KEY'];
                $tmp_data_type_family = 'CRNRSTN::RESOURCE::SERVER_NATIVE_CONFIG_CACHE';

                //
                // RUNTIME ACCELERATED CHECK FOR "IS ACTIVE" DATA.
                if(isset(self::$server_operations_ARRAY[$cache_type])){

                    if(isset(self::$server_operations_ARRAY[$cache_type]['INITIALIZATION']['OPTIONS']['ISACTIVE'])){

                        if(isset(self::$server_operations_ARRAY[$cache_type]['INITIALIZATION']['OPTIONS']['ISACTIVE'][$tmp_attribute])){

                            return true;

                        }

                        return false;

                    }

                }

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
                // OBJECT (MC-DDO) SESSION ACCELERATED CHECK
                // FOR "IS ACTIVE" DATA.
                if($this->isset_resource('data_value', $tmp_data_key, $tmp_data_type_family, CRNRSTN_CHANNEL_SESSION) == true){

                    $tmp_server_attribute_is_active_ARRAY = $this->get_resource($tmp_data_key, 0, $tmp_data_type_family, CRNRSTN_AUTHORIZE_SESSION);

                    if(isset($tmp_server_attribute_is_active_ARRAY[$tmp_attribute])){

                        return true;

                    }

                    return false;

                }

                //
                // DO WE NEED TO [RUNTIME] LOAD THE SERVER CONFIGURATION FROM SCRATCH?
                if(self::$server_operations_ARRAY[$cache_type]['INITIALIZATION']['DEFAULT'][CRNRSTN_INTEGER] == -1){
                    //if(self::$openssl_ARRAY['CIPHER']['DEFAULT'][CRNRSTN_INTEGER] == -1){

                    //
                    // RUNTIME INITIALIZATION.
                    switch($tmp_data_key){
                        case 'CRNRSTN_PHP_INI':
                            //'ini_restore', 'ini_set', 'ini_get', 'ini_get_all'
                        case 'CRNRSTN_DECLARED_CLASSES':
                            //'get_declared_classes'
                        case 'CRNRSTN_MODULE_EXTENSION_FUNCTIONS':
                            //'get_extension_funcs'
                        case 'CRNRSTN_NATIVE_PHP_DEFINED_FUNCTIONS':
                            //'get_defined_functions'
                        case 'CRNRSTN_PHP_DEFINED_CONSTANTS':
                            //'get_defined_constants'
                        case 'CRNRSTN_PHP_DEFINED_VARIABLES':
                            //'get_defined_vars'
                        case 'CRNRSTN_PHP_LOADED_EXTENSIONS':
                            //'extension_loaded'
                        case 'CRNRSTN_PHP_LOADED_EXTENSION_MODULES':
                            //'get_loaded_extensions'
                        case 'CRNRSTN_OPENSSL_DIGEST_METHODS':
                            //'openssl_get_md_methods'
                        case 'CRNRSTN_OPENSSL_CIPHERS':
                            //'openssl_get_cipher_methods'
                        case 'CRNRSTN_HMAC_HASH_ALGORITHMS':
                            //'hash_hmac_algos'
                        case 'CRNRSTN_HASH_ALGORITHMS':
                            //'hash_algos'

                            //
                            // CACHE SERVER DATA IN RUNTIME.
                            self::$server_operations_ARRAY[$cache_type]['INITIALIZATION']['OPTIONS']['SERVER'] = $this->return_server_system_cache($tmp_data_key);

                            //
                            // UPDATE AN INTERNAL DATA STRUCTURE TO
                            // REFERENCE WHAT IS AVAILABLE ON THE SERVER.
                            // # # C # R # N # R # S # T # N # : : # # # #
                            foreach((array) self::$server_operations_ARRAY[$cache_type]['INITIALIZATION']['OPTIONS']['SERVER'] as $server_config_index => $server_config_name){
                                // TODO :: IS IT A GUARANTEE THAT THE SERVER HASH NAME WILL ALWAYS BE LOWERCASE?

                                $tmp_lower_name = strtolower($server_config_name);

                                //
                                // POPULATE A FAST ISSET LOOKUP ARRAY FOR THE
                                // ACTIVE SERVER ATTRIBUTE.
                                self::$server_operations_ARRAY[$cache_type]['INITIALIZATION']['OPTIONS']['ISACTIVE'][$tmp_lower_name] = $server_config_index;

                                //
                                // IF A MATCH FOR THE INPUT ATTRIBUTE IS
                                // FOUND ON THE SERVER, SET IT TO DEFAULT.
                                if($tmp_lower_name == $tmp_attribute){

                                    $tmp_attribute_is_valid = true;

                                    //
                                    // SET THE MATCH TO BE THE "DEFAULT" OR
                                    // "LAST LOOKUP". SOMETIMES THIS VALUE CAN BE USEFUL.
                                    self::$server_operations_ARRAY[$cache_type]['INITIALIZATION']['DEFAULT'][CRNRSTN_INTEGER] = $server_config_index;
                                    self::$server_operations_ARRAY[$cache_type]['INITIALIZATION']['DEFAULT']['NAME'] = $tmp_attribute = $server_config_name;

                                }

                            }

                            $tmp_ddo_output = $this->add_resource($tmp_data_key, self::$server_operations_ARRAY[$cache_type]['INITIALIZATION']['OPTIONS']['ISACTIVE'], $tmp_data_type_family, CRNRSTN_AUTHORIZE_SESSION, 0);

                        break;
                        default:

                            error_log(__LINE__ . ' ' . __METHOD__ . ' UNKNOWN SWITCH CASE RECEIVED [' . strval($cache_type) . '].');

                        break;

                    }

                }

            break;
            default:

                error_log(__LINE__ . ' ' . __METHOD__ . ' UNKNOWN SWITCH CASE RECEIVED [' . strval($cache_type) . '].');

            break;

        }

        return $tmp_attribute_is_valid;

    }

    public function return_valid_constant($data, $system_source_key, $default_override = NULL){

        switch($system_source_key){
            case 'CRNRSTN_debug_mode':
            case 'crnrstn_debug_mode_ARRAY':

                $tmp_has_data = $tmp_message_added = false;

                if(isset($data)){

                    $tmp_has_data = true;

                    //
                    // SYSTEM INPUT CHECK.
                    if(isset(self::$crnrstn_debug_mode_ARRAY[$data])){

                        return (int)self::$crnrstn_debug_mode_ARRAY[$data];

                    }

                    $tmp_err_str = 'CRNRSTN :: does not recognize the DEBUG MODE that has been provided: (' .
                    $this->gettype($data) . ') ' . strval($data) . '. ';

                    $this->err_message_queue_push(NULL, $tmp_err_str);

                }

                //
                // SYSTEM INPUT OVERRIDE CHECK.
                if(isset($default_override)){

                    if($tmp_has_data !== false){

                        $tmp_message_added = true;

                        $tmp_err_str = 'Checking on an internal override for an unknown system DEBUG MODE. ';
                        $this->err_message_queue_push(NULL, $tmp_err_str);

                    }

                    if(isset(self::$crnrstn_debug_mode_ARRAY[$default_override])){

                        return (int) self::$crnrstn_debug_mode_ARRAY[$default_override];

                    }

                }

                //
                // SYSTEM SETTINGS OVERRIDE CHECK.
                $tmp_crnrstn_debug_mode = $this->get_resource('crnrstn_debug_mode', 0, 'CRNRSTN::RESOURCE::DEBUG_MODE');

                if(is_numeric($tmp_crnrstn_debug_mode)){

                    if(($tmp_has_data !== false) && !($tmp_message_added !== false)){

                        $tmp_err_str = 'Checking on a system settings override for an unknown system DEBUG MODE. ';
                        $this->err_message_queue_push(NULL, $tmp_err_str);

                    }

                    if(isset(self::$crnrstn_debug_mode_ARRAY[$tmp_crnrstn_debug_mode])){

                        self::$crnrstn_debug_mode = self::$crnrstn_debug_mode_ARRAY[$tmp_crnrstn_debug_mode];
                        return (int) self::$crnrstn_debug_mode_ARRAY[$tmp_crnrstn_debug_mode];

                    }

                }

                return self::$crnrstn_debug_mode;

            break;
            case 'phpmailer_debug_mode_ARRAY':

                $tmp_has_data = $tmp_message_added = false;

                if(isset($data)){

                    $tmp_has_data = true;

                    //
                    // SYSTEM INPUT CHECK.
                    if(isset(self::$phpmailer_debug_mode_ARRAY[$data])){

                        return (int) self::$phpmailer_debug_mode_ARRAY[$data];

                    }

                    $tmp_err_str = 'CRNRSTN :: does not recognize the PHPMAILER DEBUG MODE that has been provided: (' .
                        $this->gettype($data) . ') ' . strval($data) . '. ';

                    $this->err_message_queue_push(NULL, $tmp_err_str);

                }

                //
                // SYSTEM INPUT OVERRIDE CHECK.
                if(isset($default_override)){

                    if($tmp_has_data !== false){

                        $tmp_message_added = true;

                        $tmp_err_str = 'Checking on an internal override for an unknown PHPMAILER DEBUG MODE. ';
                        $this->err_message_queue_push(NULL, $tmp_err_str);

                    }

                    if(isset(self::$phpmailer_debug_mode_ARRAY[$default_override])){

                        return (int) self::$phpmailer_debug_mode_ARRAY[$default_override];

                    }

                }

                //
                // SYSTEM SETTINGS OVERRIDE CHECK.
                $tmp_crnrstn_debug_mode = $this->get_resource('phpmailer_debug_mode', 0, 'CRNRSTN::RESOURCE::DEBUG_MODE');

                if(is_numeric($tmp_crnrstn_debug_mode)){

                    if(($tmp_has_data !== false) && !($tmp_message_added !== false)){

                        $tmp_err_str = 'Checking on a PHPMAILER settings override for an unknown PHPMAILER DEBUG MODE. ';
                        $this->err_message_queue_push(NULL, $tmp_err_str);

                    }

                    if(isset(self::$phpmailer_debug_mode_ARRAY[$tmp_crnrstn_debug_mode])){

                        self::$phpmailer_debug_mode = self::$phpmailer_debug_mode_ARRAY[$tmp_crnrstn_debug_mode];
                        return (int) self::$phpmailer_debug_mode_ARRAY[$tmp_crnrstn_debug_mode];

                    }

                }

                return self::$phpmailer_debug_mode;

            break;
            case 'system_log_output_profile_constants_ARRAY':

                $tmp_has_data = $tmp_message_added = false;

                if(isset($data)){

                    $tmp_has_data = true;

                    //
                    // SYSTEM INPUT CHECK.
                    if(isset(self::$system_log_output_profile_constants_ARRAY[$data])){

                        return (int) self::$system_log_output_profile_constants_ARRAY[$data];

                    }

                    //
                    // CHECK ALL CRNRSTN :: LOGGING SUPPORTED INTEGER
                    // CONSTANTS AND BITWISE COMBINATIONS.
                    if(self::$oLogger->is_valid_output_profile($data) !== false){

                        return (int) $data;

                    }

                    $tmp_err_str = 'CRNRSTN :: does not recognize the CRNRSTN :: LOGGING output profile constant that has been provided: (' .
                        $this->gettype($data) . ') ' . strval($data) . '. ';

                    $this->err_message_queue_push(NULL, $tmp_err_str);

                }

                //
                // SYSTEM INPUT OVERRIDE CHECK.
                if(isset($default_override)){

                    if($tmp_has_data !== false){

                        $tmp_message_added = true;

                        $tmp_err_str = 'Checking on an internal override for an unknown CRNRSTN :: LOGGING output profile constant. ';
                        $this->err_message_queue_push(NULL, $tmp_err_str);

                    }

                    if(isset(self::$system_log_output_profile_constants_ARRAY[$default_override])){

                        return (int) self::$system_log_output_profile_constants_ARRAY[$default_override];

                    }

                    //
                    // CHECK ALL CRNRSTN :: LOGGING SUPPORTED INTEGER
                    // CONSTANTS AND BITWISE COMBINATIONS.
                    if(self::$oLogger->is_valid_output_profile($default_override) !== false){

                        return (int) $default_override;

                    }

                }

                //
                // SYSTEM SETTINGS OVERRIDE CHECK.
                $tmp_crnrstn_logging_output_profile = $this->get_resource('system_logging_output_profile', 0, 'CRNRSTN::RESOURCE::LOGGING');
                if(is_numeric($tmp_crnrstn_logging_output_profile)){

                    if(($tmp_has_data !== false) && !($tmp_message_added !== false)){

                        $tmp_err_str = 'Checking on a CRNRSTN :: settings override for an unknown CRNRSTN :: LOGGING OUTPUT MODE profile constant. ';
                        $this->err_message_queue_push(NULL, $tmp_err_str);

                    }

                    if(isset(self::$system_log_output_profile_constants_ARRAY[$tmp_crnrstn_logging_output_profile])){

                        self::$system_default_logging_output_profile = self::$system_log_output_profile_constants_ARRAY[$tmp_crnrstn_logging_output_profile];
                        return (int) self::$system_log_output_profile_constants_ARRAY[$tmp_crnrstn_logging_output_profile];

                    }

                    //
                    // CHECK ALL CRNRSTN :: LOGGING SUPPORTED INTEGER
                    // CONSTANTS AND BITWISE COMBINATIONS.
                    if(self::$oLogger->is_valid_output_profile($tmp_crnrstn_logging_output_profile) !== false){

                        self::$system_default_logging_output_profile = $tmp_crnrstn_logging_output_profile;
                        return (int) $tmp_crnrstn_logging_output_profile;

                    }

                }

                return self::$system_default_logging_output_profile;

            break;
            case 'env_err_reporting_profile_ARRAY':

                //
                // THIS SHOULD, AT LEAST, BE A NUMBER.
                if(!is_numeric($data)){

                    return $default_override;

                }

                return (int) $data;

            break;
            case 'env_html_comments_mode_ARRAY':
                // WHERE $system_html_comments_mode = [CRNRSTN_HTML_COMMENTS_SILENT_GOLD, CRNRSTN_HTML_COMMENTS_NONE,
                // CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED, CRNRSTN_HTML_COMMENTS_ENLARGED_PHYLACTERIES,
                // CRNRSTN_HTML_COMMENTS_FULL]

                //
                // THE INPUT SHOULD MATCH AN EXISTING INTEGER VALUE.
                if(isset(self::$html_comments_profile_ARRAY[$data])){

                    return (int) $data;

                }

                //
                // THERE IS A STRING VALUE WE CAN LOOKUP, TOO.
                switch($data){
                    case 'CRNRSTN_HTML_COMMENTS_SILENT_GOLD':
                    case CRNRSTN_HTML_COMMENTS_SILENT_GOLD:

                        return CRNRSTN_HTML_COMMENTS_SILENT_GOLD;

                    break;
                    case 'CRNRSTN_HTML_COMMENTS_NONE':
                    case CRNRSTN_HTML_COMMENTS_NONE:

                        return CRNRSTN_HTML_COMMENTS_NONE;

                    break;
                    case 'CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED':
                    case CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED:

                        return CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED;

                    break;
                    case 'CRNRSTN_HTML_COMMENTS_ENLARGED_PHYLACTERIES':
                    case CRNRSTN_HTML_COMMENTS_ENLARGED_PHYLACTERIES:

                        return CRNRSTN_HTML_COMMENTS_ENLARGED_PHYLACTERIES;

                    break;
                    case 'CRNRSTN_HTML_COMMENTS_FULL':
                    case CRNRSTN_HTML_COMMENTS_FULL:

                        return CRNRSTN_HTML_COMMENTS_FULL;

                    break;

                }

                //
                // THE INPUT SHOULD BE A NUMBER.
                if(!is_numeric($data)){

                    return CRNRSTN_HTML_COMMENTS_FULL;

                }

                return CRNRSTN_HTML_COMMENTS_FULL;

            break;
            //[Sun Dec 17 23:32:29.788837 2023] [:error] [pid 40134] [client 172.16.225.1:51217] 1985 crnrstn UNKNOWN SWITCH CASE[env_err_reporting_profile_ARRAY].
            //[Sun Dec 17 23:32:29.788907 2023] [:error] [pid 40134] [client 172.16.225.1:51217] 1985 crnrstn UNKNOWN SWITCH CASE[env_html_comments_mode_ARRAY].
            default:

                error_log(__LINE__ . ' crnrstn UNKNOWN SWITCH CASE[' . strval($system_source_key) . '].');

            break;

        }

        return '';

    }

    private function _______demo_($data, $data_key, $data_type_family){

        switch('xxxxxxxxxxxx'){
            case 'xxxxxxxxxxxx_openssl_cipher_lib':

                $tmp_cipher = strtolower(trim($data));

                //
                // PERSIST THE RESULTS OF THIS COSTLY DECISION IN SESSION.
                if(!$this->isset_resource('data_value', $data_key, $data_type_family, CRNRSTN_CHANNEL_SESSION) == true){

                    //
                    // DO WE NEED TO [RUNTIME] LOAD THE SERVER OPENSSL CIPHERS?
                    if(self::$openssl_ARRAY['CIPHER']['DEFAULT'][CRNRSTN_INTEGER] == -1){

                        if(!isset($this->oCRNRSTN_ENV)){

                            //
                            // INITIALIZATION OF CRNRSTN :: ENVIRONMENT.
                            $this->oCRNRSTN_ENV = new crnrstn_environment($this);

                            //
                            // INITIALIZATION OF CRNRSTN :: USER.
                            $this->oCRNRSTN_USR = $this->oCRNRSTN_ENV->return_ENV_oCRNRSTN_USR();

                        }

                        //
                        // LOAD AVAILABLE (ON THE SERVER)
                        // OPENSSL CIPHERS.
                        self::$openssl_ARRAY['CIPHER']['OPTIONS']['SERVER'] = $this->oCRNRSTN_ENV->openssl_get_cipher_methods(false, false);

                        //
                        // UPDATE THE INTERNAL REFERENCE DATA STRUCTURE PER THE SERVER'S
                        // AVAILABLE OPENSSL CIPHERS AND THE INPUT DATA.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA VALIDATION [_openssl_cipher_lib]
                        foreach((array) self::$openssl_ARRAY['CIPHER']['OPTIONS']['SERVER'] as $cipher_index => $cipher_name){
                            // TODO :: IS IT A GUARANTEE THAT THE SERVER HASH NAME WILL ALWAYS BE LOWERCASE?

                            //error_log(__LINE__ . ' crnrstn [\'OPTIONS\'][\'SERVER\'] openssl_cipher $cipher_name[' . $cipher_name . '].');

                            $tmp_lower_hash = strtolower($cipher_name);
                            self::$openssl_ARRAY['CIPHER']['OPTIONS']['ISACTIVE'][$tmp_lower_hash] = $cipher_index;

                            if($tmp_lower_hash == $tmp_cipher){

                                self::$openssl_cipher_int = $cipher_index;
                                self::$openssl_ARRAY['CIPHER']['DEFAULT'][CRNRSTN_INTEGER] = $cipher_index;
                                self::$openssl_ARRAY['CIPHER']['DEFAULT']['NAME'] = $tmp_cipher = $cipher_name;

                                //
                                // SET ENVIRONMENT OPENSSL CIPHER PROFILE.
                                $this->oCRNRSTN_ENV->set_openssl_cipher_profile($cipher_name, $data_key, $data_type_family);

                                //
                                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [_openssl_cipher_lib]
                                $tmp_output = $this->add_resource($data_key, $tmp_cipher, $data_type_family, CRNRSTN_AUTHORIZE_SESSION, 0);
                                $this->add_resource($data_key .'_index', $cipher_index, $data_type_family, CRNRSTN_AUTHORIZE_SESSION, 0);

                                $tmp_ddo_write = true;

                            }

                        }

                        if(!$this->isset_resource('data_value', $data_key, $data_type_family, CRNRSTN_CHANNEL_SESSION) == true){

                            $tmp_force_data_err = true;
                            $tmp_graceful_err = false;

                            foreach(self::$system_openssl_cipher_preferred_ARRAY as $openssl_cipher_index => $openssl_cipher_name){

                                if(isset(self::$openssl_ARRAY['CIPHER']['OPTIONS']['ISACTIVE'][strtolower($openssl_cipher_index)])){

                                    //
                                    // USE THIS SYSTEM VERIFIED AND COMPATIBLE ALGORITHM.
                                    $tmp_cipher = $openssl_cipher_name;

                                    $tmp_graceful_err = true;

                                    break 1;

                                }

                            }

                            //
                            // # # C # R # N # R # S # T # N # : : # # # #
                            // CRNRSTN :: UGC DATA VALIDATION ERROR MESSAGE [_openssl_cipher_lib]
                            if($tmp_graceful_err == true){

                                //
                                // SET ENVIRONMENT OPENSSL PROFILE FROM LIST OF PREFERRED.
                                $this->oCRNRSTN_ENV->set_openssl_cipher_profile($tmp_cipher, $data_key, $data_type_family);
                                $tmp_err_str = 'CRNRSTN :: could not recognize the provided OpenSSL cipher, ' . strval($data) . ' , that is to be used when encrypting and decrypting data. The system OpenSSL cipher has been manually set to, "' . $tmp_cipher . '". ' . $this->data_report($data, 'CRNRSTN :: MC-DDO INPUT DATA REPORT');

                            }else{

                                //
                                // SET ENVIRONMENT OPENSSL PROFILE FROM DEFAULT.
                                $this->oCRNRSTN_ENV->set_openssl_cipher_profile(NULL, $data_key, $data_type_family);
                                $tmp_err_str = 'CRNRSTN :: could not recognize the provided OpenSSL cipher, ' . strval($data) . ' , that is to be used when encrypting and decrypting data. No OpenSSL cipher could be selected. ' . $this->data_report($data, 'CRNRSTN :: MC-DDO INPUT DATA REPORT');

                            }

                            //error_log(__LINE__ . ' crnrstn $tmp_cipher[' . $tmp_cipher . ']. $data_key[' . $data_key . ']. self::$openssl_ARRAY[' . print_r(self::$openssl_ARRAY['CIPHER']['OPTIONS']['ISACTIVE'], true) . '].');

                            //
                            // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                            // # # C # R # N # R # S # T # N # : : # # # #
                            // CRNRSTN :: UGC DATA INPUT [_openssl_cipher_lib]
                            //$tmp_output = $this->input_data_value($tmp_cipher, $data_key, $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);
                            $this->input_data_value(self::$openssl_ARRAY['CIPHER']['OPTIONS']['ISACTIVE'][strtolower(trim($tmp_cipher))], $data_key . '_index', $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);

                            $tmp_ddo_write = true;

                        }

                    }else{

                        //
                        // SET SESSION FROM RUNTIME.
                        $tmp_cipher = self::$openssl_ARRAY['CIPHER']['DEFAULT']['NAME'];

                        //
                        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [_openssl_cipher_lib]
                        //$tmp_output = $this->input_data_value($tmp_cipher, $data_key, $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);
                        $this->input_data_value(self::$openssl_ARRAY['CIPHER']['OPTIONS']['ISACTIVE'][strtolower(trim($tmp_cipher))], $data_key . '_index', $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);

                        $tmp_ddo_write = true;

                    }

                }else{

                    //
                    // THIS CRNRSTN :: DDO SESSION POWERED INITIALIZATION
                    // BY-PASSES SERVER SETTING LOOKUP AND PROCESSING.
                    self::$openssl_ARRAY['CIPHER']['DEFAULT'][CRNRSTN_INTEGER] = $this->get_resource($data_key . '_index', 0, $data_type_family, CRNRSTN_AUTHORIZE_SESSION);
                    $tmp_cipher = self::$openssl_ARRAY['CIPHER']['DEFAULT']['NAME'] = $this->get_resource($data_key, 0, $data_type_family, CRNRSTN_AUTHORIZE_SESSION);

                }

                //
                // # # C # R # N # R # S # T # N # : : # # # #
                // CRNRSTN :: UGC DATA VALIDATION ERROR MESSAGE [_openssl_cipher_lib]
                if($tmp_force_data_err == true){

                    $this->error_log($tmp_err_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                }

            break;
            case 'xxxxxxxxxxxx_openssl_digest_lib':

                $tmp_digest = strtolower(trim($data));

                //
                // PERSIST THE RESULTS OF THIS COSTLY DECISION IN SESSION.
                if(!$this->isset_resource('data_value', $data_key, $data_type_family, CRNRSTN_CHANNEL_SESSION) == true){

                    //
                    // DO WE NEED TO [RUNTIME] LOAD THE SERVER OPENSSL CIPHERS?
                    if(self::$openssl_ARRAY['DIGEST_METHOD']['DEFAULT'][CRNRSTN_INTEGER] == -1){

                        if(!isset($this->oCRNRSTN_ENV)){

                            //
                            // INITIALIZATION OF CRNRSTN :: ENVIRONMENT.
                            $this->oCRNRSTN_ENV = new crnrstn_environment($this);

                            //
                            // INITIALIZATION OF CRNRSTN :: USER.
                            $this->oCRNRSTN_USR = $this->oCRNRSTN_ENV->return_ENV_oCRNRSTN_USR();

                        }

                        //
                        // LOAD AVAILABLE (ON THE SERVER)
                        // OPENSSL DIGEST METHODS.
                        self::$openssl_ARRAY['DIGEST_METHOD']['OPTIONS']['SERVER'] = $this->oCRNRSTN_ENV->openssl_get_md_methods();

                        //
                        // UPDATE THE INTERNAL REFERENCE DATA STRUCTURE PER THE SERVER'S
                        // AVAILABLE OPENSSL CIPHERS AND THE INPUT DATA.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA VALIDATION [xxxxxxxxxxxx]
                        foreach((array) self::$openssl_ARRAY['DIGEST_METHOD']['OPTIONS']['SERVER'] as $digest_index => $digest_name){
                            // TODO :: IS IT A GUARANTEE THAT THE SERVER HASH NAME WILL ALWAYS BE LOWERCASE?

                            //error_log(__LINE__ . ' crnrstn [\'OPTIONS\'][\'SERVER\'] openssl_digest $digest_name[' . $digest_name . '].');

                            $tmp_lower_hash = strtolower($digest_name);
                            self::$openssl_ARRAY['DIGEST_METHOD']['OPTIONS']['ISACTIVE'][$tmp_lower_hash] = $digest_index;

                            if($tmp_lower_hash == $tmp_digest){

                                self::$openssl_cipher_int = $digest_index;
                                self::$openssl_ARRAY['DIGEST_METHOD']['DEFAULT'][CRNRSTN_INTEGER] = $digest_index;
                                self::$openssl_ARRAY['DIGEST_METHOD']['DEFAULT']['NAME'] = $tmp_digest = $digest_name;
                                //error_log(__LINE__ . ' crnrstn read openssl_digest $digest_name[' . $digest_name . '].');

                                //
                                // SET ENVIRONMENT OPENSSL PROFILE.
                                $this->oCRNRSTN_ENV->set_openssl_digest_profile($tmp_digest, $data_key, $data_type_family);

                                //
                                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [_openssl_digest_lib]
                                $tmp_output = $this->add_resource($data_key, $tmp_digest, $data_type_family, CRNRSTN_AUTHORIZE_SESSION, 0);
                                $this->add_resource($data_key .'_index', $digest_index, $data_type_family, CRNRSTN_AUTHORIZE_SESSION, 0);

                                $tmp_ddo_write = true;

                            }

                        }

                        if(!$this->isset_resource('data_value', $data_key, $data_type_family, CRNRSTN_CHANNEL_SESSION) == true){

                            $tmp_force_data_err = true;
                            $tmp_graceful_err = false;

                            foreach(self::$system_openssl_digest_preferred_ARRAY as $openssl_digest_index => $openssl_digest_name){

                                if(isset(self::$openssl_ARRAY['DIGEST_METHOD']['OPTIONS']['ISACTIVE'][strtolower($openssl_digest_index)])){

                                    //
                                    // USE THIS SYSTEM VERIFIED AND COMPATIBLE ALGORITHM.
                                    $tmp_digest = $openssl_digest_name;

                                    $tmp_graceful_err = true;

                                    break 1;

                                }

                            }

                            //
                            // # # C # R # N # R # S # T # N # : : # # # #
                            // CRNRSTN :: UGC DATA VALIDATION ERROR MESSAGE [xxxxxxxxxxxx]
                            if($tmp_graceful_err == true){

                                //
                                // SET ENVIRONMENT OPENSSL DIGEST PROFILE FROM LIST OF PREFERRED.
                                $this->oCRNRSTN_ENV->set_openssl_digest_profile($tmp_digest, $data_key, $data_type_family);
                                $tmp_err_str = 'CRNRSTN :: could not recognize the provided OpenSSL digest, ' . strval($data) . ' , that is to be used when encrypting and decrypting data. The system OpenSSL digest has been manually set to, "' . $tmp_digest . '". ' . $this->data_report($data, 'CRNRSTN :: MC-DDO INPUT DATA REPORT');

                            }else{

                                //
                                // SET ENVIRONMENT OPENSSL DIGEST PROFILE FROM DEFAULT.
                                $this->oCRNRSTN_ENV->set_openssl_digest_profile(NULL, $data_key, $data_type_family);
                                $tmp_err_str = 'CRNRSTN :: could not recognize the provided OpenSSL digest, ' . strval($data) . ' , that is to be used when encrypting and decrypting data. No OpenSSL digest could be selected. ' . $this->data_report($data, 'CRNRSTN :: MC-DDO INPUT DATA REPORT');

                            }

                            //error_log(__LINE__ . ' crnrstn $tmp_digest[' . $tmp_digest . ']. $data_key[' . $data_key . ']. self::$openssl_ARRAY[' . print_r(self::$openssl_ARRAY['DIGEST_METHOD']['OPTIONS']['ISACTIVE'], true) . '].');

                            //
                            // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                            // # # C # R # N # R # S # T # N # : : # # # #
                            // CRNRSTN :: UGC DATA INPUT [xxxxxxxxxxxx]
                            //$tmp_output = $this->input_data_value($tmp_digest, $data_key, $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);
                            $this->input_data_value(self::$openssl_ARRAY['DIGEST_METHOD']['OPTIONS']['ISACTIVE'][strtolower(trim($tmp_digest))], $data_key . '_index', $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);

                            $tmp_ddo_write = true;

                        }

                    }else{

                        //
                        // SET SESSION FROM RUNTIME.
                        $tmp_digest = self::$openssl_ARRAY['DIGEST_METHOD']['DEFAULT']['NAME'];

                        //
                        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [xxxxxxxxxxxx]
                        //$tmp_output = $this->input_data_value($tmp_digest, $data_key, $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);
                        $this->input_data_value(self::$openssl_ARRAY['DIGEST_METHOD']['OPTIONS']['ISACTIVE'][strtolower(trim($tmp_digest))], $data_key . '_index', $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);

                        $tmp_ddo_write = true;

                    }

                }else{

                    //
                    // THIS CRNRSTN :: DDO SESSION POWERED INITIALIZATION
                    // BY-PASSES SERVER SETTING LOOKUP AND PROCESSING.
                    self::$openssl_ARRAY['DIGEST_METHOD']['DEFAULT'][CRNRSTN_INTEGER] = $this->get_resource($data_key . '_index', 0, $data_type_family, CRNRSTN_AUTHORIZE_SESSION);
                    $tmp_digest = self::$openssl_ARRAY['DIGEST_METHOD']['DEFAULT']['NAME'] = $this->get_resource($data_key, 0, $data_type_family, CRNRSTN_AUTHORIZE_SESSION);

                }

                //
                // # # C # R # N # R # S # T # N # : : # # # #
                // CRNRSTN :: UGC DATA VALIDATION ERROR MESSAGE [xxxxxxxxxxxx]
                if($tmp_force_data_err == true){

                    $this->error_log($tmp_err_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                }

            break;
            case 'xxxxxxxxxxxx_hmac_lib':

                $tmp_hmac = strtolower(trim($data));

                //
                // PERSIST THE RESULTS OF THIS COSTLY DECISION IN SESSION.
                if(!$this->isset_resource('data_value', $data_key, $data_type_family, CRNRSTN_CHANNEL_SESSION) == true){

                    //
                    // DO WE NEED TO [RUNTIME] LOAD THE SERVER HMAC LIBRARY?
                    if(self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER] == -1){

                        //
                        // LOAD AVAILABLE (ON THE SERVER)
                        // HMAC HASH ALGORITHMS.
                        self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'] = hash_algos();

                        //
                        // UPDATE THE INTERNAL REFERENCE DATA STRUCTURE PER THE SERVER'S
                        // AVAILABLE HMAC ALGORITHMS AND THE INPUT DATA.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA VALIDATION [xxxxxxxxxxxx]
                        foreach((array) self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'] as $hash_index => $hash_name){
                            // TODO :: IS IT A GUARANTEE THAT THE SERVER HASH NAME WILL ALWAYS BE LOWERCASE?

                            $tmp_lower_hash = strtolower($hash_name);
                            self::$hmac_hash_algorithm_ARRAY['OPTIONS']['ISACTIVE'][$tmp_lower_hash] = $hash_index;

                            if($tmp_lower_hash == $tmp_hmac){

                                self::$hmac_hash_algorithm_int = $hash_index;
                                self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER] = $hash_index;
                                self::$hmac_hash_algorithm_ARRAY['DEFAULT']['NAME'] = $tmp_hmac = $hash_name;

                                // PRE-INITIALIZATION DEFAULT:
                                // $tmp_hash_name = self::$hmac_hash_algorithm_ARRAY['DEFAULT']['NAME'];

                                // POST-INITIALIZATION DEFAULT:
                                // $tmp_hash_name = self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'][self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER]];

                                // SYSTEM AVAILABLE:
                                // $tmp_hash_name = self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'][self::$hmac_hash_algorithm_int];

                                //$tmp_openssl_cipher_best_ARRAY = $this->oCRNRSTN_ENV->openssl_get_cipher_methods();
                                //$tmp_openssl_cipher_all_ARRAY = $this->oCRNRSTN_ENV->openssl_get_cipher_methods(false, false);

                                //error_log(__LINE__ . ' crnrstn best [' . print_r($tmp_openssl_cipher_best_ARRAY, true) . '].');
                                //error_log(__LINE__ . ' crnrstn all [' . print_r($tmp_openssl_cipher_all_ARRAY, true) . '].');
                                //error_log(__LINE__ . ' crnrstn hmac [' . print_r(self::$hmac_hash_algorithm_ARRAY, true) . ']. die();');

                                //
                                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [xxxxxxxxxxxx]
                                $tmp_output = $this->add_resource($data_key, $tmp_hmac, $data_type_family, CRNRSTN_AUTHORIZE_SESSION, 0);
                                $this->add_resource($data_key .'_index', $hash_index, $data_type_family, CRNRSTN_AUTHORIZE_SESSION, 0);

                                $tmp_ddo_write = true;

                            }

                        }

                        if(!$this->isset_resource('data_value', $data_key, $data_type_family, CRNRSTN_CHANNEL_SESSION) == true){

                            $tmp_force_data_err = true;
                            $tmp_graceful_err = false;

                            foreach(self::$system_hmac_algorithm_preferred_ARRAY as $hmac_alg_index => $hmac_alg_name){

                                if(isset(self::$hmac_hash_algorithm_ARRAY['OPTIONS']['ISACTIVE'][strtolower($hmac_alg_index)])){

                                    //
                                    // USE THIS SYSTEM VERIFIED AND COMPATIBLE ALGORITHM.
                                    $tmp_hmac = $hmac_alg_name;
                                    $tmp_graceful_err = true;

                                    //
                                    // # # C # R # N # R # S # T # N # : : # # # #
                                    // CRNRSTN :: UGC DATA VALIDATION ERROR MESSAGE [xxxxxxxxxxxx]
                                    if($tmp_graceful_err == true){

                                        $tmp_err_str = 'CRNRSTN :: could not recognize the provided HMAC library algorithm, ' . strval($data) . ' , that is to be used when generating keyed hash values. The system HMAC library algorithm has been manually set to, "' . $tmp_hmac . '". ' . $this->data_report($data, 'CRNRSTN :: MC-DDO INPUT DATA REPORT');

                                    }else{

                                        $tmp_err_str = 'CRNRSTN :: could not recognize the provided HMAC library algorithm, ' . strval($data) . ' , that is to be used when generating keyed hash values. No OpenSSL cipher could be selected. ' . $this->data_report($data, 'CRNRSTN :: MC-DDO INPUT DATA REPORT');

                                    }

                                }

                            }

                            //
                            // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                            // # # C # R # N # R # S # T # N # : : # # # #
                            // CRNRSTN :: UGC DATA INPUT [xxxxxxxxxxxx]
                            //$tmp_output = $this->input_data_value($tmp_hmac, $data_key, $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);
                            $this->input_data_value(self::$hmac_hash_algorithm_ARRAY['OPTIONS']['ISACTIVE'][strtolower(trim($tmp_hmac))], $data_key . '_index', $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);

                            $tmp_ddo_write = true;

                        }

                    }else{

                        //
                        // SET SESSION FROM RUNTIME.
                        $tmp_hmac = self::$hmac_hash_algorithm_ARRAY['DEFAULT']['NAME'];

                        //
                        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [xxxxxxxxxxxx]
                        //$tmp_output = $this->input_data_value($tmp_hmac, $data_key, $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);
                        $this->input_data_value(self::$hmac_hash_algorithm_ARRAY['OPTIONS']['ISACTIVE'][strtolower(trim($tmp_hmac))], $data_key . '_index', $data_type_family, $index, CRNRSTN_AUTHORIZE_SESSION, $ttl, $spool_resource, $env_key);

                        $tmp_ddo_write = true;

                    }

                }else{

                    //
                    // THIS CRNRSTN :: DDO SESSION POWERED INITIALIZATION
                    // BY-PASSES SERVER SETTING LOOKUP AND PROCESSING.
                    self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER] = $this->get_resource($data_key . '_index', 0, $data_type_family, CRNRSTN_AUTHORIZE_SESSION);
                    $tmp_hmac = self::$hmac_hash_algorithm_ARRAY['DEFAULT']['NAME'] = $this->get_resource($data_key, 0, $data_type_family, CRNRSTN_AUTHORIZE_SESSION);

                }

                if($tmp_force_data_err == true){

                    $this->error_log($tmp_err_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                }

                /*
                [Thu Oct 12 01:55:06.735017 2023] [:error] [pid 80241] [client 172.16.225.1:56141] 10387 crnrstn hmac [
                Array(
                    [DEFAULT] => Array(
                            [INTEGER] => 5
                            [NAME] => sha256)
                    [OPTIONS] => Array(
                            [SERVER] => Array(
                                [0] => md2              [1] => md4              [2] => md5
                                [3] => sha1             [4] => sha224           [5] => sha256
                                [6] => sha384           [7] => sha512           [8] => ripemd128
                                [9] => ripemd160        [10] => ripemd256       [11] => ripemd320
                                [12] => whirlpool       [13] => tiger128,3      [14] => tiger160,3
                                [15] => tiger192,3      [16] => tiger128,4      [17] => tiger160,4
                                [18] => tiger192,4      [19] => snefru          [20] => snefru256
                                [21] => gost            [22] => gost-crypto     [23] => adler32
                                [24] => crc32           [25] => crc32b          [26] => fnv132
                                [27] => fnv1a32         [28] => fnv164          [29] => fnv1a64
                                [30] => joaat           [31] => haval128,3      [32] => haval160,3
                                [33] => haval192,3      [34] => haval224,3      [35] => haval256,3
                                [36] => haval128,4      [37] => haval160,4      [38] => haval192,4
                                [39] => haval224,4      [40] => haval256,4      [41] => haval128,5
                                [42] => haval160,5      [43] => haval192,5      [44] => haval224,5
                                [45] => haval256,5
                                )
                    [ISACTIVE] => Array(
                            [sha256] => 5
                            )
                    )
                )].

                */

            break;

        }

    }

    private function config_load_system_channel_properties(){

        $tmp_system_channel_ARRAY = array();

        //
        // HERE, WE WILL INITIALIZE DEFAULT SYSTEM CHANNEL
        // PROPERTIES FOR THE CRNRSTN :: MULTI-CHANNEL
        // DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
        //
        // FOR CHANNEL REPORTING PURPOSES, WE WILL ALSO GO
        // AHEAD AND INITIALIZE CHANNEL STORAGE BYTES
        // TO ZED. TODO :: CONFIRM THIS IN LIGHT OF RECENT CHANGES. // Sunday, December 10, 2023 @ 0309 hrs.
        //
        // Thursday, November 23, 2023 @ 0139 hrs.
        $tmp_channel_ARRAY = str_split(self::$data_channel_init_sequence);

        foreach($tmp_channel_ARRAY as $ch_index => $ch_alpha){

            $tmp_system_channel_ARRAY[$ch_alpha] = $this->get_channel_config($ch_alpha);

        }

        //
        // INITIALIZE CRNRSTN :: SYSTEM CHANNEL META ARRAY.
        self::$oCRNRSTN_CONFIG_MGR->set_crnrstn('system_channel_ARRAY', $tmp_system_channel_ARRAY);

    }

    public function gettype($data = NULL, $output_type = 'PHP_NATIVE'){
        //WHERE, $output_type = 'CRNRSTN_INTEGER', CRNRSTN_INTEGER, 'CRNRSTN_STRING', CRNRSTN_STRING, 'CRNRSTN_ARRAY', CRNRSTN_ARRAY, OR 'PHP_NATIVE'.
        //Sunday, November 12, 2023 @ 0340 hrs.

        //
        // LOAD PARAMETER DATA TYPE.
        $tmp_data_type_profile_ARRAY = self::$datatype_master_ARRAY[gettype($data)];

        //
        // OUTPUT DATA TYPE.
        switch($output_type){
            case 'CRNRSTN_ARRAY':
            case CRNRSTN_ARRAY:

                return $tmp_data_type_profile_ARRAY;

            break;
            case 'CRNRSTN_INT':
            case CRNRSTN_INT:
                //return $tmp_data_type_profile_ARRAY[CRNRSTN_INT];
            case 'CRNRSTN_INTEGER':
            case CRNRSTN_INTEGER:

                return $tmp_data_type_profile_ARRAY[CRNRSTN_INTEGER];

            break;
            case 'CRNRSTN_STRING':
            case CRNRSTN_STRING:

                return $tmp_data_type_profile_ARRAY[CRNRSTN_STRING];

            break;
            default:
                //case 'PHP_NATIVE':

                return $tmp_data_type_profile_ARRAY['PHP_NATIVE'];

            break;

        }

    }

    //
    // n < 25 LINES.
    public function is_valid_php_ini($data_key, $tmp_ini){

        $tmp_is_valid = false;

        error_log(__LINE__ . ' crnrstn VALIDATE PHP INI INPUT [' . strval($data_key) . '/' . strval($tmp_ini) . ']. iso_lang_code[' . $this->iso_language_html() . '].');

        //public function php_ini_option_profile($name, $option_data = NULL, $iso_lang_code = 'en'){
        if(!($tmp_result = self::$oCRNRSTN_CONFIG_MGR->php_ini_option_profile($data_key, $tmp_ini, $this->iso_language_html()))){

            error_log(__LINE__ . ' crnrstn PHP INI MATCH SUCCESS ON [' . strval($data_key) . '/' . strval($tmp_ini) . ']. [' . $this->gettype($tmp_result, CRNRSTN_STRING) . '/' . print_r($tmp_result, true) . '].');

        }else{

            error_log(__LINE__ . ' crnrstn PHP INI MATCH ERROR ON [' . strval($data_key) . '/' . strval($tmp_ini) . ']. [' . $this->gettype($tmp_result, CRNRSTN_STRING) . '/' . print_r($tmp_result, true) . '].');

        }

        //
        // CAN WE RETURN $tmp_result FOR INI_GET() VALIDATION REQUESTS?
        die();
        return $tmp_is_valid;

    }

    //
    // [MULTI-LANG CONFIG SUPPORT FOR DEMONSTRATION ONLY] Sunday, November 12, 2023 hrs.
    //
    // MULTI-LANGUAGE SHOULD BE A DATABASE DRIVEN COMPONENT.
    public function php_ini_option_profile_lang_pack($name, $option_data, $iso_lang_code){

        //
        // **** !!DATABASE ONLY COMPONENT!! **** !!DATABASE ONLY COMPONENT!! **** !!DATABASE ONLY COMPONENT!! ****
        // **** !!DATABASE ONLY COMPONENT!! **** !!DATABASE ONLY COMPONENT!! **** !!DATABASE ONLY COMPONENT!! ****

        //
        // RELATED RESOURCES URLS.
        $tmp_url_ARRAY = array(''
                    );

        switch($iso_lang_code){
            case 'ko':

                $tmp_php_ini_option_ARRAY =
                    array(
                        array($name                         => $name),
                        array('DEFAULT_VALUE'               => '"0"'),                          // PER PHP.NET.
                        array('DEFAULT_VALUE_DATA_TYPE'     => CRNRSTN_BOOLEAN),                // PER PHP.NET.
                        array('CURRENT_VALUE'               => $option_data),
                        array('CURRENT_VALUE_DATA_TYPE'     => -1),
                        array('CHANGE_MODE'                 => 'PHP_INI_ALL'),
                        array('NAME'                        => 'name'),
                        array('OPTION_NOTE'                 => array(
                                                                    array(
                                                                        'ko' =>
                                                                            array(
                                                                                'HTML' => '',
                                                                                'TEXT' => ''
                                                            )))),
                        array('OPTION_WARNING'              => array(
                                                                    array(
                                                                        'en' =>
                                                                            array(
                                                                                'HTML' => '',
                                                                                'TEXT' => ''
                                                            )))),
                        array('OPTION_TIP'                  => array(
                                                                    array(
                                                                        'en' =>
                                                                            array(
                                                                                'HTML' => '',
                                                                                'TEXT' => ''
                                                            )))),
                        array('IS_DEPRECATED'               => '0'),                            // 1 = DEPRECATED.
                        array('IS_REMOVED'                  => '0'),                            // 1 = REMOVED.
                        array('REMOVED_PHP_VERSION'         => ''),
                        array('DEPRECATED_PHP_VERSION'      => ''),
                        array('SUPPORTED_PHP_VERSION'       => ''),
                        array('PHP_VERSION_NOTE'            => array(
                                                                    array(
                                                                        'en' =>
                                                                            array(
                                                                                'HTML' => '',
                                                                                'TEXT' => ''
                                                            )))),
                        array('DESCRIPTION_PHP_NET'         => array(
                                                                'en' =>
                                                                    array(
                                                                    'HTML' => '',
                                                                    'TEXT' => ''
                                                            ))),
                        array('RELATED_RESOURCES'           => $tmp_url_ARRAY)
                    );
            break;
            default:
                //case 'en':

            break;

        }

        //
        // RETURN THE MULTI-LANGUAGE LANGUAGE PACK FOR
        // THE REQUESTED PHP INI PARAMETER.
        return $tmp_php_ini_option_ARRAY;

    }

    public function system_device_channel_constants(){

        return self::$system_device_channel_constants_ARRAY;

    }

//    public function system_isset_theme_style_profile_constant($profile_constant){
//
//        if(isset(self::$system_theme_style_constants_ARRAY[$profile_constant])){
//
//            return true;
//
//        }
//
//        return false;
//
//    }

    public function system_isset_output_profile_constants($profile_constant){

        if(!isset(self::$system_output_profile_constants_ARRAY[$profile_constant])){

            return true;

        }

        return false;

    }

    public function system_output_profile_constants_ARRAY(){

        return self::$system_output_profile_constants_ARRAY;

    }

    public function return_system_output_profile_constant(){

        return self::$system_output_profile_constant;

    }

    public function return_master_channels_ARRAY(){

        return self::$channel_master_ARRAY;

    }

    public function crnrstn_meta_keywords(){

        return 'crnrstn, lightbox js, jquery, php, social media, mobile detect, nusoap, open source, xml, lightsaber, phpmailer, bassdrive, mit licensed, framework';

    }

    public function social_preview_title(){

        return $this->multi_lang_content_return('SOCIAL_PREVIEW_TITLE');

    }

    public function social_preview_description(){

        return $this->multi_lang_content_return('SOCIAL_PREVIEW_DESCRIPTION');

    }

    private function return_content_source_controller(){

        $tmp_oCRNRSTN_UI_ASSEMBLER = new crnrstn_ui_content_assembler($this);

        //
        // INSTANTIATE AND RETURN A CONTENT SOURCE CONTROLLER CLASS OBJECT.
        return new crnrstn_content_source_controller($this, $tmp_oCRNRSTN_UI_ASSEMBLER);

    }

    public function hello_memory_performance(){

        //
        // THIS WILL RETURN A CURRENT STATS ARRAY.
        // THIS WILL TAKE A PICTURE THAT CAN BE DELTA'D AGAINST LATER...USING THE PREVIOUSLY PROVIDED KEY AS DELTA_KEY.
        $tmp_mem_output_ARRAY = $this->memory_performance('my-custom-key-before-stuff');

        // do some stuff

        $tmp_mem_output_ARRAY = $this->memory_performance('my-after-stuff-is-done-key', 'delta', 'my-custom-key-before-stuff');

        return NULL;

    }

    //
    // SOURCE :: https://stackoverflow.com/questions/2192657/how-to-determine-the-memory-footprint-size-of-a-variable
    // AUTHOR :: Tatu Ulmanen :: https://stackoverflow.com/users/198707/tatu-ulmanen
    // COMMENT :: https://stackoverflow.com/a/2192689
    //
    // $output_type = 'delta', RETURNS ARRAY WITH DELTA CURRENT PERFORMANCE vs SERVER START PERFORMANCE.
    // WHEN $output_type = 'delta' AND $delta_key = 'START-TEST-RUN-MEM',...RETURNS ARRAY WITH DELTA CURRENT PERFORMANCE vs 'START-TEST-RUN-MEM'.
    // ...where  'START-TEST-RUN-MEM' IS ANY PREVIOUSLY SUBMITTED LOOKUP_KEY.
    // SEE function hello_memory_performance() ABOVE.
    public function memory_performance($lookup_key = NULL, $output_type = 'usage', $delta_key = NULL){
        // $output_type = 'start'   [Reports on the initial and earliest state of memory. No real-time performance logging is fired.),
        // $output_type = 'usage'   [Returns an ARRAY with ONLY current memory performance meta. Fires real-time performance logging.]
        // $output_type = 'delta'   [Returns (and puts to history) a memory performance deltas ARRAY. Fires real-time performance logging.]
        // $output_type = 'history' [Fires real-time performance logging.]
        //
        // Where the cache ARRAY-structure-to-PHP-NATIVE-function-output for 'history' is as follows:
        //      $tmp_mem_perf['memory_get_script_usage'][] = memory_get_usage();
        //      $tmp_mem_perf['memory_get_real_usage'][] = memory_get_usage(true);
        //      $tmp_mem_perf['sys_getloadavg'][] = sys_getloadavg();
        //
        // Where the cache ARRAY-structure-to-PHP-NATIVE-function-output for 'delta' is as follows:
        //      $tmp_mem_perf['delta_memory_get_script_usage'] = memory_get_usage();
        //      $tmp_mem_perf['delta_memory_get_real_usage'] = memory_get_usage(true);
        //      $tmp_mem_perf['delta_sys_getloadavg'] = sys_getloadavg();
        //
        // SERVER PERFORMANCE INITIALIZATION GLOBALS.
        // @define('CRNRSTN_MEMORY_SCRIPT_USAGE_START', memory_get_usage());
        // @define('CRNRSTN_MEMORY_REAL_USAGE_START', memory_get_usage(true));
        // @define('CRNRSTN_MEMORY_XDEBUG_SCRIPT_USAGE_START', xdebug_memory_usage());  // JUST A TIRE KICKING. MY IDE MENTIONS THIS.
        // @define('CRNRSTN_SERVER_LOAD_INIT', sys_getloadavg());

        //$tmp_serial = $this->generate_new_key();

        if(!isset($lookup_key)){

            $lookup_key = time();

        }

        //
        // PERFORMANCE TRACKING.
        switch($output_type){
            case 'start':
            case 'delta':
                //
            break;
            case 'usage':
            case 'history':
            default:

                //
                // PERFORMANCE ACTIVITY LOG.
                $this->memory_performance_index_ARRAY[] = $lookup_key;

                $this->memory_performance_time_ARRAY['wall_time'][] = $this->wall_time();
                $this->memory_performance_time_ARRAY['time'][] = time();
                $this->memory_performance_time_ARRAY['lookup_key'][] = $lookup_key;

                $this->memory_performance_history_ARRAY[$lookup_key]['memory_get_script_usage'][] = memory_get_usage();
                $this->memory_performance_history_ARRAY[$lookup_key]['memory_get_real_usage'][] = memory_get_usage(true);
                $this->memory_performance_history_ARRAY[$lookup_key]['sys_getloadavg'][] = sys_getloadavg();

            break;

        }

        switch($output_type){
            case 'start':

                $tmp_ARRAY = array();

                $tmp_ARRAY['memory_get_script_usage'] = CRNRSTN_MEMORY_SCRIPT_USAGE_START;
                $tmp_ARRAY['memory_get_real_usage'] = CRNRSTN_MEMORY_REAL_USAGE_START;
                $tmp_ARRAY['sys_getloadavg'] = CRNRSTN_SERVER_LOAD_INIT;

                //
                // RETURN CURRENT MEMORY PERFORMANCE.
                return $tmp_ARRAY;

            break;
            case 'delta':

                if(isset($delta_key)){

                    if(isset($this->memory_performance_history_ARRAY[$delta_key]['memory_get_real_usage'])){

                        if(!isset($this->memory_performance_delta_history_ARRAY[$delta_key]['memory_get_real_usage'])){

                            $tmp_cnt = 0;

                        }else{

                            //
                            // GET INDEX FOR DELTA ARRAY ALIGNMENT.
                            $tmp_cnt = count($this->memory_performance_delta_history_ARRAY[$delta_key]['memory_get_real_usage']);

                        }

                        $this->memory_performance_index_ARRAY[] = $lookup_key;
                        $this->memory_performance_time_ARRAY['wall_time'][] = $this->wall_time();
                        $this->memory_performance_time_ARRAY['time'][] = time();

                        //
                        // MEMORY PERFORMANCE SNAPSHOT INDEXED WITH PROVIDED KEY.
                        $this->memory_performance_history_ARRAY[$delta_key]['memory_get_script_usage'][] = memory_get_usage();
                        $this->memory_performance_history_ARRAY[$delta_key]['memory_get_real_usage'][] = memory_get_usage(true);
                        $this->memory_performance_history_ARRAY[$delta_key]['sys_getloadavg'][] = sys_getloadavg();

                        //
                        // ADD TO HISTORY...CURRENT PERFORMANCE DELTA AGAINST STATE OF HISTORICAL
                        // PERFORMANCE SNAPSHOT THAT IS ALSO INDEXED WITH THE SAME PROVIDED KEY.
                        $this->memory_performance_delta_history_ARRAY[$delta_key]['memory_get_script_usage'][] = memory_get_usage() - $this->memory_performance_history_ARRAY[$delta_key]['memory_get_script_usage'][$tmp_cnt];
                        $this->memory_performance_delta_history_ARRAY[$delta_key]['memory_get_real_usage'][] = memory_get_usage(true) - $this->memory_performance_history_ARRAY[$delta_key]['memory_get_real_usage'][$tmp_cnt];

                        $tmp_load_init_ARRAY = $this->memory_performance_history_ARRAY[$delta_key]['sys_getloadavg'][$tmp_cnt];
                        $tmp_load_ARRAY = sys_getloadavg();

                        $tmp_delta_ARRAY = array();
                        $tmp_delta_ARRAY[] = $tmp_load_ARRAY[0] - $tmp_load_init_ARRAY[0];
                        $tmp_delta_ARRAY[] = $tmp_load_ARRAY[1] - $tmp_load_init_ARRAY[1];
                        $tmp_delta_ARRAY[] = $tmp_load_ARRAY[2] - $tmp_load_init_ARRAY[2];
                        $this->memory_performance_delta_history_ARRAY[$delta_key]['sys_getloadavg'][] = $tmp_delta_ARRAY;

                        $tmp_ARRAY = array();
                        $tmp_ARRAY['delta_memory_get_script_usage'] = $this->memory_performance_delta_history_ARRAY[$delta_key]['memory_get_script_usage'][$tmp_cnt];
                        $tmp_ARRAY['delta_memory_get_real_usage'] = $this->memory_performance_delta_history_ARRAY[$delta_key]['memory_get_real_usage'][$tmp_cnt];

                        $tmp_delta_ARRAY = array();
                        $tmp_load_init_ARRAY = $this->memory_performance_history_ARRAY[$delta_key]['sys_getloadavg'][$tmp_cnt];
                        $tmp_load_ARRAY = sys_getloadavg();

                        $tmp_delta_ARRAY[] = $tmp_load_ARRAY[0] - $tmp_load_init_ARRAY[0];
                        $tmp_delta_ARRAY[] = $tmp_load_ARRAY[1] - $tmp_load_init_ARRAY[1];
                        $tmp_delta_ARRAY[] = $tmp_load_ARRAY[2] - $tmp_load_init_ARRAY[2];

                        $tmp_ARRAY['delta_sys_getloadavg'] = $tmp_delta_ARRAY;

                        //
                        // RETURN DELTA-FROM-PREVIOUS-KEY MEMORY PERFORMANCE.
                        return $tmp_ARRAY;

                    }

                    error_log(__LINE__ . ' crnrstn The provided key [' . $delta_key . '] does not match any previously provided. A generic timestamp will be used to hold current and DELTA memory performance results.');

                }

                $this->memory_performance_index_ARRAY[] = $lookup_key;
                $this->memory_performance_time_ARRAY['wall_time'][] = $this->wall_time();
                $this->memory_performance_time_ARRAY['time'][] = time();

                //
                // MEMORY PERFORMANCE SNAPSHOT INDEXED WITH KEY OR TIMESTAMP.
                $this->memory_performance_history_ARRAY[$lookup_key]['memory_get_script_usage'][] = memory_get_usage();
                $this->memory_performance_history_ARRAY[$lookup_key]['memory_get_real_usage'][] = memory_get_usage(true);
                $this->memory_performance_history_ARRAY[$lookup_key]['sys_getloadavg'][] = sys_getloadavg();

                //
                // ADD TO HISTORY...CURRENT PERFORMANCE DELTA AGAINST STATE OF HISTORICAL
                // PERFORMANCE SNAPSHOT THAT IS ALSO INDEXED WITH THE SAME PROVIDED KEY.
                $this->memory_performance_delta_history_ARRAY[$lookup_key]['memory_get_script_usage'][] = memory_get_usage() - CRNRSTN_MEMORY_SCRIPT_USAGE_START;
                $this->memory_performance_delta_history_ARRAY[$lookup_key]['memory_get_real_usage'][] = memory_get_usage(true) - CRNRSTN_MEMORY_REAL_USAGE_START;

                $tmp_load_init_ARRAY = CRNRSTN_SERVER_LOAD_INIT;
                $tmp_load_ARRAY = sys_getloadavg();

                $tmp_delta_ARRAY = array();
                $tmp_delta_ARRAY[] = $tmp_load_ARRAY[0] - $tmp_load_init_ARRAY[0];
                $tmp_delta_ARRAY[] = $tmp_load_ARRAY[1] - $tmp_load_init_ARRAY[1];
                $tmp_delta_ARRAY[] = $tmp_load_ARRAY[2] - $tmp_load_init_ARRAY[2];
                $this->memory_performance_delta_history_ARRAY[$lookup_key]['sys_getloadavg'][] = $tmp_delta_ARRAY;

                $tmp_ARRAY = array();

                //
                // GET INDEX FOR DELTA ARRAY ALIGNMENT.
                $tmp_cnt = count($this->memory_performance_delta_history_ARRAY[$lookup_key]['memory_get_real_usage']);
                $tmp_cnt--;

                //
                // RETURN PERFORMANCE SNAPSHOT. CURRENT PERFORMANCE (AND THIS DELTA) HAVE BEEN LOGGED TO HISTORY.
                $tmp_ARRAY['delta_memory_get_script_usage'] = $this->memory_performance_delta_history_ARRAY[$lookup_key]['memory_get_script_usage'][$tmp_cnt];
                $tmp_ARRAY['delta_memory_get_real_usage'] = $this->memory_performance_delta_history_ARRAY[$lookup_key]['memory_get_real_usage'][$tmp_cnt];
                $tmp_ARRAY['delta_sys_getloadavg'] = $this->memory_performance_delta_history_ARRAY[$lookup_key]['sys_getloadavg'][$tmp_cnt];

                //
                // RETURN DELTA-FROM-START MEMORY PERFORMANCE.
                return $tmp_ARRAY;

            break;
            case 'history':

                $this->memory_performance_index_ARRAY[] = $lookup_key;
                $this->memory_performance_time_ARRAY['wall_time'][] = $this->wall_time();
                $this->memory_performance_time_ARRAY['time'][] = time();

                //
                // MEMORY PERFORMANCE SNAPSHOT INDEXED WITH KEY OR TIMESTAMP.
                $this->memory_performance_history_ARRAY[$lookup_key]['memory_get_script_usage'][] = memory_get_usage();
                $this->memory_performance_history_ARRAY[$lookup_key]['memory_get_real_usage'][] = memory_get_usage(true);
                $this->memory_performance_history_ARRAY[$lookup_key]['sys_getloadavg'][] = sys_getloadavg();

                //
                // GET INDEX FOR DELTA ARRAY ALIGNMENT.
                $tmp_ARRAY = array();

                //
                // RETURN ALL PERFORMANCE HISTORY DATA.
                $tmp_ARRAY['current'] = $this->memory_performance_history_ARRAY;
                $tmp_ARRAY['delta'] = $this->memory_performance_delta_history_ARRAY;

                //
                // RETURN MEMORY PERFORMANCE HISTORY.
                return $tmp_ARRAY;

            break;
            case 'usage':
            default:

                $tmp_ARRAY = array();

                //
                // MEMORY PERFORMANCE SNAPSHOT INDEXED WITH KEY OR TIMESTAMP.
                $this->memory_performance_history_ARRAY[$lookup_key]['memory_get_script_usage'][] = memory_get_usage();
                $this->memory_performance_history_ARRAY[$lookup_key]['memory_get_real_usage'][] = memory_get_usage(true);
                $this->memory_performance_history_ARRAY[$lookup_key]['sys_getloadavg'][] = sys_getloadavg();

                $tmp_cnt = count($this->memory_performance_history_ARRAY[$lookup_key]['memory_get_script_usage']);
                $tmp_cnt--;

                $tmp_ARRAY['memory_get_script_usage'] = $this->memory_performance_history_ARRAY[$lookup_key]['memory_get_script_usage'][$tmp_cnt];
                $tmp_ARRAY['memory_get_real_usage'] = $this->memory_performance_history_ARRAY[$lookup_key]['memory_get_real_usage'][$tmp_cnt];
                $tmp_ARRAY['sys_getloadavg'] = $this->memory_performance_history_ARRAY[$lookup_key]['sys_getloadavg'][$tmp_cnt];

                //
                // RETURN CURRENT USAGE.
                return $tmp_ARRAY;

            break;

        }

    }

    public function get_disk_free_space($path = CRNRSTN_ROOT){

        return self::$oCRNRSTN_PERFORMANCE_REGULATOR->get_disk_free_space($path);

    }

    public function get_disk_size($path = CRNRSTN_ROOT){

        return self::$oCRNRSTN_PERFORMANCE_REGULATOR->get_disk_size($path);

    }

    public function get_disk_performance_metric($profile_name){

        return self::$oCRNRSTN_PERFORMANCE_REGULATOR->get_disk_performance_metric($profile_name);

    }

    public function grant_permissions_fwrite($filepath, $minimum_bytes_required = 0){

        return self::$oCRNRSTN_PERFORMANCE_REGULATOR->grant_permissions_fwrite($filepath, $minimum_bytes_required);

    }

    public function return_http_form_action_url($root_path = NULL){

        if(isset($root_path)){

            //$root_path = $this->strrtrim($root_path, '/');
            $pos_qmark = strpos($root_path, '?');

            if($pos_qmark !== false){

                return $root_path . '&' . $this->session_salt() . '=';

            }

            return $root_path . '?' . $this->session_salt() . '=';

        }

        return './?' . $this->session_salt() . '=';

    }

    public function isset_auth_profile(){

        return true;

    }

    public function salt($length_override = NULL, $char_selection = NULL, $system_hashed_return = false, $algorithm_override = NULL, $binary_return = false, $runtime_acceleration = false, $session_acceleration_key = NULL){

        //
        // $char_selection = NULL
        //      $codeAlphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZ
        //                      abcdefghijklmnopqrstuvwxyz
        //                      0123456789
        //
        // $char_selection = '01'
        //      $codeAlphabet = 01
        //
        // $char_selection = (int) -3
        //      $codeAlphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZ
        //                      abcdefghijklmnopqrstuvwxyz
        //                      0123456789:+=_- )(*$#@!~.
        //
        // $char_selection = (int) -2
        //      $codeAlphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZ
        //                      abcdefghijklmnopqrstuvwxyz
        //                      0123456789{}[]:+=_- )(*&%$#@!~?.
        //
        // $char_selection = (int) -1
        //      $codeAlphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZ
        //                      abcdefghijklmnopqrstuvwxyz
        //                      0123456789{}[]:;\"\'|\\+=_- )(*&^%$#@!~
        //                      `?/>.<,   '
        //
        // NOTE: $char_selection = -1 WILL USE *ALL* CHARACTERS ACROSS
        //       ALL DIMENSIONS IN THE KNOWN ASCII UNIVERSE FOR SYSTEM
        //       KEY GENERATION. THERE ARE SOME CHARACTER OMISSIONS TO
        //       NOTE, HOWEVER. $char_selection = -1 EVOKES *ALL*
        //       CHARACTERS EXCEPT:
        //          - THE SEQUENCE \e ESCAPE KEY (ESC or 0x1B (27) in
        //            ASCII), AND
        //          - WE'RE NOT SPLITTING HAIRS CHOOSING BETWEEN
        //            SEQUENCE \n LINEFEED (LF or 0x0A (10) in ASCII)
        //            AND THE SEQUENCE \r CARRIAGE RETURN (CR or 0x0D
        //            (13) in ASCII) AS I JUST LET THE PHPSTORM IDE
        //            CHOOSE HOW TO CONVEY THE ENTER KEY TO TEXT, AND
        //          - ALSO SCREW BOTH \f FORM FEED (FF or 0x0C (12) in
        //            ASCII) AND \v VERTICAL TAB (VT or 0x0B (11) in
        //            ASCII) SEQUENCES; WE DO NOT USE THESE CHARACTERS
        //            FOR SYSTEM KEY GENERATION.
        //
        // NOTE: $char_selection = -3 PRODUCES A LITTLE MORE VARIATION IN
        //       OUTPUT KEY (OVER $char_selection = NULL); IT HAS JUST A
        //       FEW MORE CHARACTERS ADDED TO THE SET BEYOND THE PLAIN
        //       ALPHA-NUMERIC ONES. -3 IS THE COOLEST...HOWEVER...BECAUSE
        //       THESE NEW CHARACTERS WERE HAND SELECTED FOR BEING THE
        //       NICEST (imho) TO WORK WITH AS DATA IN THE DATA
        //       HANDLING WORLD.
        //
        //       TLDR; $char_selection = -3 PRODUCES CSV SAFE DATA. THE
        //       OUTPUT HAS NO QUOTES, NO COMMAS, NO SEMI-COLONS...ETC.,
        //       BUT IT HAS THE MOST DISTINCT NUMBER OF CHARACTERS FOR
        //       THE STRONGEST POSSIBLE VARIATION IN SYSTEM KEY
        //       GENERATION OUTPUT BY CRNRSTN ::
        //
        //       Wednesday, December 6, 2023 @ 2127 hrs.
        //
        // https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double
        if(!isset($length_override)){

            if($this->isset_resource('salt_length', 'CRNRSTN::RESOURCE::GENERAL_SETTINGS') == true){

                $tmp_salt_length = $this->get_resource('salt_length', 0, 'CRNRSTN::RESOURCE::GENERAL_SETTINGS');

            }else{

                $tmp_salt_length = (int) self::$salt_string_length;

            }

            if(!is_numeric($tmp_salt_length)){

                $length = (int) self::$salt_string_length;

            }else{

                $length = (int) $tmp_salt_length;

            }

        }else{

            if(!is_numeric($length_override)){

                //
                // IT WOULD CERTAINLY APPEAR THAT THIS
                // IS NOT A VALID NUMBER FOR THE
                // REQUESTED OPERATION.
                //
                // WE SHALL RUN AN INVALID CALCULATION.
                //
                // THIS MAY BE THE ONLY WAY THAT AN
                // APPLICATION WHICH ABSOLUTELY LOVES
                // NUMBERS (AS MUCH AS CRNRSTN :: HAS
                // BEEN LOVING THE NUMBERS LATELY, AND
                // EVEN IN THE MIDST OF "THESE ECONOMIC
                // TIMES" AT THAT)...COULD EVEN BE ABLE
                // TO ACQUIRE AN AUTHENTIC NaN (PLEASE
                // READ AS "BAD DATA", OR EVEN BETTER,
                // ...A PROPER SHIT VALUE) VALUE THAT
                // CAN BE RELIABLY RETURNED WITH
                // CONFIDENCE BY CRNRSTN ::
                //
                // CRNRSTN :: <3's
                //          ...CRNRSTN_INTEGER's 4LIFE!
                //
                // Monday, December 4, 2023 @ 1117 hrs.
                //
                // SEE, https://www.php.net/manual/en/function.is-nan.php
                $tmp_int = $tmp_salt_length = sqrt(-1);

                if($this->isset_resource('salt_length', 'CRNRSTN::RESOURCE::GENERAL_SETTINGS') == true){

                    $tmp_salt_length = $this->get_resource('salt_length', 0, 'CRNRSTN::RESOURCE::GENERAL_SETTINGS');

                }

                if(!is_numeric($tmp_salt_length)){

                    $length = (int) self::$salt_string_length;

                }else{

                    $length = (int) $tmp_salt_length;

                }

                $this->error_log('An invalid length, (' . $this->gettype($length_override) . ') ' .
                    strval($tmp_int) . ', was input for salt generation. A default value from system settings,' .
                    ' (' . $this->gettype($length) . ') ' . strval($length) . ' , has manually been applied.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            }else{

                $length = (int) $length_override;

            }

        }

        //
        // SOURCE :: https://stackoverflow.com/questions/1846202/php-how-to-generate-a-random-unique-alphanumeric-string
        // COMMENT :: https://stackoverflow.com/a/13733588
        // AUTHOR :: Scott :: https://stackoverflow.com/users/1698153/scott
        return $this->generate_new_key($length, $char_selection, $system_hashed_return, $algorithm_override, $binary_return, $runtime_acceleration, $session_acceleration_key);

    }

    public function session_salt($type = 'NO_MATCH'){

        $type = strtoupper($type);

        switch($type){
            case 'GET':

//                if($oCRNRSTN->isset_http_param('run', $_GET)){
//                $tmp_run_command = $oCRNRSTN->extract_data_http('run', $_GET);

                error_log(__LINE__ . ' crnrstn ' . __METHOD__ . ' TIME TO DO IT. die();');
                die();

            break;
            default:

                // $type = 'NO_MATCH'
                return self::$crnrstn_session_salt;

            break;

        }

    }

    public function return_cache_bytes_size($data){

        //
        // Wednesday, November 15, 2023 @ 0455 hrs.
        $tmp_data_type = $this->gettype($data, CRNRSTN_INTEGER);

        /*
        //$tmp_data_type_ARRAY = $this->gettype($data);
        $tmp_data_type = $this->gettype($data, CRNRSTN_INTEGER);

        error_log(__LINE__ . ' crnrstn [' . print_r($tmp_data_type_ARRAY, true) . ']. die();');

        [Fri Nov 17 03:52:23.920646 2023] [:error] [pid 38330] [client 172.16.225.1:57215] PHP Notice:  Use of undefined constant tmp_data_type_ARRAY - assumed 'tmp_data_type_ARRAY' in /var/www/html/lightsaber.crnrstn.evifweb.com/_crnrstn/class/crnrstn/crnrstn.inc.php on line 11535
        [Fri Nov 17 03:55:17.638563 2023] [:error] [pid 38329] [client 172.16.225.1:58134] 11535 crnrstn [string]. die();
        [Fri Nov 17 04:08:18.170214 2023] [:error] [pid 42248] [client 172.16.225.1:62299] 11546 crnrstn [7]. die();

        //
        // Friday November 17, 2023 @ 0357 hrs.

        */

        switch($tmp_data_type){
            case CRNRSTN_INT:
            case CRNRSTN_INTEGER:
            case CRNRSTN_DOUBLE:
            case CRNRSTN_FLOAT:
            case CRNRSTN_STRING:
            case CRNRSTN_NULL:

                //
                // SOURCE :: https://stackoverflow.com/questions/7568949/measure-string-size-in-bytes-in-php
                // AUTHOR :: Ulver :: https://stackoverflow.com/users/1773335/ulver
                // COMMENT :: https://stackoverflow.com/a/25299281
                //
                // Further to PhoneixS answer to get the correct length of string in bytes - Since mb_strlen()
                // is slower than strlen(), for the best performance one can check "mbstring.func_overload" ini
                // setting so that mb_strlen() is used only when it is really required:
                //
                // Thankfully, this check is no longer needed as of PHP 8.0.0. The function overloading
                // "feature" has been removed as of PHP 8.0.0, and deprecated in 7.2.0.
                // - Buttle Butkus, 2022, https://stackoverflow.com/a/7568984
                //
                // CRNRSTN :: PHP SUPPORT.
                // PHP 5 >= 5.5, PHP 6, PHP 7, PHP 8.
                $content_length = self::$mbstring_func_overload ? mb_strlen((string)$data, '8bit') : strlen((string)$data);

            break;
            case CRNRSTN_BOOL:
            case CRNRSTN_BOOLEAN:

                $content_length = 1;

            break;
            case CRNRSTN_ARRAY:

                //
                // SOURCE :: https://stackoverflow.com/questions/15740507/calculate-cookie-size-in-php
                // AUTHOR :: Dino Babu :: https://stackoverflow.com/users/1182195/dino-babu
                // COMMENT :: https://stackoverflow.com/a/15740581
                // HOW DOES ONE GET BYTE SIZE CALCULATIONS ON ARRAY DATA STRUCTURES? EASY...SERIALIZATION!
                $serialized_data = serialize($data);

                //
                // SOURCE :: https://stackoverflow.com/questions/7568949/measure-string-size-in-bytes-in-php
                // AUTHOR :: Ulver :: https://stackoverflow.com/users/1773335/ulver
                // COMMENT :: https://stackoverflow.com/a/25299281
                $content_length = self::$mbstring_func_overload ? mb_strlen($serialized_data, '8bit') : strlen($serialized_data);

            break;
            case CRNRSTN_OBJECT:
            case CRNRSTN_RESOURCE:
            case CRNRSTN_RESOURCE_CLOSED:
            case CRNRSTN_UNKNOWN_TYPE:
            default:

                $content_length = self::$mbstring_func_overload ? mb_strlen(serialize($data), '8bit') : strlen(serialize($data));

            break;

        }

        return $content_length;

    }

    public function rrs_map_get($name, $channel){

        return self::$oCRNRSTN_RRS_MAP->rrs_map_get($name, $channel);

    }

    public function rrs_map_cache_return($channel = NULL, $source = NULL){

        $tmp_channel_ARRAY = array();

        if(isset($channel)){

            if($source == CRNRSTN_ASSET_MAPPING){

                //
                // THIS WILL CHECK FOR $_GET DATA AND RETURN THE SAUCE IF IT IS AVAILABLE.
                // THIS CHECK RUNS EARLY (LOW LEVEL) TO EFFICIENTLY SUPPORT IMAGE ASSET RETURN FROM LINK.
                if($this->isset_param($_GET, $this->session_salt()) == true){

                    //
                    // RETURN ACTIVE CACHE CHANNELS.
                    $tmp_channel_ARRAY = $this->return_cache_channels();

                    error_log(__LINE__ . ' ' . __METHOD__ . ' SETTING tmp_channel_ARRAY[' . print_r($tmp_channel_ARRAY, true) . '] TO EXTRACT $_GET[] DATA.');

                }

            }

        }

        //
        // THIS WILL CHECK FOR $_GET DATA AND RETURN THE SAUCE IF IT IS AVAILABLE.
        // THIS CHECK RUNS EARLY (LOW LEVEL) TO EFFICIENTLY SUPPORT IMAGE ASSET RETURN FROM LINK.
        if($this->isset_param($_GET, $this->session_salt()) == true){

            //
            // CHANNEL NOT PROVIDED. CHECK ALL ACTIVE CHANNELS. ORDER IS DETERMINED BY GLOBAL
            // CONTROL ARRAY...NOT INITIALIZATION SEQUENCE.
            // RETURN ACTIVE CACHE CHANNELS.

            //$this->return_isactive_channels();
            $tmp_channel_ARRAY = $this->return_cache_channels();
            error_log(__LINE__ . ' ' . __METHOD__ . ' SETTING tmp_channel_ARRAY[' . print_r($tmp_channel_ARRAY, true) . '] TO EXTRACT $_GET[] DATA.');
            error_log(__LINE__ . ' ' . __METHOD__ . ' ATTEMPTING TO EXTRACT $_GET[] DATA [' . strval($_GET[$this->session_salt()]) . '] FROM tmp_channel_ARRAY[' . print_r($tmp_channel_ARRAY, true) . '].');

        }

        foreach($tmp_channel_ARRAY as $index => $channel){

            //
            // FASTEST PATH TO $_GET RESOURCE RETURN FULFILLMENT.
            $tmp_return = self::$oCRNRSTN_RRS_MAP->rrs_map_execute($channel . '_cache_accelerated_return');
            error_log(__LINE__ . ' ' . __METHOD__ . ' ATTEMPTING TO EXTRACT $_GET[] DATA(LEN=' . strlen($tmp_return) . ') [' . strval($_GET[$this->session_salt()]) . '] FROM $channel[' . print_r($channel, true) . '].');

            if(strlen($tmp_return) > 0){

                error_log(__LINE__ . ' ' . __METHOD__ . ' ATTEMPTING TO EXTRACT $_GET[] DATA(LEN=' . strlen($tmp_return) . ') [' . strval($_GET[$this->session_salt()]) . '] FROM $channel[' . print_r($channel, true) . '].');

                return $tmp_return;

            }

        }

        return NULL;

    }

    public function gone_to_plaid($data_key = NULL, $system = CRNRSTN_ASSET_MAPPING, $channel = CRNRSTN_CHANNEL_RUNTIME){

        return self::$oCRNRSTN_RRS_MAP->gone_to_plaid($data_key, $system, $channel);

    }

    public function client_request_listen($listener_profile = 'PSSDTLA'){

        switch($listener_profile){
            case CRNRSTN_ASSET_MAPPING:

                //error_log(__LINE__. ' crnrstn client request listen $listener_profile[' . $listener_profile . ']. if(!$this->gone_to_plaid() == true){....');

                //
                // SKIP INITIALIZATION OF APPLICATION ACCELERATION, IF CRNRSTN :: LIGHTSABER HAS GONE PLAID.
                if(!$this->gone_to_plaid() == true){

                    //
                    // LISTEN FOR AND FAST TRACK (STRAIGHT TO PLAID) RESPONSES TO CRNRSTN :: MAPPED RESOURCE (CSS, JS, JSON, ETC.) REQUESTS
                    // - DEEP LINK CONTENT REQUESTS E.G. FOR add_cookie DOCUMENTATION, https://domain.com/?crnrstn_0010111011=add_cookie
                    // - MAPPED IMAGE REQUESTS E.G. FOR crnrstn_logo_lg, https://domain.com/?crnrstn_0010111011=crnrstn_logo_lg
                    // - MAPPED JS REQUESTS E.G. FOR jquery 3.6.1, https://domain.com/?crnrstn_0010111011=jquery-3.6.1.js
                    // - ETC.

                    /*
                    CRNRSTN :: SYSTEM IMAGE
                    http://172.16.225.139/lightsaber.crnrstn.evifweb.com/?crnrstn_0010111011=j5_wolf_pup_stand_look_up&crnrstn_=420.00.1773071.1669340164.0
                    [PRE_RRS]
                    [RRS_MAP=ACCELERATION_OFF]
                    [*RRS_MAP=ACCELERATION_INITIALIZATION]
                    [RRS_MAP=ACCELERATION_ENABLED] [rtime 0.528844 secs] [rtime 0.190493 secs] [rtime 0.170886 secs] [rtime 0.14696 secs] [rtime 0.177628 secs]
                    [HELLO_WORLD_INIT] [rtime 0.249329 secs]
                    [HELLO_WORLD_ACCEL]

                    CRNRSTN :: SOCIAL IMAGE
                    http://172.16.225.139/lightsaber.crnrstn.evifweb.com/?crnrstn_0010111011=sprite_hq&crnrstn_=420.0420.00.1619426.1680672267.0
                    [PRE_RRS]
                    [RRS_MAP=ACCELERATION_OFF]
                    [*RRS_MAP=ACCELERATION_INITIALIZATION]
                    [RRS_MAP=ACCELERATION_ENABLED] [rtime 0.440329 secs] [rtime 0.149299 secs] [rtime 0.141466 secs] [rtime 0.202003 secs] [rtime 0.140644 secs]
                    [HELLO_WORLD_INIT]
                    [HELLO_WORLD_ACCEL]

                    CRNRSTN :: JS
                     14876 goodbye crnrstn :: crnrstn::__destruct called. [rtime 0.135272 secs]
                    http://172.16.225.139/lightsaber.crnrstn.evifweb.com/?crnrstn_0010111011=crnrstn.main.js&crnrstn_=420.00.382977.1681033733.0
                    [PRE_RRS]
                    [RRS_MAP=ACCELERATION_OFF]
                    [*RRS_MAP=ACCELERATION_INITIALIZATION]
                    [RRS_MAP=ACCELERATION_ENABLED] [rtime 0.212353 secs] [rtime 0.0868070 secs] [rtime 0.110116 secs] [rtime 0.0928869 secs] [rtime 0.104147 secs]
                    [HELLO_WORLD_INIT] [rtime 0.135272 secs] [rtime 0.101169 secs] [rtime 0.0985200 secs] [rtime 0.115393 secs] [rtime 0.114527 secs]
                    [HELLO_WORLD_ACCEL] [rtime 0.0929908 secs] [rtime 0.107485 secs] [rtime 0.0930080 secs] [rtime 0.0901758 secs] [rtime 0.0920801 secs]

                    CRNRSTN :: CSS
                    http://172.16.225.139/lightsaber.crnrstn.evifweb.com/?crnrstn_0010111011=crnrstn.main_desktop.css&crnrstn_=420.00.45823.1674628656.0
                    [PRE_RRS]
                    [RRS_MAP=ACCELERATION_OFF]
                    [*RRS_MAP=ACCELERATION_INITIALIZATION]
                    [RRS_MAP=ACCELERATION_ENABLED] [rtime 0.145414 secs] [rtime 0.110768 secs] [rtime 0.0879769 secs] [rtime 0.0937349 secs] [rtime 0.0879259 secs]
                    [HELLO_WORLD_INIT] [rtime 0.108424 secs] [rtime 0.0942289 secs] [rtime 0.100910 secs] [rtime 0.102806 secs] [rtime 0.0903370 secs]
                    [HELLO_WORLD_ACCEL] [rtime 0.106842 secs] [rtime 0.0794389 secs] [rtime 0.103603 secs] [rtime 0.0857961 secs] [rtime 0.0996739 secs]

                    JQUERY :: JS
                    http://172.16.225.139/lightsaber.crnrstn.evifweb.com/?crnrstn_0010111011=jquery-3.6.1.js&crnrstn_=420.00.289812.1681033733.0
                    [PRE_RRS]
                    [RRS_MAP=ACCELERATION_OFF]
                    [*RRS_MAP=ACCELERATION_INITIALIZATION]
                    [RRS_MAP=ACCELERATION_ENABLED] [rtime 0.179445 secs] [rtime 0.104491 secs] [rtime 0.0966820 secs] [rtime 0.0975079 secs]
                    [HELLO_WORLD_INIT] [rtime 0.317538 secs] [rtime 0.108247 secs] [rtime 0.0952000 secs] [rtime 0.107414 secs] [rtime 0.103543 secs]
                    [HELLO_WORLD_ACCEL] [rtime 0.0972929 secs] [rtime 0.126036 secs] [rtime 0.0957548 secs] [rtime 0.0912649 secs] [rtime 0.0883519 secs]

                    *HTML GENERATION (PAGE RETURN) AND $_GET[] RESOURCE REQUEST EXECUTE ACCELERATION_INITIALIZATION.

                    JQUERY UI :: CSS
                    http://172.16.225.139/lightsaber.crnrstn.evifweb.com/?crnrstn_0010111011=jquery-ui-1.13.2/jquery-ui.theme.css&crnrstn_=420.00.18784.1669340208.0
                    [PRE_RRS]
                    [RRS_MAP=ACCELERATION_OFF]
                    [*RRS_MAP=ACCELERATION_INITIALIZATION]
                    [RRS_MAP=ACCELERATION_ENABLED] [rtime 0.155562 secs] [rtime 0.106574 secs] [rtime 0.108294 secs] [rtime 0.0937669 secs] [rtime 0.0965058 secs]
                    [HELLO_WORLD_INIT] [rtime 0.148291 secs] [rtime 0.171988 secs] [rtime 0.0994801 secs] [rtime 0.0938370 secs] [rtime 0.089589 secs]
                    [HELLO_WORLD_ACCEL] [rtime 0.0775418 secs] [rtime 0.669906 secs] [rtime 0.168452 secs] [rtime 0.171454 secs] [rtime 0.200441 secs]

                    CRNRSTN :: FAVICON
                    http://172.16.225.139/lightsaber.crnrstn.evifweb.com/?crnrstn_0010111011=crnrstn/favicon&crnrstn_=420.00.562.1669340196.0
                    [PRE_RRS]
                    [RRS_MAP=ACCELERATION_OFF]
                    [*RRS_MAP=ACCELERATION_INITIALIZATION]
                    [RRS_MAP=ACCELERATION_ENABLED] [rtime 0.244997 secs] [rtime 0.107869 secs] [rtime 0.0832920 secs] [rtime 0.105088 secs] [rtime 0.0825150 secs]
                    [HELLO_WORLD_INIT] [rtime 0.112519 secs] [rtime 0.514508 secs] [rtime 0.439914 secs] [rtime 0.0965728 secs] [rtime 0.0893270 secs]
                    [HELLO_WORLD_ACCEL] [rtime 0.0830910 secs] [rtime 0.0829930 secs] [rtime 0.0726649 secs] [rtime 0.106497 secs] [rtime 0.0839622 secs]

                    BASSDRIVE :: FAVICON
                    http://172.16.225.139/lightsaber.crnrstn.evifweb.com/?crnrstn_0010111011=bassdrive/favicon&crnrstn_=420.00.562.1669340196.0
                    [PRE_RRS]
                    [RRS_MAP=ACCELERATION_OFF]
                    [*RRS_MAP=ACCELERATION_INITIALIZATION]
                    [RRS_MAP=ACCELERATION_ENABLED] [rtime 0.219687 secs] [rtime 0.0830540 secs] [rtime 0.0858278 secs] [rtime 0.105013 secs] [rtime 0.120263 secs]
                    [HELLO_WORLD_INIT] [rtime 0.111809 secs] [rtime 0.0931031 secs] [rtime 0.0892601 secs] [rtime 0.0883991 secs] [rtime 0.162958 secs]
                    [HELLO_WORLD_ACCEL] [rtime 0.0806078 secs] [rtime 0.0868008 secs] [rtime 0.077336 secs] [rtime 0.0880420 secs] [rtime 0.0802619 secs]

                    JONY5 :: FAVICON
                    http://172.16.225.139/lightsaber.crnrstn.evifweb.com/?crnrstn_0010111011=jony5/favicon&crnrstn_=420.00.562.1669340196.0
                    [PRE_RRS]
                    [RRS_MAP=ACCELERATION_OFF]
                    [*RRS_MAP=ACCELERATION_INITIALIZATION]
                    [RRS_MAP=ACCELERATION_ENABLED] [rtime 0.176273 secs] [rtime 0.0928018 secs] [rtime 0.0892798 secs] [rtime 0.100364 secs][rtime 0.109196 secs]
                    [HELLO_WORLD_INIT] [rtime 0.108404 secs] [rtime 0.0777039 secs] [rtime 0.0863440 secs] [rtime 0.0823450 secs] [rtime 0.0846970 secs]
                    [HELLO_WORLD_ACCEL] [rtime 0.078202 secs] [rtime 0.0717329 secs] [rtime 0.073027 secs] [rtime 0.0851988 secs] [rtime 0.0740549 secs]

                    */

                    //
                    // CRNRSTN :: APPLICATION ACCELERATION.
                    // THE IMMEDIATE RETURN OF SERIALIZED AND MAPPED RESPONSES TO REQUESTS FOR SYSTEM ASSETS.
                    //error_log(__LINE__ . ' crnrstn CONFIG LISTENER IS ATTEMPTING TO GO CRNRSTN :: PLAID.');
                    $CRNRSTN_RRS_MAP_CACHE_RESPONSE = $this->rrs_map_cache_return('session', CRNRSTN_ASSET_MAPPING);
                    if(strlen($CRNRSTN_RRS_MAP_CACHE_RESPONSE) > 0){

                        //
                        // CURRENTLY, THIS STRING OUTPUT WOULD BE JS, CSS, MAP, OR BASE64 RESOURCE STRING DATA RETURNED AS RESULT OF $_GET
                        // DATA...FOR WHICH SAID REQUEST...CRNRSTN :: HAS THE RUNTIME CACHE TO SUPPORT.
                        //
                        // RAW IMAGE OUTPUT (PNG, JPEG, GIF) IS SENT TO THE OUTPUT BUFFER IMMEDIATELY...ENDING THE REQUEST INSIDE THE CALL
                        // TO client_request_listen() ABOVE.
                        //
                        // - BUT IF THE RESPONSE RETURN STILL NEEDS TO BE MAPPED BY CRNRSTN ::...THAT IS IF THE RUNTIME (OR ULTIMATELY
                        //   SESSION CACHE, APPLICATION SESSION, DATABASE, COOKIE, SSDTLA) CACHE OF MULTI-VARIANT POINTERS TO RESPONSE
                        //   RETURNS OF THE CLIENT REQUEST(S) IS MISSING DATA FOR THE CURRENT HTTP/S $_GET REQUESTED RESOURCE...I.E. THIS IS
                        //   THE FIRST REQUEST FOR THIS ASSET...
                        // - BUT IF THE RESPONSE RETURN SERIALIZED MAP CACHE HAS TTL EXPIRED FOR THE REQUESTED $_GET DATA...
                        //
                        // IF SATISFYING EITHER OF THE ABOVE CONDITIONS--, NO STRING OUTPUT CAN BE RETURNED HERE. THE NEXT CALL TO
                        // client_request_listen() WOULD BE THE ONE TO OUTPUT ANY RAW IMAGE OR TO RETURN JS, CSS, MAP, OR BASE64 RESOURCE
                        // STRING DATA. THIS IS BECAUSE CRNRSTN :: WOULD STILL NEED TO (1) COMPLETE ITS CONFIGURATION AND (2) AS THE REQUEST
                        // IS BEING FULFILLED..., CACHE THE RESPONSE RETURN OF THIS REQUEST (I.E. TO EFFECTIVELY CACHE A PROFILE OF...OR A
                        // MULTI-VARIANT POINTER TO...THE NAKED RETURN) TOGETHER WITH THE $_GET REQUEST DATA. CRNRSTN :: MUST RETURN THE
                        // REQUESTED RESOURCE AT LEAST ONE TIME SO THAT IT CAN HAVE SOMETHING TO REMEMBER AND RETURN HERE.
                        //
                        // ANY REPEATED REQUEST FOR CRNRSTN :: MANAGED PNG, JPEG, GIF, JS, CSS, MAP, OR BASE64 WILL BE RETURNED HERE.
                        //
                        // CRNRSTN :: SSDTLA XML DATA, THE XML RESPONSE RETURN DATA SUPPORTING CRNRSTN_JS AT THE BROWSER, IS DE FACTO
                        // RETURNED FROM THE SECOND CALL TO client_request_listen().
                        // # # C # R # N # R # S # T # N # : : # # # #
                        //
                        // Spaceballs - They've gone into plaid
                        // https://www.youtube.com/watch?v=mk7VWcuVOf0
                        return $CRNRSTN_RRS_MAP_CACHE_RESPONSE;

                    }

                    //
                    // CRNRSTN :: APPLICATION ACCELERATION CACHE MGMT AND ASSEMBLY.
                    //error_log(__LINE__ . ' crnrstn NOT CRNRSTN :: PLAID...YET. RUN RRS MAP LISTENER client_request_listen(CRNRSTN_ASSET_MAPPING).');
                    return $this->rrs_map_listener();

                }

            break;
            default:

//                //
//                // CATCH REQUEST FOR MAPPED RESOURCE RETURN.
//                // ASSETS THAT ALREADY RETURNED (STRING DATA) ARE SPOILING THIS. SO NEED TO
//                // ACCOUNT FOR AND EXCLUDE THEM.
//                if($this->rrs_map_is_asset_return()){
//
//                    error_log(__LINE__  . ' crnrstn [\'RRS_MAP\'] RRS MAP APPLICATION ACCELERATION CANDIDATE RECEIVED [' . __METHOD__ . '].');
//                    return $this->oCRNRSTN_ENV->client_request_listen('RRS_MAP');
//
//                }

                //
                // RETURN PSSDTLA LISTEN.
                //error_log(__LINE__  . ' crnrstn RETURN BASIC PSSDTLA LISTEN. $listener_profile[' . $listener_profile . ']. [' . __METHOD__ . '].');
                return $this->oCRNRSTN_ENV->client_request_listen($listener_profile);

            break;

        }

        return '';

    }

    public function integer_constants_unit_test(){

        return self::$oCRNRSTN_BITFLIP_MGR->integer_constants_unit_test();

    }

    public function file_system_image_unit_test($file_path, $icon_height = 50, $caption = NULL){

        //
        // STUFF.
        $tmp_bg_sprite_url = 'http://172.16.225.139/evifweb.com/_crnrstn/ui/imgs/png/system/_lab_sys_image_digital_sheet_bg_1E60E3.png';
        $tmp_bg_sprite_url = 'http://172.16.225.139/evifweb.com/_crnrstn/ui/imgs/png/system/_lab_sys_image_digital_sheet_bg_60A5BF.png';
        $tmp_bg_sprite_url = 'http://172.16.225.139/evifweb.com/_crnrstn/ui/imgs/png/system/_lab_sys_image_digital_sheet_bg_E31E1E.png';
        $tmp_bg_sprite_url = 'http://172.16.225.139/evifweb.com/_crnrstn/ui/imgs/png/system/_lab_sys_image_digital_sheet_bg_FFF.png';
        $tmp_img_sprite_url = 'http://172.16.225.139/evifweb.com/_crnrstn/ui/imgs/png/system/sprite_hq.png';
        $tmp_x = 'http://172.16.225.139/evifweb.com/_crnrstn/ui/imgs/gif/system/x.gif';

        //
        // LET'S ATTEMPT TO JUST-IN-TIME BUILD AS MUCH
        // OF THE FILE SYSTEM UI AS POSSIBLE. EMAIL
        // STILL REQUIRES US HAVE A COMPLETE IMAGE.
        // Sunday, June 11, 2023 @ 0153 hrs.
        $tmp_html_out = '';
        $ICON_HEIGHT = $icon_height;             // UGC
        $tmp_html_out = '<strong>ICON HTML GENERATION ACTIVITY LOG:</strong><br>';

        //
        // FIRST PASS LOGIC, TAKING 50px AS AUTOMATION
        // TARGET. DON'T FORGET A PASS TO APPLY THE
        // MOUSE HOVER "BRIGHTEN-IT-UP" AFFECT.
        $ICON_WIDTH = 48;                   // 44;
        $ICON_WIDTH_DOM_ADJUSTED = $ICON_WIDTH + 2;

        $LABEL_WIDTH = 44;                  // 44;
        $LABEL_BORDER_THICKNESS = 2;        // 2
        $LABEL_BORDER_COLOR = '#000';      // '#000'
        $LABEL_BG_COLOR = '#FFF';          // '#FFF'
        $ICON_ALT_TEXT = 'CRNRSTN :: v' . $this->version_crnrstn() . ' system images sprite';
        $ICON_TITLE_TEXT = 'CRNRSTN :: v' . $this->version_crnrstn() . ' system images sprite';


        //
        //SYSTEM ICON TEMPLATE.
        $tmp_path = '/var/www/html/evifweb.com/_crnrstn/ui/imgs/png/system/sprite_hq.png';

        if(is_file($tmp_path)){

            list($tmp_width, $tmp_height) = getimagesize($tmp_path);

            $tmp_html_out .= 'RECEIVED IMG SPRITE. FILENAME=' . basename($tmp_path);

            $tmp_html_out .= 'Image dimensions: ' . $tmp_width . ' pixels in width X ' . $tmp_height . ' pixels in height.<br>';
            $tmp_html_out .= 'Image filesize: ' . $this->format_bytes(filesize($tmp_path)) . ' . <br>';

            //
            // TARGET ICON INFO.


            /*
            $SPRITE_WIDTH = 7800
            $SPRITE_HEIGHT = 7800

            */

            return $tmp_html_out;

        }


        //$tmp_html_out .= '<div style="background-color:#CCC; background-image: url(\'' . $tmp_img_sprite_url . '\'); background-repeat:no-repeat;">';

        $tmp_html_out = '<div style="clear:both;">
                        <div style="display: inline-block; cursor: pointer; width:' . $ICON_WIDTH . 'px; height:' . $ICON_HEIGHT . 'px;">

                            <div style="position:relative;">
                                <div style="position:absolute; width:' . $ICON_WIDTH_DOM_ADJUSTED . 'px; height:' . $ICON_HEIGHT . 'px; overflow: hidden; ">

                                    <div style="position: relative;">
                                        <div style="position: absolute; left:0; top: 0; z-index: 4;">
                                            <div style="clear: both; height: 22px; width: 100%;"></div>

                                            <div style="border: ' . $LABEL_BORDER_THICKNESS . 'px solid ' . $LABEL_BORDER_COLOR . '; border-radius:.1125em; width: ' . $LABEL_WIDTH . 'px; background-color: ' . $LABEL_BG_COLOR . '; text-align: center; margin: 0 auto;">
                                                <span style="font-family: Arial, Helvetica, sans-serif; font-size: 12px; font-weight: bold;">ZIP</span>
                                            </div>

                                        </div>
                                    </div>

                                    <div style="position: relative;">
                                        <div style="position: absolute; left:5px; top: 0; z-index: 3;">
                                            <img src="' . $tmp_img_sprite_url . '" width="' . $SPRITE_WIDTH . '" height="' . $SPRITE_HEIGHT . '" alt="' . $ICON_ALT_TEXT . '" title="' . $ICON_TITLE_TEXT . '" >
                                        </div>
                                    </div>

                                </div>
                            </div>

                        </div>

                    </div>';

        return $tmp_html_out;

    }

    public function generate_420_timestamp_echo_output($secs = 4, $lnum = '', $methd = ''){

        for ($i = 0; $i < (1000 * 10) * $secs; $i++){

            echo '[' . $this->return_micro_time() . '][' . $this->wall_time() . '][lnum ' . $lnum . '][' . $methd . ']
    ';

        }

    }

    public function err($lnum = NULL){

        //
        // THROW A SIMPLE ERROR TO EXPOSE STACK TRACE IN THE ERROR LOGS.
        if(isset($lnum)){

            error_log($lnum . ' STACK TRACE OUT; ' . __METHOD__ . ' TRIGGERING A PHP WARNING NOW.');

        }else{

            error_log('STACK TRACE OUT; ' . __METHOD__ . 'TRIGGERING A PHP WARNING NOW.');

        }

        $tmp = array();
        if(strlen($tmp)){

            $tmp = 1;

        }

    }

    public function rrs_map_listener($salt_ugc_override = NULL, $serial_profile_ARRAY = NULL, $raw_output_mode = NULL, $output_mode = NULL){

        $tmp_session_salt = $this->session_salt();
        $tmp_ugc = $tmp_asset_data_key = $tmp_source_id = NULL;

        //
        // SUPPORT FOR ASSET MAPPING RAW IMAGE RETURN, RAW JS/CSS RETURN, MAYBE EVEN DEEP LINK PROCESSING,...ETC.
        if(($this->isset_param($_GET, $tmp_session_salt) == true) || $salt_ugc_override !== NULL){

            if(isset($_GET[$tmp_session_salt])){

                $tmp_salt_ugc = $_GET[$tmp_session_salt];

                if($tmp_salt_ugc != ''){

                    //
                    // NOTE: ONLY SET IF $_GET[] HAS SALT UGC.
                    $tmp_ugc = $tmp_salt_ugc;

                }

            }

            if(isset($salt_ugc_override)){

                if(strlen($salt_ugc_override) > 0){

                    $tmp_salt_ugc = $salt_ugc_override;

                }

            }

            error_log(__LINE__ . ' crnrstn FIRE RRS MAP LISTENER. request_id[' . self::$request_id . ']. $tmp_salt_ugc[' . $tmp_salt_ugc . ']. $salt_ugc_override[' . $salt_ugc_override . ']. $serial[' . print_r($serial_profile_ARRAY, true) . ']. $raw_output_mode[' . $raw_output_mode . ']. $output_mode[' . $output_mode . '].');

            //
            // IF WE HAVE UGC, TIME FOR RESOURCE META INITIALIZATION.
            // ONLY LOOKING TO SUPPORT RESOURCE RETURNS...AND MAYBE LINK RETURN.
            if(strlen($tmp_salt_ugc) > 0){

                // FAVICON.
                $tmp_key = $this->asset_routing_data_key_lookup('favicon', $tmp_salt_ugc);
                if(strlen($tmp_key) > 0){

                    //
                    // ONLY METHOD DRIVEN REQUESTS SHALL PASS.
                    if(!isset($tmp_ugc)){

                        //
                        // ESTABLISH RAW_OUTPUT_MODE.
                        if(!is_int($raw_output_mode)){

                            /*
                            $tmp_ARRAY['asset_data_key'] = $asset_data_key;
                            $tmp_ARRAY['filename'] = $tmp_filename;
                            $tmp_ARRAY['width'] = $tmp_width;
                            $tmp_ARRAY['height'] = $tmp_height;
                            $tmp_ARRAY['alt'] = $tmp_alt;
                            $tmp_ARRAY['title'] = $tmp_title;
                            $tmp_ARRAY['hyperlink'] = $tmp_link;
                            $tmp_ARRAY['target'] = $tmp_target;
                            $tmp_ARRAY['raw_output_mode'] = $tmp_raw_output_mode;
                            $tmp_ARRAY['output_mode'] = $output_mode;

                            */

                            //
                            // EXTRACT META FROM ASSET MANAGER. WILL HANDLE IMAGES.
                            // - $tmp_salt_ugc == STRING CONST :: DOCUMENTATION SOCIAL MEDIA PREVIEW IMAGES
                            // - $tmp_salt_ugc == STRING CONST :: SYSTEM IMAGES
                            // - $tmp_salt_ugc == STRING CONST :: SYSTEM SOCIAL IMAGES
                            $serial_profile_ARRAY = $this->asset_data_meta($tmp_salt_ugc, 'favicon');
                            $raw_output_mode = $serial_profile_ARRAY['raw_output_mode'];

                        }

                        if(isset($output_mode)){

                            if($output_mode == ''){

                                $output_mode = $raw_output_mode;

                            }

                        }else{

                            $output_mode = $raw_output_mode;

                        }

                        error_log(__LINE__ . ' crnrstn INITIALIZE favicon METHOD CALL $tmp_salt_ugc[' . $tmp_salt_ugc . ']. $output_mode[' . $output_mode . ']. $raw_output_mode[' . $raw_output_mode . ']. $serial_profile_ARRAY[' . print_r($serial_profile_ARRAY, true) . ']');

                    }

                    // CRNRSTN :: RESPONSE RETURN SERIALIZATION MAP.
                    return $this->initialize_request($tmp_salt_ugc, 'favicon', $tmp_key, NULL, $serial_profile_ARRAY, $raw_output_mode, $output_mode);

                }

                // SYSTEM.
                $tmp_key = $this->asset_routing_data_key_lookup('system', $tmp_salt_ugc);
                if(strlen($tmp_key) > 0){

                    //
                    // ONLY METHOD DRIVEN REQUESTS SHALL PASS.
                    if(!isset($tmp_ugc)){

                        //
                        // ESTABLISH RAW_OUTPUT_MODE.
                        if(!is_int($raw_output_mode)){

                            //
                            // EXTRACT META FROM ASSET MANAGER. WILL HANDLE IMAGES.
                            $serial_profile_ARRAY = $this->asset_data_meta($tmp_salt_ugc, 'system');
                            $raw_output_mode = $serial_profile_ARRAY['raw_output_mode'];

                        }

                        if(isset($output_mode)){

                            if($output_mode == ''){

                                $output_mode = $raw_output_mode;

                            }

                        }else{

                            $output_mode = $raw_output_mode;

                        }

                    }

                    //
                    // CRNRSTN :: RESPONSE RETURN SERIALIZATION MAP.
                    return $this->initialize_request($tmp_salt_ugc, 'system', $tmp_key, NULL, $serial_profile_ARRAY, $raw_output_mode, $output_mode);

                }

                // SOCIAL.
                $tmp_key = $this->asset_routing_data_key_lookup('social', $tmp_salt_ugc);
                if(strlen($tmp_key) > 0){

                    //
                    // ONLY METHOD DRIVEN REQUESTS SHALL PASS.
                    if(!isset($tmp_ugc)){

                        //
                        // ESTABLISH RAW_OUTPUT_MODE.
                        if(!is_int($raw_output_mode)){

                            //
                            // EXTRACT META FROM ASSET MANAGER. WILL HANDLE IMAGES.
                            $serial_profile_ARRAY = $this->asset_data_meta($tmp_salt_ugc, 'social');
                            $raw_output_mode = $serial_profile_ARRAY['raw_output_mode'];

                        }

                        if(isset($output_mode)){

                            if($output_mode == ''){

                                $output_mode = $raw_output_mode;

                            }

                        }else{

                            $output_mode = $raw_output_mode;

                        }

                    }

                    //
                    // CRNRSTN :: RESPONSE RETURN SERIALIZATION MAP.
                    return $this->initialize_request($tmp_salt_ugc, 'social', $tmp_key, NULL, $serial_profile_ARRAY, $raw_output_mode, $output_mode);

                }

                // CSS.
                $tmp_asset_meta_path = $this->asset_routing_data_key_lookup('css', $tmp_salt_ugc);
                if(strlen($tmp_asset_meta_path) > 0){

                    //
                    // ONLY METHOD DRIVEN REQUESTS SHALL PASS.
                    if(!isset($tmp_ugc)){

                        //
                        // ESTABLISH RAW_OUTPUT_MODE.
                        if(!is_int($raw_output_mode)){

                            //
                            // EXTRACT META FROM ASSET MANAGER. WILL HANDLE IMAGES.
                            $serial_profile_ARRAY = $this->asset_data_meta($tmp_salt_ugc, 'css');
                            $raw_output_mode = $serial_profile_ARRAY['raw_output_mode'];

                        }

                        if(isset($output_mode)){

                            if($output_mode == ''){

                                $output_mode = $raw_output_mode;

                            }

                        }else{

                            $output_mode = $raw_output_mode;

                        }

                        //
                        // CRNRSTN :: RESPONSE RETURN SERIALIZATION MAP.
                        return $this->initialize_request($tmp_salt_ugc, 'css', CRNRSTN_CSS, $tmp_asset_meta_path, $serial_profile_ARRAY, $raw_output_mode, $output_mode);

                    }

                }

                // JS.
                $tmp_asset_meta_path = $this->asset_routing_data_key_lookup('js', $tmp_salt_ugc);
                if(strlen($tmp_asset_meta_path) > 0){

                    //
                    // ONLY METHOD DRIVEN REQUESTS SHALL PASS.
                    if(!isset($tmp_ugc)){

                        //
                        // ESTABLISH RAW_OUTPUT_MODE.
                        if(!is_int($raw_output_mode)){

                            //
                            // EXTRACT META FROM ASSET MANAGER. WILL HANDLE IMAGES.
                            $serial_profile_ARRAY = $this->asset_data_meta($tmp_salt_ugc, 'js');
                            $raw_output_mode = $serial_profile_ARRAY['raw_output_mode'];

                        }

                        if(isset($output_mode)){

                            if($output_mode == ''){

                                $output_mode = $raw_output_mode;

                            }

                        }else{

                            $output_mode = $raw_output_mode;

                        }

                    }

                    //
                    // CRNRSTN :: RESPONSE RETURN SERIALIZATION MAP.
                    return $this->initialize_request($tmp_salt_ugc, 'js', CRNRSTN_JS, $tmp_asset_meta_path, $serial_profile_ARRAY, $raw_output_mode, $output_mode);

                }

                // INTEGRATIONS.
                $tmp_key = $this->asset_routing_data_key_lookup('integrations', $tmp_salt_ugc);
                if(strlen($tmp_key) > 0){

                    if(!isset($tmp_ugc)){

                        //
                        // ESTABLISH RAW_OUTPUT_MODE.
                        if(!is_int($raw_output_mode)){

                            //
                            // EXTRACT META FROM ASSET MANAGER. WILL HANDLE IMAGES.
                            $serial_profile_ARRAY = $this->asset_data_meta($tmp_salt_ugc, 'integrations');
                            $raw_output_mode = $serial_profile_ARRAY['raw_output_mode'];

                        }

                        if(isset($output_mode)){

                            if($output_mode == ''){

                                $output_mode = $raw_output_mode;

                            }

                        }else{

                            $output_mode = $raw_output_mode;

                        }

                    }

                    //
                    // CRNRSTN :: RESPONSE RETURN SERIALIZATION MAP.
                    return $this->initialize_request($tmp_salt_ugc, 'integrations', $tmp_key, NULL, $serial_profile_ARRAY, $raw_output_mode, $output_mode);

                }

                // META.
                $tmp_key = $this->asset_routing_data_key_lookup('meta', $tmp_salt_ugc);
                if(strlen($tmp_key) > 0){

                    if(!isset($tmp_ugc)){

                        //
                        // ESTABLISH RAW_OUTPUT_MODE.
                        if(!is_int($raw_output_mode)){

                            //
                            // EXTRACT META FROM ASSET MANAGER. WILL HANDLE IMAGES.
                            $serial_profile_ARRAY = $this->asset_data_meta($tmp_salt_ugc, 'meta');
                            $raw_output_mode = $serial_profile_ARRAY['raw_output_mode'];

                        }

                        if(isset($output_mode)){

                            if($output_mode == ''){

                                $output_mode = $raw_output_mode;

                            }

                        }else{

                            $output_mode = $raw_output_mode;

                        }

                    }

                    //
                    // CHANGED $this->asset_meta_key('integrations', $tmp_salt_ugc)
                    // TO $tmp_key...BELOW.
                    // CRNRSTN :: RESPONSE RETURN SERIALIZATION MAP.
                    return $this->initialize_request($tmp_salt_ugc, 'meta', $tmp_key, NULL, $serial_profile_ARRAY, $raw_output_mode, $output_mode);

                }

                // MODULE (PAGE).
                $tmp_key = $this->asset_routing_data_key_lookup('module_key', $tmp_salt_ugc);
                if(strlen($tmp_key) > 0){

                    if(isset($tmp_ugc)){

                        //
                        // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                        // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                        $this->initialize_bit(CRNRSTN_CHANNEL_GET);
                        error_log(__LINE__ . ' crnrstn INITIALIZE module_key CRNRSTN_CHANNEL_GET $tmp_salt_ugc[' . $tmp_salt_ugc . '].');

                    }else{

                        //
                        // ESTABLISH RAW_OUTPUT_MODE.
                        if(!is_int($raw_output_mode)){

                            //
                            // EXTRACT META FROM ASSET MANAGER. WILL HANDLE IMAGES.
                            $serial_profile_ARRAY = $this->asset_data_meta($tmp_salt_ugc, 'module_key');
                            $raw_output_mode = $serial_profile_ARRAY['raw_output_mode'];

                        }

                        if(isset($output_mode)){

                            if($output_mode == ''){

                                $output_mode = $raw_output_mode;

                            }

                        }else{

                            $output_mode = $raw_output_mode;

                        }

                    }

                    return $this->initialize_request($tmp_salt_ugc, 'module_key', $tmp_salt_ugc, NULL, $serial_profile_ARRAY, $raw_output_mode, $output_mode);

                }

            }

        }

        return false;

    }

    public function client_asset_response(){

        return $this->oCRNRSTN_ASSET_MGR->client_asset_response();

    }

    public function html_version_burn($name, $state = 'BEGIN', $format = 'HTML_COMMENT'){

        $tmp_str = '';

        switch($state){
            case 'END':

                switch($format){
                    case 'TEXT':

                        $tmp_str = 'END CRNRSTN :: v' . $this->version_crnrstn() . ' :: ' . $name . ' OUTPUT';

                    break;
                    case 'HTML_COMMENT':

                        $tmp_str = '<!-- END CRNRSTN :: v' . $this->version_crnrstn() . ' :: ' . $name . ' OUTPUT -->';

                    break;

                }

            break;
            case 'BEGIN':
            default:

                //
                // Tuesday, September 5, 2023 @ 1903 hrs.
                //
                // CRNRSTN :: CDN HTML STABILITY CONTROL
                //
                // WHEN CRNRSTN :: CDN HTML STABILITY CONTROL IS ENABLED,
                // TIMESTAMPS ARE REMOVED FROM THE HTML CODE COMMENTS THAT
                // ACCOMPANY CRNRSTN :: HTML CONTENT INJECTIONS.
                //
                // CRNRSTN :: CDN HTML STABILITY CONTROL SUPPORTS BUILDING
                // CLEANER HTML THAT IS MORE OR LESS...AND SIMPLY
                // PUT...TIMELESS. AND THIS IS NOT THE END YET; WITH
                // STABILITY CONTROL ENABLED, CRNRSTN :: WILL STILL BUILD
                // THE SAME HTML THAT WILL BE HAVING THE SAME CONFIGURED
                // ANALYTICS, ENGAGEMENT, META, AND FRAMEWORK INTEGRATIONS
                // COMPONENTS THAT THE WORLD (WIDE WEB) HAS COME TO KNOW
                // AND LOVE TODAY.
                if($this->is_serialized_bit_set('crnrstn_html_comments_mode', CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED) == true){

                    switch($format){
                        case 'TEXT':

                            $tmp_str = 'BEGIN CRNRSTN :: v' . $this->version_crnrstn() . ' ' . $name . ' OUTPUT';

                        break;
                        case 'HTML_COMMENT':

                            $tmp_str = '<!-- BEGIN CRNRSTN :: v' . $this->version_crnrstn() . ' ' . $name . ' OUTPUT -->';

                        break;

                    }

                    return $tmp_str;

                }

                switch($format){
                    case 'TEXT':

                        $tmp_str = 'BEGIN CRNRSTN :: v' . $this->version_crnrstn() . ' ' . $name . ' OUTPUT :: ' . $this->return_micro_time();

                    break;
                    case 'HTML_COMMENT':

                        $tmp_str = '<!-- BEGIN CRNRSTN :: v' . $this->version_crnrstn() . ' ' . $name . ' OUTPUT :: ' . $this->return_micro_time() . ' -->';

                    break;

                }

            break;

        }

        return $tmp_str;

    }

    public function header_signature_options_return(){

        if(isset($this->oCRNRSTN_ENV)){

            return $this->oCRNRSTN_ENV->header_signature_options_return();

        }

        //
        // ASSET MAPPING FIRES BEFORE INSTANTIATON OF oHTTP_MGR.
        // NEED TO HANDLE HEADER SIGNATURE HERE TOO...FOR ASSET MAPPING.
        $tmp_date = date('D, M j Y G:i:s T');
        $tmp_date_expire = date('D, M j Y G:i:s T', strtotime('+ 7 days'));
        $tmp_date_lastmod = date('D, j M Y G:i:s T');

        $tmp_array = array();
        $tmp_array[] = 'Content-Language: ' . $this->iso_language_profile();
        $tmp_array[] = 'Content-Type: text/html; charset=UTF-8';
        $tmp_array[] = 'Keep-Alive: timeout=7, max=1000';
        $tmp_array[] = 'Date: ' . $tmp_date;
        $tmp_array[] = 'Expires: ' . $tmp_date_expire;
        $tmp_array[] = 'Last-Modified: ' . $tmp_date_lastmod;
        $tmp_array[] = 'X-Powered-By: CRNRSTN :: v' . $this->version_crnrstn();

        return $tmp_array;

    }

    public function header_options_add($header_array, $overwrite_existing = true){

        $this->oCRNRSTN_ENV->header_options_add($header_array, $overwrite_existing);

    }

    public function header_options_apply(){

        $this->oCRNRSTN_ENV->header_options_apply();

    }

    public function get_headers($return_type = 'array'){

        // OR $return_type = CRNRSTN_STRING (CASE INSENSITIVE)
        return $this->oCRNRSTN_ENV->get_headers($return_type);

    }

    public function init_config_cache_index_mem_header($ddo_memory_pointer, $data_key, $data_authorization_profile, $index, $ttl){

        //
        // GOING TO CRNRSTN :: PLAID.
        return self::$oCRNRSTN_RRS_MAP->init_config_cache_index_mem_header($ddo_memory_pointer, $data_key, $data_authorization_profile, $index, $ttl);

    }

    public function initialize_cache($crnrstn_asset_family, $salt_ugc, $data_key, $output_mode = NULL, $filepath = NULL, $file_extension = NULL){

        //
        // GOING TO CRNRSTN :: PLAID.
        self::$oCRNRSTN_RRS_MAP->initialize_cache($crnrstn_asset_family, $salt_ugc, $data_key, $output_mode);

    }

    public function get_cache($attribute, $ugc_key = NULL, $channel = CRNRSTN_CHANNEL_RUNTIME, $data = NULL){

        //
        // GONE TO CRNRSTN :: PLAID.
        return self::$oCRNRSTN_RRS_MAP->get_cache($attribute, $ugc_key, $channel, $data);

    }

    public function get_config_cache($attribute, $data_key = NULL, $data_type_family = 'CRNRSTN::RESOURCE', $index = NULL, $channel = CRNRSTN_CHANNEL_RUNTIME){

        return self::$oCRNRSTN_RRS_MAP->get_config_cache($attribute, $data_key, $data_type_family, $index, $channel);

    }

    public function get_config_cache_count($data_key, $data_type_family = 'CRNRSTN::RESOURCE', $data_authorization_profile){

        // //
        // // MULTI-CHANNEL DATA EXTRACT LOOP LOGIC.
        // // CONVERT AN INTEGER INTO AN ARRAY OF n+1
        // // CHANNEL DESIGNATIONS WHERE THE LIMIT IS
        // // n = 0 to n = COUNT(ACTIVE CHANNELS).
        // // Saturday, November 4, 2023 @ 1846 hrs.
        // switch($data_authorization_profile){
        //     case CRNRSTN_AUTHORIZE_ALL:
        //     case CRNRSTN_AUTHORIZE_GET:
        //     case CRNRSTN_AUTHORIZE_POST:
        //     case CRNRSTN_AUTHORIZE_COOKIE:
        //     case CRNRSTN_AUTHORIZE_SESSION:
        //     case CRNRSTN_AUTHORIZE_DATABASE:
        //     case CRNRSTN_AUTHORIZE_SSDTLA:
        //     case CRNRSTN_AUTHORIZE_PSSDTLA:
        //     case CRNRSTN_AUTHORIZE_RUNTIME:
        //     case CRNRSTN_AUTHORIZE_SOAP:
        //     case CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_GET:
        //     case CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_POST:
        //     case CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_COOKIE:
        //     case CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_SESSION:
        //     case CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_DATABASE:
        //     case CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_SSDTLA:
        //     case CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_PSSDTLA:
        //     case CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_SOAP:

        //     break;

        // }

        $channel = CRNRSTN_CHANNEL_RUNTIME;
        return self::$oCRNRSTN_RRS_MAP->get_config_cache_count($this->hash_ddo_memory_pointer($data_key, $data_type_family), $channel);

    }

    public function is_resource_serialization_active($data_type, $channel = CRNRSTN_CHANNEL_RUNTIME){

        //
        // Sunday, October 8, 2023 @ 0539 hrs.
        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO)
        // DATA INPUT SERIALIZATION LAYER.
        if(isset(self::$ddo_serializable_data_types_ARRAY[$data_type])){

            if(isset(self::$object_serializable_channels_ARRAY[$channel])){

                //
                // ACTIVATE CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO)
                // SERIALIZATION LAYER FOR MULTI-CHANNEL DATA SERIALIZATION ON
                // INPUT AND FOR USE OF UNSERIALIZE() ON DATA RETURN.
                return true;

            }

        }

        return NULL;

    }

    public function isset_resource($attribute, $data_key, $data_type_family = 'CRNRSTN::RESOURCE', $channel = NULL, $index = NULL, $ddo_memory_pointer = NULL){

        //
        // THIS IS USED BY CRNRSTN :: INTERNALLY IF
        // THE DDO MEMORY POINTER IS ALREADY
        // AVAILABLE TO SAVE FROM HAVING TO RUN YET
        // ANOTHER HASH.
        if(isset($ddo_memory_pointer)){

            return self::$oCRNRSTN_RRS_MAP->isset_config_cache($attribute, $ddo_memory_pointer, $channel, $index);

        }

        return self::$oCRNRSTN_RRS_MAP->isset_config_cache($attribute, $this->hash_ddo_memory_pointer($data_key, $data_type_family), $channel, $index);

    }

    public function config_cache_data_write($attribute, $data, $ddo_memory_pointer, $data_type_family = 'CRNRSTN::RESOURCE', $index = NULL, $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME, $channel_override = NULL){

        //
        // PUSH TO CRNRSTN :: PLAID.
        return self::$oCRNRSTN_RRS_MAP->config_cache_data_write($attribute, $data, $ddo_memory_pointer, $data_type_family, $index, $data_authorization_profile, $channel_override);

    }

    public function cache_write($attribute, $data = NULL, $data_type_family = 'integrations', $channel = NULL, $salt_ugc_override = NULL){

        //
        // PUSH TO CRNRSTN :: PLAID.
        return self::$oCRNRSTN_RRS_MAP->cache_write($attribute, $data, $data_type_family, $channel, $salt_ugc_override);

    }

    public function to_plaid($channel, $salt_ugc, $crnrstn_asset_family, $asset_meta_key, $output_mode_override = NULL, $source = '$_GET[]'){

        return self::$oCRNRSTN_RRS_MAP->to_plaid($channel, $salt_ugc, $crnrstn_asset_family, $asset_meta_key, $output_mode_override, $source);

    }

    public function asset_routing_data_key_lookup($crnrstn_asset_family, $salt_ugc){

        switch($crnrstn_asset_family){
            case 'mime_type':

                if(isset($this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc])){

                    //
                    // RETURN THE INTEGER CONSTANT FOR THE SYSTEM PROFILE
                    // ASSIGNED TO THE PROVIDED MIME TYPE.
                    return $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc];

                }

            break;
            case 'file_ext':

                if(isset($this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc])){

                    //
                    // RETURN THE INTEGER CONSTANT FOR THE SYSTEM PROFILE
                    // ASSIGNED TO THE PROVIDED FILE EXTENSION.
                    return $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc];

                }

            break;
            case 'favicon':

                if(($this->is_bit_set(CRNRSTN_FAVICON_ASSET_MAPPING) == true) || (strlen($this->return_crnrstn_asset_family() > 0))){

                    if(isset($this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc])){

                        //
                        // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                        // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                        $this->initialize_bit(CRNRSTN_ASSET_MAPPING);
                        $this->initialize_bit(CRNRSTN_CHANNEL_GET);

                        $tmp_data_key = $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc];

                        //
                        // INITIALIZE CRNRSTN :: PLAID CACHE.
                        $this->initialize_cache($crnrstn_asset_family, $salt_ugc, $tmp_data_key);

                        return $tmp_data_key;

                    }

                }

            break;
            case 'social':

                if(($this->is_bit_set(CRNRSTN_SOCIAL_IMG_ASSET_MAPPING) == true) || (strlen($this->return_crnrstn_asset_family() > 0))){

                    if(isset($this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc])){

                        //
                        // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                        // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                        $this->initialize_bit(CRNRSTN_ASSET_MAPPING);
                        $this->initialize_bit(CRNRSTN_CHANNEL_GET);

                        $tmp_data_key = $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc];

                        //
                        // INITIALIZE CRNRSTN :: PLAID CACHE.
                        $this->initialize_cache($crnrstn_asset_family, $salt_ugc, $tmp_data_key);

                        //
                        // EXTRACT ADDITIONAL META FROM CRNRSTN ::
                        $tmp_asset_meta_ARRAY = $this->asset_data_meta($tmp_data_key, $crnrstn_asset_family);

                        //
                        // INITIALIZE CRNRSTN :: PLAID CACHE.
                        $this->cache_write('raw_output_mode', $tmp_asset_meta_ARRAY['raw_output_mode'], $crnrstn_asset_family);

                        return $tmp_data_key;

                    }

                }

            break;
            case 'meta':

                if(isset($this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc])){

                    //
                    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                    // # # C # R # N # R # S # T # N # : : # # # #
                    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                    $this->initialize_bit(CRNRSTN_ASSET_MAPPING);
                    $this->initialize_bit(CRNRSTN_CHANNEL_GET);

                    //
                    // ATTEMPT TO LOAD PAGE META FROM CONTENT SOURCE CONTROL HERE.
                    $this->oCRNRSTN_CS_CONTROLLER->load_page($salt_ugc, 'META');

                    return $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc];

                }

            break;
            case 'system':

                if(($this->is_bit_set(CRNRSTN_SYSTEM_IMG_ASSET_MAPPING) == true) || (strlen($this->return_crnrstn_asset_family() > 0))){

                    if(isset($this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc])){

                        //
                        // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                        // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                        $this->initialize_bit(CRNRSTN_ASSET_MAPPING);
                        $this->initialize_bit(CRNRSTN_CHANNEL_GET);

                        $tmp_data_key = $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc];

                        //
                        // INITIALIZE CRNRSTN :: PLAID CACHE.
                        $this->initialize_cache($crnrstn_asset_family, $salt_ugc, $tmp_data_key);

                        /*
                        $tmp_asset_meta_ARRAY = $this->asset_data_meta($tmp_data_key);
                        (
                            $tmp_asset_meta_ARRAY['asset_data_key'] = $asset_data_key;
                            $tmp_asset_meta_ARRAY['asset_family'] = $tmp_asset_family;
                            $tmp_asset_meta_ARRAY['filename'] = $tmp_filename;
                            $tmp_asset_meta_ARRAY['width'] = $tmp_width;
                            $tmp_asset_meta_ARRAY['height'] = $tmp_height;
                            $tmp_asset_meta_ARRAY['alt'] = $tmp_alt;
                            $tmp_asset_meta_ARRAY['title'] = $tmp_title;
                            $tmp_asset_meta_ARRAY['hyperlink'] = $tmp_link;
                            $tmp_asset_meta_ARRAY['target'] = $tmp_target;
                            $tmp_asset_meta_ARRAY['raw_output_mode'] = $tmp_raw_output_mode;
                        )

                        */
                        //
                        // EXTRACT ADDITIONAL META FROM CRNRSTN ::
                        $tmp_asset_meta_ARRAY = $this->asset_data_meta($tmp_data_key, $crnrstn_asset_family);

                        //
                        // ADDITIONAL CRNRSTN :: PLAID INITIALIZATION.
                        $this->cache_write('raw_output_mode', $tmp_asset_meta_ARRAY['raw_output_mode'], $crnrstn_asset_family);

                        return $tmp_data_key;

                    }

                }

            break;
            case 'js':

                if(($this->is_bit_set(CRNRSTN_JS_ASSET_MAPPING) == true) || (strlen($this->return_crnrstn_asset_family() > 0))){

                    if(isset($this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc])){

                        //
                        // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                        // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                        $this->initialize_bit(CRNRSTN_ASSET_MAPPING);
                        $this->initialize_bit(CRNRSTN_CHANNEL_GET);

                        $tmp_asset_meta_path = $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc];

                        //
                        // INITIALIZE CRNRSTN :: PLAID CACHE.
                        $this->initialize_cache($crnrstn_asset_family, $salt_ugc, $tmp_asset_meta_path);

                        //
                        // ADDITIONAL CRNRSTN :: PLAID INITIALIZATION.
                        $this->cache_write('output_mode', CRNRSTN_JS, $crnrstn_asset_family);
                        $this->cache_write('raw_output_mode', CRNRSTN_JS, $crnrstn_asset_family);
                        $this->cache_write('meta_path', $tmp_asset_meta_path, $crnrstn_asset_family);

                        // TODO :: REMOVE DEPRECATED SERIAL_OVERRIDE PARAM
                        // FINALIZE CRNRSTN :: PLAID INITIALIZATION.
                        return $this->initialize_request($salt_ugc, $crnrstn_asset_family, CRNRSTN_JS, $tmp_asset_meta_path, NULL, CRNRSTN_JS, CRNRSTN_JS);

                    }

                }

            break;
            case 'css':

                if(($this->is_bit_set(CRNRSTN_CSS_ASSET_MAPPING) == true) || (strlen($this->return_crnrstn_asset_family() > 0))){

                    if(isset($this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc])){

                        //
                        // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                        // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                        $this->initialize_bit(CRNRSTN_ASSET_MAPPING);
                        $this->initialize_bit(CRNRSTN_CHANNEL_GET);

                        $tmp_asset_meta_path = $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc];

                        //
                        // INITIALIZE CRNRSTN :: PLAID CACHE.
                        $this->initialize_cache($crnrstn_asset_family, $salt_ugc, $tmp_asset_meta_path);

                        //
                        // ADDITIONAL CRNRSTN :: PLAID INITIALIZATION.
                        $this->cache_write('output_mode', CRNRSTN_CSS, $crnrstn_asset_family);
                        $this->cache_write('raw_output_mode', CRNRSTN_CSS, $crnrstn_asset_family);
                        $this->cache_write('meta_path', $tmp_asset_meta_path, $crnrstn_asset_family);

                        // TODO :: REMOVE DEPRECATED SERIAL_OVERRIDE PARAM
                        // CRNRSTN :: RESPONSE RETURN SERIALIZATION MAP.
                        return $this->initialize_request($salt_ugc, $crnrstn_asset_family, CRNRSTN_CSS, $tmp_asset_meta_path, NULL, CRNRSTN_CSS, CRNRSTN_CSS);

                    }

                }

            break;
            case 'integrations':

                if(isset($this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc])){

                    //
                    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                    // # # C # R # N # R # S # T # N # : : # # # #
                    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                    $this->initialize_bit(CRNRSTN_ASSET_MAPPING);
                    $this->initialize_bit(CRNRSTN_CHANNEL_GET);

                    $tmp_data_key = $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc];

                    //
                    // INITIALIZE CRNRSTN :: PLAID CACHE.
                    $this->initialize_cache($crnrstn_asset_family, $salt_ugc, $tmp_data_key);

                    //
                    // EXTRACT ADDITIONAL META FROM CRNRSTN ::
                    $tmp_asset_meta_ARRAY = $this->asset_data_meta($tmp_data_key, $crnrstn_asset_family);

                    //
                    // ADDITIONAL CRNRSTN :: PLAID INITIALIZATION.
                    $this->cache_write('raw_output_mode', $tmp_asset_meta_ARRAY['raw_output_mode'], $crnrstn_asset_family);

                    return $tmp_data_key;

                }

            break;
            case 'module_key':

                $tmp_ARRAY = $this->return_documentation_navigation_array();
                //error_log(__LINE__ . ' crnrstn module_key [' . $salt_ugc . ']. [' . print_r($tmp_ARRAY, true) . '].');

                if(isset($tmp_ARRAY[$salt_ugc])){

                    //
                    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                    // # # C # R # N # R # S # T # N # : : # # # #
                    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                    $this->initialize_bit(CRNRSTN_ASSET_MAPPING);

                    //error_log(__LINE__ . ' crnrstn module_key [' . $salt_ugc . ']. [' . $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc] . ']. $crnrstn_asset_family[' . $this->crnrstn_asset_family . '].');
                    //return true;
                    return $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc];

                }

            break;

        }

        //error_log(__LINE__ . ' crnrstn [' . $salt_ugc . '] NOT FOUND IN [' . $crnrstn_asset_family . '].');
        return '';

    }

    public function return_http_data_services_meta($name){

        error_log(__LINE__ . ' crnrstn REFACTOR WITHIN LIGHTSABER return_http_data_services_meta(' . $name . '). DDO USAGE :: crnrstn_interact_data_tunnel_get_param, CRNRSTN::RESOURCE::GET_DATA');

        switch($name){
            case 'get':

                $tmp_crnrstn_interact_data_tunnel_get_str = '';
                $tmp_get_param_cnt = $this->get_resource_count('crnrstn_interact_data_tunnel_get_param', 'CRNRSTN::RESOURCE::GET_DATA');
                error_log(__LINE__ . ' crnrstn REFACTOR WITHIN LIGHTSABER GET[' . $tmp_get_param_cnt . '].');

                for($i = 0; $i < $tmp_get_param_cnt; $i++){

                    //error_log(__LINE__ . ' env GET[' . $i . '].');
                    $tmp_crnrstn_interact_data_tunnel_get_str .= $this->get_resource('crnrstn_interact_data_tunnel_get_param', $i, 'CRNRSTN::RESOURCE::GET_DATA') . '|';

                }

                if(strlen($tmp_crnrstn_interact_data_tunnel_get_str) > 0){

                    $tmp_crnrstn_interact_data_tunnel_get_str = $this->strrtrim($tmp_crnrstn_interact_data_tunnel_get_str, '|');

                }

                //error_log(__LINE__ . ' env Does this look right 2 U? $name[' . $name . ']=[' . $tmp_crnrstn_interact_data_tunnel_get_str . '].');

                return $tmp_crnrstn_interact_data_tunnel_get_str;

            break;
            default:

                return '';

            break;

        }

    }

    public function asset_meta_key($crnrstn_asset_family, $salt_ugc){

        if(isset($this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc])){

            return $this->asset_routing_data_key_lookup_ARRAY[$crnrstn_asset_family][$salt_ugc];

        }

        return false;

    }

    public function return_documentation_navigation_array(){

        return $this->oINTERACT_UI_HTML_MGR->return_output_CRNRSTN_UI_DOCS_NAV_LINK('php', 'array');

    }

    public function form_integrations_data_index($crnrstn_form_handle_hash, $output_type = 'string'){

        $tmp_str_out = '';
        $tmp_ARRAY = array();

        //$this->print_r($this->form_integrations_data_index_ARRAY, $crnrstn_form_handle_hash, NULL, __LINE__, __METHOD__, __FILE__);

        //
        // THIS SHOULD BE FORM SERIALIZED...OK FOR NOW...I GUESS. TRYING TO
        // GET TO DOCUMENTATION. Sunday, September 11, 2022 @ 2233 hrs
        //foreach($this->form_integrations_data_index_ARRAY[$crnrstn_form_handle_hash] as $index => $data_key){
        //error_log(__LINE__ . ' crnrstn [' . print_r($this->form_integrations_data_index_ARRAY, true) . '].');
        if(isset($this->form_integrations_data_index_ARRAY[CRNRSTN_UI_FORM_INTEGRATION_PACKET])){

            foreach($this->form_integrations_data_index_ARRAY[CRNRSTN_UI_FORM_INTEGRATION_PACKET] as $index => $data_key){

                $tmp_str_out .= $data_key . '|::|';
                $tmp_ARRAY[] = $data_key;

            }

            $tmp_str_out = $this->strrtrim($tmp_str_out, '|::|');

            if($output_type == 'string'){

                return $tmp_str_out;

            }

            return $tmp_ARRAY;

        }

        return false;

    }

    public function crnrstn_data_packet_return($output_channel_constant){

        return self::$oCRNRSTN_CONFIG_MGR->crnrstn_data_packet_return($output_channel_constant);

    }

    public function crnrstn_data_packet_hidden_input_return($channel_constant, $crnrstn_form_handle){

        return self::$oCRNRSTN_CONFIG_MGR->crnrstn_data_packet_hidden_input_return($channel_constant, $crnrstn_form_handle);

    }

    public function form_serialize_new($crnrstn_form_handle, $transport_protocol = 'POST'){

        return $this->oCRNRSTN_USR->form_serialize_new($crnrstn_form_handle, $transport_protocol);

    }

    public function form_input_add($crnrstn_form_handle = NULL, $field_input_name = NULL, $field_input_id = NULL, $default_value = NULL, $validation_constant_profile = CRNRSTN_INPUT_OPTIONAL, $table_field_name = NULL){

        return $this->oCRNRSTN_USR->form_input_add($crnrstn_form_handle, $field_input_name, $field_input_id, $default_value, $validation_constant_profile, $table_field_name);

    }

    public function form_hidden_input_add($crnrstn_form_handle = NULL, $field_input_name = NULL, $field_input_id = NULL, $default_value = NULL, $validation_constant_profile = CRNRSTN_INPUT_OPTIONAL, $table_field_name = NULL, $encrypt_data = true){

        return $this->oCRNRSTN_USR->form_hidden_input_add($crnrstn_form_handle, $field_input_name, $field_input_id, $default_value, $validation_constant_profile, $table_field_name, $encrypt_data);

    }

    public function form_response_add($crnrstn_form_handle, $field_input_name = NULL, $success_response_data = NULL, $success_response_type = NULL, $error_response_data = NULL, $error_response_type = NULL){
        /*
        WHERE $response_type=
        CRNRSTN_HTTP_REDIRECT
        CRNRSTN_HTTPS_REDIRECT
        CRNRSTN_HTTP_DATA_RETURN     // UGC RESPONSE HEADER DATA???
        CRNRSTN_HTTPS_DATA_RETURN    // UGC RESPONSE HEADER DATA???
        CRNRSTN_JSON_RETURN
        CRNRSTN_XML_RETURN
        CRNRSTN_SOAP_RETURN
        CRNRSTN_HTML_TEXT_RETURN
        CRNRSTN_DOCUMENT_FILE_RETURN
        CRNRSTN_SERVER_RESPONSE_CODE

        'CRNRSTN_HTTP_REDIRECT', 'CRNRSTN_HTTPS_REDIRECT', 'CRNRSTN_HTTP_DATA_RETURN',
        'CRNRSTN_HTTPS_DATA_RETURN', 'CRNRSTN_JSON_RETURN', 'CRNRSTN_XML_RETURN', 'CRNRSTN_SOAP_RETURN',
        'CRNRSTN_HTML_TEXT_RETURN', 'CRNRSTN_DOCUMENT_FILE_RETURN', 'CRNRSTN_SERVER_RESPONSE_CODE'

        */

        return $this->oCRNRSTN_USR->form_response_add($crnrstn_form_handle, $field_input_name, $success_response_data, $success_response_type, $error_response_data, $error_response_type);

    }

    public function form_input_feedback_copy_add($crnrstn_form_handle, $validation_constant_profile, $field_input_name, $field_input_id = NULL, $err_msg = NULL, $success_msg = NULL, $info_msg = NULL){

        return $this->oCRNRSTN_USR->form_input_feedback_copy_add($crnrstn_form_handle, $validation_constant_profile, $field_input_name, $field_input_id, $err_msg, $success_msg, $info_msg);

    }

    public function form_get_resource($crnrstn_form_handle, $input_name){

        return $this->oDATA_TUNNEL_SERVICES_MGR->form_get_resource($crnrstn_form_handle, $input_name);

    }

    public function receive_form_integration_packet($uri_passthrough = false, $cipher_override = NULL, $secret_key_override = NULL){

        return $this->oCRNRSTN_USR->receive_form_integration_packet($uri_passthrough, $cipher_override, $secret_key_override);

    }

    public function isvalid_data_validation_check($transport_protocol = 'POST'){

        return $this->oCRNRSTN_USR->isvalid_data_validation_check($transport_protocol);

    }

    public function http_data_services_initialize(){

        error_log(__LINE__ . '  crnrstn die()');
        die();
        $this->oCRNRSTN_ENV->oHTTP_MGR->http_data_services_initialize();

    }

    public function isset_http_param($param, $transport_protocol = 'POST'){

        if(is_array($transport_protocol)){

            if($this->oCRNRSTN_ENV->oHTTP_MGR->issetParam($transport_protocol, $param) == true){

                return true;

            }else{

                return false;

            }

        }

        $http_protocol = strtoupper($transport_protocol);
        $http_protocol = $this->str_sanitize($http_protocol, 'http_protocol_simple');

        try{

            switch($http_protocol){
                case 'POST':

                    if($this->oCRNRSTN_ENV->oHTTP_MGR->issetParam($_POST, $param) == true){

                        return true;

                    }else{

                        return false;

                    }

                default:

                    //
                    // $_GET
                    if($this->oCRNRSTN_ENV->oHTTP_MGR->issetParam($_GET, $param) == true){

                        return true;

                    }else{

                        return false;

                    }

            }

        }catch(Exception $e){

            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function isset_http_superglobal($transport_protocol = 'POST'){

        //
        // WE WILL STILL TAKE $_POST, $_GET, etc...ONLY NEED THIS FOR HTTP AT THE MOMENT.
        // IF SENDING STRING, ONLY THINGS LIKE 'POST', '$_POST', OR 'GET'...etc...WILL WORK. NOT 'FILE'. NOT 'SESSION'...
        if(is_array($transport_protocol)){

            return $this->oCRNRSTN_ENV->issetHTTP($transport_protocol);

        }

        $http_protocol = strtoupper($transport_protocol);
        $http_protocol = $this->str_sanitize($http_protocol, 'http_protocol_simple');

        return $this->oCRNRSTN_ENV->issetHTTP($http_protocol);

    }

    public function extract_data_http($param, $transport_protocol = 'GET', $tunnel_encrypted = false){

        if(is_array($transport_protocol)){

            //
            // CAMEL-CASED METHOD NAMES ARE OG CRNRSTN :: v1.0.0.
            // https://crnrstn.evifweb.com/documentation/classes/http_manager/extractdata/
            return $this->oCRNRSTN_ENV->oHTTP_MGR->extractData($transport_protocol, $param, $tunnel_encrypted);

        }

        $http_protocol = strtoupper($transport_protocol);
        $http_protocol = $this->str_sanitize($http_protocol, 'http_protocol_simple');

        try{

            switch($http_protocol){
                case 'POST':

                    //
                    // CAMEL-CASED METHOD NAMES ARE OG CRNRSTN :: v1.0.0.
                    // https://crnrstn.evifweb.com/documentation/classes/http_manager/issetparam/
                    if($this->oCRNRSTN_ENV->oHTTP_MGR->issetParam($_POST, $param) == true){

                        return $this->oCRNRSTN_ENV->oHTTP_MGR->extractData($_POST, $param, $tunnel_encrypted);

                    }else{

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        throw new Exception('The desired HTTP _' . $http_protocol . ' parameter, ' . $param . ', is not available.');

                    }

                break;
                default:

                    //
                    // $_GET
                    if($this->oCRNRSTN_ENV->oHTTP_MGR->issetParam($_GET, $param) == true){

                        return $this->oCRNRSTN_ENV->oHTTP_MGR->extractData($_GET, $param, $tunnel_encrypted);

                    }else{

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        //throw new Exception('The desired HTTP _' . $http_protocol . ' parameter, ' . $param . ', is not available.');
                        //$this->error_log('The desired HTTP _' . $http_protocol . ' parameter, ' . $param . ', is not available.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                        return false;

                    }

                break;

            }

        }catch(Exception $e){

            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function consume_form_integration_packet(){

        return $this->oCRNRSTN_ENV->consume_form_integration_packet();

    }

    public function isset_crnrstn_services_http(){

        return $this->oCRNRSTN_ENV->isset_crnrstn_services_http();

    }

    public function return_err_data_validation_check($transport_protocol = 'POST'){

        return $this->oCRNRSTN_USR->return_err_data_validation_check($transport_protocol);

    }

    public function return_SOAP_SVC_debugMode(){

        return $this->oCRNRSTN_ENV->return_SOAP_SVC_debugMode();

    }

    public function return_form_submitted_value($getpost_input_name, $transport_protocol = NULL){

        return $this->oCRNRSTN_ENV->return_form_submitted_value($getpost_input_name, $transport_protocol);

    }

//    public function ________is_configured(){
//
//        if(isset(self::$env_key_hash_config_ARRAY[self::$config_serial])){
//
//            //
//            // CALL THIS METHOD ANYTIME. ALSO, config_detect_environment() WILL EITHER RETURN FALSE OR
//            // THE DETECTED ENV KEY.
//            if(!isset($this->oCRNRSTN_USR)){
//
//                //$this->oCRNRSTN_ENV = new crnrstn_environment($this, 'session_initialization_ping');
//                //$this->oCRNRSTN_ENV = new crnrstn_environment($this);
//                $this->oCRNRSTN_USR = $this->oCRNRSTN_ENV->return_ENV_oCRNRSTN_USR();
//
//            }
//
//            return true;
//
//        }
//
//        return false;
//
//    }

    public function retrieve_data_value($data_key, $data_type_family = 'CRNRSTN::RESOURCE', $index = NULL, $env_key = NULL, $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME){

        return self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value($data_key, $data_type_family, $index, $env_key, $data_authorization_profile);

    }

    public function device_type_bit(){

        if($this->device_type_bit == 0){

            return CRNRSTN_CHANNEL_DESKTOP;

        }

        return $this->device_type_bit;

    }

    public function device_type(){

        return $this->device_type;

    }

    public function system_resource_constants_ARRAY(){

        return self::$system_resource_constants_ARRAY;

    }

    public function system_data_profile_constants_ARRAY(){

        return $this->system_data_profile_constants_ARRAY;

    }

    public function iso_language_html(){

        return $this->oCRNRSTN_LANG_MGR->iso_language_html();

    }

    public function set_iso_language_profile($iso_profile_ARRAY){

        /*
        [Fri Dec 09 04:20:21.757619 2022] [:error] [pid 3020] [client 172.16.225.1:50540] 1051 crnrstn $iso_profile_ARRAY[Array
        (
            [locale_identifier] => en
            [region_variant] => US
            [factor_weighting] => 0.9
            [iso_language_nomination] => English
            [native_nomination] => English
            [iso_639-1_2002] => en
            [iso_639-2_1998] => eng
            [iso_639-3_2007] => eng
            [uri] => Array
                (
                    [0] => https://en.wikipedia.org/wiki/English_language
                )

        )
        ].

        */

        //error_log(__LINE__ . '  crnrstn [' . print_r($iso_profile_ARRAY, true) . '].');
        $this->iso_profile_ARRAY[0] = $iso_profile_ARRAY[0];

    }

    public function iso_language_profile($lang_attribute = 'iso_639-1_2002', $index = 0){

        /*
        $this->lang_pref_data_ARRAY[$tmp_lang_pref_serialization]['locale_identifier'] = $tmp_base_lower;
        $this->lang_pref_data_ARRAY[$tmp_lang_pref_serialization]['region_variant'] = $region;
        $this->lang_pref_data_ARRAY[$tmp_lang_pref_serialization]['factor_weighting'] = $weighting;
        $this->lang_pref_data_ARRAY[$tmp_lang_pref_serialization]['iso_language_nomination'] = 'Abkhazian';
        $this->lang_pref_data_ARRAY[$tmp_lang_pref_serialization]['native_nomination'] = 'аҧсуа бызшәа, аҧсшәа';
        $this->lang_pref_data_ARRAY[$tmp_lang_pref_serialization]['iso_639-1_2002'] = 'ab';
        $this->lang_pref_data_ARRAY[$tmp_lang_pref_serialization]['iso_639-2_1998'] = 'abk';
        $this->lang_pref_data_ARRAY[$tmp_lang_pref_serialization]['iso_639-3_2007'] = 'abk';
        $this->lang_pref_data_ARRAY[$tmp_lang_pref_serialization]['uri'][] = 'https://en.wikipedia.org/wiki/Abkhazian_language';

        iso_language_profile(CRNRSTN_RESOURCE_ALL)
        iso_language_profile(NULL)
        */

        if($lang_attribute == NULL && $index == 0){

            return $this->iso_profile_ARRAY;

        }

        if($lang_attribute == CRNRSTN_RESOURCE_ALL){

            return $this->oCRNRSTN_LANG_MGR->iso_language_profile($lang_attribute, $index);

        }

        $lang_attribute_lower = strtolower($lang_attribute);

        if($index == 0 && isset($this->iso_profile_ARRAY[0][$lang_attribute]) && $lang_attribute !== NULL){

            return $this->iso_profile_ARRAY[0][$lang_attribute_lower];

        }

        //
        // GO TO MULTI LANGUAGE MANAGER FOR FULL MULTI-LANG
        // ISO PROFILE. CRNRSTN :: ONLY HOLDS THE WINNER.
        return $this->oCRNRSTN_LANG_MGR->iso_language_profile($lang_attribute_lower, $index);

    }

    public function iso_language_profile_count(){

        return $this->oCRNRSTN_LANG_MGR->iso_language_profile_count();

    }

    public function system_hash_algo(){

        return self::$hmac_hash_algorithm_ARRAY['DEFAULT']['NAME'];
        //return self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'][self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER]];

    }

    public function get_crnrstn($name, $index_0 = NULL, $index_1 = NULL, $index_2 = NULL, $index_3 = NULL){

        switch($name){
            case 'config_serial':

                return self::$config_serial;

            break;
            case 'request_id':

                return self::$request_id;

            break;
            case 'request_serial':

                return self::$request_serial;

            break;
            case 'CRNRSTN_debug_mode':
                // SET AFTER VALIDATION.

                return self::$CRNRSTN_debug_mode;

            break;
            case 'env_err_reporting_profile_ARRAY':

                return $this->env_err_reporting_profile_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]];

            break;
            case 'env_html_comments_mode_ARRAY':
                // E.G., CRNRSTN_HTML_COMMENTS_FULL, CRNRSTN_HTML_COMMENTS_NONE, AND CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED (WHERE TIMESTAMPS ARE OMITTED FROM HTML COMMENTS).

                return $this->env_html_comments_mode_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]];

            break;
            case 'channel_integer_syntax_ARRAY':

                return self::$channel_integer_syntax_ARRAY;

            break;
            case 'channel_syntax_ARRAY':

                return self::$channel_syntax_ARRAY;

            break;
            case 'max_disk_storage_utilization_warning':

                return self::$max_disk_storage_utilization_warning;

            break;
            case 'max_disk_storage_utilization':

                return self::$max_disk_storage_utilization;

            break;
            case 'system_resource_profile_ARRAY':

                if(isset(self::$system_resource_profile_ARRAY['max_disk_storage_utilization'])){

                    return self::$system_resource_profile_ARRAY;

                }

                return NULL;

            break;
            case 'object_serializable_channels_ARRAY':

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                // # # C # R # N # R # S # T # N # : : # # # #
                // DDO SETTINGS AND CONFIGURATION OVERRIDE.
                return self::$object_serializable_channels_ARRAY;

            break;
            case 'ddo_serializable_data_types_ARRAY':

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                // # # C # R # N # R # S # T # N # : : # # # #
                // DDO SETTINGS AND CONFIGURATION OVERRIDE.
                return self::$ddo_serializable_data_types_ARRAY;

            break;
            case 'permissions_chmod':

                return self::$permissions_chmod;

            break;
            case 'openssl_ARRAY':

                if(isset($index_0) && isset($index_1) && isset($index_2) && isset($index_3)){

                    if(isset(self::$openssl_ARRAY[$index_0][$index_1][$index_2][$index_3])){

                        return self::$openssl_ARRAY[$index_0][$index_1][$index_2][$index_3];

                    }else{

                        return NULL;

                    }

                }else{

                    if(isset($index_0) && isset($index_1) && isset($index_2)){

                        if(isset(self::$openssl_ARRAY[$index_0][$index_1][$index_2])){

                            return self::$openssl_ARRAY[$index_0][$index_1][$index_2];

                        }else{

                            return NULL;

                        }

                    }

                }

            break;
            case 'system_openssl_cipher_preferred_ARRAY':

                return self::$system_openssl_cipher_preferred_ARRAY;

            break;
            case 'log_silo_profile':
            case 'CRNRSTN_log_silo_profile':

                //
                // GET CRNRSTN :: LOG SILO PROFILE.
                return self::$log_silo_profile_ARRAY;

            break;
            case 'openssl_cipher_int':

                return self::$openssl_cipher_int;

            break;
            case 'system_openssl_digest_preferred_ARRAY':

                return self::$system_openssl_digest_preferred_ARRAY;

            break;
            case 'system_hmac_algorithm_preferred_ARRAY':

                return self::$system_hmac_algorithm_preferred_ARRAY;

            break;
            case 'salt_string_length':

                return self::$salt_string_length;

            break;
            case 'byte_reporting_units':

                return self::$byte_reporting_units;

            break;
            case 'byte_reporting_precision':

                return self::$byte_reporting_precision;

            break;
            case 'channel_master_ARRAY':

                return self::$channel_master_ARRAY;

            break;
            case 'data_channel_init_sequence':

                return self::$data_channel_init_sequence;

            break;
            case 'static_css_length_unit':

                return self::$static_css_length_unit;

            break;
            case 'css_length_units_ARRAY':

                return $this->oINTERACT_UI_HTML_MGR->get_crnrstn_interact_ui_html_mgr('css_length_units_ARRAY');

            break;
            case 'system_file_attributes_master_ARRAY':

                return self::$system_file_attributes_master_ARRAY;

            break;
            case 'system_files_version_hash_ARRAY':

                if(isset($index_0)){

                    return self::$system_files_version_hash_ARRAY[$index_0];

                }

                return self::$system_files_version_hash_ARRAY;

            break;
            case 'system_theme_style_constants_ARRAY':

                if(isset($index_0)){

                    if(isset(self::$system_theme_style_constants_ARRAY[$index_0])){

                        return self::$system_theme_style_constants_ARRAY[$index_0];

                    }

                }

                return NULL;

            break;
            case 'system_default_logging_output_profile':

                return self::$system_default_logging_output_profile;

            break;
            default:

                error_log(__LINE__ . ' ' . __METHOD__ . ' Unknown SWITCH CASE received [' . $name . '].');
                $this->error_log('Unknown SWITCH CASE received [' . $name . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            break;

        }

        return $this->session_salt();

    }

    public function set_crnrstn($name, $value = NULL, $index_0 = NULL, $index_1 = NULL, $index_2 = NULL, $index_3 = NULL){

        switch($name){
            case 'CRNRSTN_debug_mode':
                // SET AFTER VALIDATION.

                self::$CRNRSTN_debug_mode = $value;

            break;
            case 'env_err_reporting_profile_ARRAY':

                $this->env_err_reporting_profile_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]] = $value;

            break;
            case 'env_html_comments_mode_ARRAY':
                // E.G., CRNRSTN_HTML_COMMENTS_FULL, CRNRSTN_HTML_COMMENTS_NONE, AND CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED (WHERE TIMESTAMPS ARE OMITTED FROM HTML COMMENTS).

                $this->env_html_comments_mode_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]] = $value;

            break;
            case 'max_disk_storage_utilization_warning':

                self::$max_disk_storage_utilization_warning = $value;

            break;
            case 'max_disk_storage_utilization':

                self::$max_disk_storage_utilization = $value;

            break;
            case 'system_resource_profile_ARRAY':

                self::$system_resource_profile_ARRAY = $value;

            break;
            case 'object_serializable_channels_ARRAY':

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                // # # C # R # N # R # S # T # N # : : # # # #
                // DDO SETTINGS AND CONFIGURATION OVERRIDE.
                self::$object_serializable_channels_ARRAY = $value;

            break;
            case 'ddo_serializable_data_types_ARRAY':

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                // # # C # R # N # R # S # T # N # : : # # # #
                // DDO SETTINGS AND CONFIGURATION OVERRIDE.
                self::$ddo_serializable_data_types_ARRAY = $value;

            break;
            case 'permissions_chmod':

                self::$permissions_chmod = $value;

            break;
            case 'openssl_ARRAY':

                //
                // AS AN INDICATION THAT THIS IS A REQUEST FOR
                // INITIALIZATION, WE WILL LEAVE $index_1 NULL.
                if(!isset($index_1)){

                    switch($index_0){
                        case 'DIGEST_METHOD':

                            self::$openssl_ARRAY['DIGEST_METHOD']['OPTIONS']['SERVER'] = $value;

                        break;
                        case 'CIPHER':

                            self::$openssl_ARRAY['CIPHER']['OPTIONS']['SERVER'] = $value;

                        break;

                    }

                    //
                    // RETURN AN OUTPUT ARRAY TO SUPPORT
                    // CRNRSTN :: CONFIGURATION INITIALIZATION.
                    return $value;

                }

                if(isset($index_0) && isset($index_1) && isset($index_2) && isset($index_3)){

                    self::$openssl_ARRAY[$index_0][$index_1][$index_2][$index_3] = $value;

                }else{

                    if(isset($index_0) && isset($index_1) && isset($index_2)){

                        if($this->gettype($value, CRNRSTN_INTEGER) == CRNRSTN_ARRAY){

                            //
                            // LOAD AVAILABLE (ON THE SERVER)
                            // OPENSSL CIPHERS.
                            self::$openssl_ARRAY[$index_0][$index_1][$index_2] = $value;

                        }else{

                            if($index_0 == 'CIPHER' && $index_1 == 'ISACTIVE'){
                                // $data_key = $index_2, $data_type_family = $index_3

                                $tmp_cipher = strtolower(trim($value));

                                //
                                // UPDATE THE INTERNAL REFERENCE DATA STRUCTURE PER THE SERVER'S
                                // AVAILABLE OPENSSL CIPHERS AND THE INPUT DATA.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA VALIDATION [_openssl_cipher_lib]
                                foreach((array) self::$openssl_ARRAY['CIPHER']['OPTIONS']['SERVER'] as $cipher_index => $cipher_name){
                                    // TODO :: IS IT A GUARANTEE THAT THE SERVER HASH NAME WILL ALWAYS BE LOWERCASE?

                                    //error_log(__LINE__ . ' crnrstn [\'OPTIONS\'][\'SERVER\'] openssl_cipher $cipher_name[' . $cipher_name . '].');

                                    $tmp_lower_hash = strtolower($cipher_name);
                                    self::$openssl_ARRAY['CIPHER']['OPTIONS']['ISACTIVE'][$tmp_lower_hash] = $cipher_index;

                                    if($tmp_lower_hash == $tmp_cipher){

                                        self::$openssl_cipher_int = $cipher_index;
                                        self::$openssl_ARRAY['CIPHER']['DEFAULT'][CRNRSTN_INTEGER] = $cipher_index;
                                        self::$openssl_ARRAY['CIPHER']['DEFAULT']['NAME'] = $tmp_cipher = $cipher_name;

                                        //
                                        // SET ENVIRONMENT OPENSSL CIPHER PROFILE.
                                        $this->oCRNRSTN_ENV->set_openssl_cipher_profile($cipher_name, $index_2, $index_3);

                                        //
                                        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                                        // # # C # R # N # R # S # T # N # : : # # # #
                                        // CRNRSTN :: UGC DATA INPUT [_openssl_cipher_lib]
                                        $tmp_output = $this->add_resource($index_2, $tmp_cipher, $index_3, CRNRSTN_AUTHORIZE_SESSION, 0);
                                        $this->add_resource($index_2 .'_index', $cipher_index, $index_3, CRNRSTN_AUTHORIZE_SESSION, 0);

                                        $tmp_ddo_write = true;

                                    }

                                }

                            }

                        }

                    }

                }

            break;
            case 'system_openssl_cipher_preferred_ARRAY':

                self::$system_openssl_cipher_preferred_ARRAY = $value;

            break;
            case 'log_silo_profile':
            case 'CRNRSTN_log_silo_profile':

                //
                // SET CRNRSTN :: LOG SILO PROFILE.
                self::$log_silo_profile_ARRAY[] = $value;

            break;
            case 'openssl_cipher_int':

                self::$openssl_cipher_int = $value;

            break;
            case 'hmac_hash_algorithm_ARRAY':

                if(!isset($index_0)){

                    self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'] = $value;

                    return $value;

                }

                if(isset($index_0) && isset($index_1) && isset($index_2) && isset($index_3)){

                    self::$hmac_hash_algorithm_ARRAY[$index_0][$index_1][$index_2][$index_3] = $value;

                }else{

                    if(isset($index_0) && isset($index_1) && isset($index_2)){

                        if($this->gettype($value, CRNRSTN_INTEGER) == CRNRSTN_ARRAY){

                            //
                            // LOAD AVAILABLE (ON THE SERVER)
                            // HMAC ALGORITHM.
                            self::$hmac_hash_algorithm_ARRAY[$index_0][$index_1][$index_2] = $value;

                        }else{

                            if($index_0 == 'CIPHER' && $index_1 == 'ISACTIVE'){
                                // $data_key = $index_2, $data_type_family = $index_3

                                $tmp_cipher = strtolower(trim($value));

                                //
                                // UPDATE THE INTERNAL REFERENCE DATA STRUCTURE PER THE SERVER'S
                                // AVAILABLE OPENSSL CIPHERS AND THE INPUT DATA.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA VALIDATION [_openssl_cipher_lib]
                                foreach((array) self::$openssl_ARRAY['CIPHER']['OPTIONS']['SERVER'] as $cipher_index => $cipher_name){
                                    // TODO :: IS IT A GUARANTEE THAT THE SERVER HASH NAME WILL ALWAYS BE LOWERCASE?

                                    //error_log(__LINE__ . ' crnrstn [\'OPTIONS\'][\'SERVER\'] openssl_cipher $cipher_name[' . $cipher_name . '].');

                                    $tmp_lower_hash = strtolower($cipher_name);
                                    self::$hmac_hash_algorithm_ARRAY['CIPHER']['OPTIONS']['ISACTIVE'][$tmp_lower_hash] = $cipher_index;

                                    if($tmp_lower_hash == $tmp_cipher){

                                        self::$openssl_cipher_int = $cipher_index;
                                        self::$openssl_ARRAY['CIPHER']['DEFAULT'][CRNRSTN_INTEGER] = $cipher_index;
                                        self::$openssl_ARRAY['CIPHER']['DEFAULT']['NAME'] = $tmp_cipher = $cipher_name;

                                        //
                                        // SET ENVIRONMENT OPENSSL CIPHER PROFILE.
                                        $this->oCRNRSTN_ENV->set_openssl_cipher_profile($cipher_name, $index_2, $index_3);

                                        //
                                        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                                        // # # C # R # N # R # S # T # N # : : # # # #
                                        // CRNRSTN :: UGC DATA INPUT [_openssl_cipher_lib]
                                        $tmp_output = $this->add_resource($index_2, $tmp_cipher, $index_3, CRNRSTN_AUTHORIZE_SESSION, 0);
                                        $this->add_resource($index_2 .'_index', $cipher_index, $index_3, CRNRSTN_AUTHORIZE_SESSION, 0);

                                        $tmp_ddo_write = true;

                                    }

                                }

                            }

                        }

                    }

                }

            break;
            case 'hmac_hash_algorithm_int':

                self::$hmac_hash_algorithm_int = $value;

            break;
            case 'system_hmac_algorithm_preferred_ARRAY':

               self::$system_hmac_algorithm_preferred_ARRAY = $value;

            break;
            case 'salt_string_length':

                self::$salt_string_length = $value;

            break;
            case 'byte_reporting_units':

                self::$byte_reporting_units = $value;

            break;
            case 'byte_reporting_precision':

                self::$byte_reporting_precision = $value;

            break;
            case 'channel_master_ARRAY':

                self::$channel_master_ARRAY = $value;

            break;
            case 'data_channel_init_sequence':

                self::$data_channel_init_sequence = $value;

            break;
            case 'static_css_length_unit':

                self::$static_css_length_unit = $value;

            break;
            case 'css_length_units_ARRAY':

                $this->oINTERACT_UI_HTML_MGR->set_crnrstn_interact_ui_html_mgr('css_length_units_ARRAY', $value);

            break;
            case 'system_file_attributes_master_ARRAY':

                self::$system_file_attributes_master_ARRAY = $value;

            break;
            case 'system_files_version_hash_ARRAY':

                self::$system_files_version_hash_ARRAY[$index_0] = $value;

            break;
            case 'ip_grant_exclusive_access':

                return self::$oCRNRSTN_IP_MGR->exclusiveAccess($value);

            break;
            case 'ip_deny_access':

                return self::$oCRNRSTN_IP_MGR->denyAccess($value);

            break;
            case 'init_query_silo':

                //
                // INSTANTIATE THE CRNRSTN :: DATABASE
                // QUERY SILO CLASS OBJECT.
                //
                // THE oCRNRSTN_USER CLASS OBJECT WIELDS THE
                // SQL SILO CLASS, AND SO HAS HISTORICALLY
                // BORNE THE HEAVIEST BURDEN FOR DATABASE
                // SUPPORT.
                //
                // ...AND THIS WAS LONG BEFORE THERE WAS
                // EVEN SUCH A THING AS...
                //
                // CRNRSTN :: LIGHTSABER.
                //
                // Friday, December 1, 2023 @ 1247 hrs.
                $this->oCRNRSTN_USR->init_query_silo($this);

            break;
            default:

                error_log(__LINE__ . ' ' . __METHOD__ . ' Unknown SWITCH CASE received [' . $name . '].');
                $this->error_log('Unknown SWITCH CASE received [' . $name . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            break;

        }

        return true;

    }

    public function isset_crnrstn($name, $index_0 = NULL, $index_1 = NULL, $index_2 = NULL, $index_3 = NULL){

        switch($name){
            case 'CRNRSTN_debug_mode':
                // SET AFTER VALIDATION.

                if(isset(self::$CRNRSTN_debug_mode)){

                    return true;

                }

                return false;

            break;
            case 'env_err_reporting_profile_ARRAY':

                if(isset(self::$env_key_hash_config_ARRAY[self::$config_serial])){

                    if(isset($this->env_err_reporting_profile_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                        return true;

                    }

                    return true;

                }

                return false;

            break;
            case 'env_html_comments_mode_ARRAY':
                // E.G., CRNRSTN_HTML_COMMENTS_FULL, CRNRSTN_HTML_COMMENTS_NONE, AND CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED (WHERE TIMESTAMPS ARE OMITTED FROM HTML COMMENTS).

                if(isset(self::$env_key_hash_config_ARRAY[self::$config_serial])){

                    if(isset($this->env_html_comments_mode_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                        return true;

                    }

                    return true;

                }

                return false;

            break;
            case 'max_disk_storage_utilization_warning':

                if(isset(self::$max_disk_storage_utilization_warning)){

                    return true;

                }

                return false;

            break;
            case 'max_disk_storage_utilization':

                if(isset(self::$max_disk_storage_utilization)){

                    return true;

                }

                return false;

            break;
            case 'system_resource_profile_ARRAY':

                //
                // WE WILL CHECK FOR ANY VALUE IN THE ARRAY.
                if(isset(self::$system_resource_profile_ARRAY['max_disk_storage_utilization'])){

                    return true;

                }

                return false;

            break;
            case 'ddo_serializable_data_types_ARRAY':

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                // # # C # R # N # R # S # T # N # : : # # # #
                // DDO SETTINGS AND CONFIGURATION OVERRIDE.
                //
                // WE WILL CHECK FOR ANY VALUE IN THE ARRAY.
                if(count(self::$ddo_serializable_data_types_ARRAY) > 0){

                    return true;

                }

                return false;

            break;
            case 'permissions_chmod':

                if(isset(self::$permissions_chmod)){

                    return true;

                }

                return false;

            break;
            case 'openssl_ARRAY':

                if(isset($index_0) && isset($index_1) && isset($index_2) && isset($index_3)){

                    if(isset(self::$openssl_ARRAY[$index_0][$index_1][$index_2][$index_3])){

                        return self::$openssl_ARRAY[$index_0][$index_1][$index_2][$index_3];

                    }else{

                        return NULL;

                    }

                }else{

                    if(isset($index_0) && isset($index_1) && isset($index_2)){

                        if(isset(self::$openssl_ARRAY[$index_0][$index_1][$index_2])){

                            return self::$openssl_ARRAY[$index_0][$index_1][$index_2];

                        }else{

                            return NULL;

                        }

                    }else{

                        switch($index_0){
                            case 'CIPHER':

                                //
                                // NOTE: INVERTED INITIALIZATION CHECK. THIS IS
                                //       NOT A VANILLA "IS_SET()" RETURN.
                                //
                                //       [DO NOT COPY]
                                //
                                // Thursday, November 30, 2023 @ 0549 hrs.
                                if(self::$openssl_ARRAY['CIPHER']['DEFAULT'][CRNRSTN_INTEGER] == -1){

                                    return false;

                                }

                            break;
                            case 'DIGEST_METHOD':

                                //
                                // NOTE: INVERTED INITIALIZATION CHECK. THIS IS
                                //       NOT A VANILLA "IS_SET()" RETURN.
                                //
                                //       [DO NOT COPY]
                                //
                                // Thursday, November 30, 2023 @ 0549 hrs.
                                if(self::$openssl_ARRAY['DIGEST_METHOD']['DEFAULT'][CRNRSTN_INTEGER] == -1){

                                    return false;

                                }

                            break;

                        }

                        return true;

                    }

                }

            break;
            case 'log_silo_profile':
            case 'CRNRSTN_log_silo_profile':

                //
                // IS CRNRSTN :: LOG SILO PROFILE SET?
                if(isset(self::$log_silo_profile_ARRAY)){

                    if(count(self::$log_silo_profile_ARRAY) > 0){

                        return true;

                    }

                }

                return false;

            break;
            case 'openssl_cipher_int':

                if(isset(self::$openssl_cipher_int)){

                    return true;

                }

                return false;

            break;
            case 'system_openssl_digest_preferred_ARRAY':

                if(isset(self::$system_openssl_digest_preferred_ARRAY[0])){

                    return true;

                }

                return false;

            break;
            case 'hmac_hash_algorithm_ARRAY':

                if(!(self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER]) == -1){

                    return true;

                }

                return false;

            break;
            case 'system_hmac_algorithm_preferred_ARRAY':

                if(!(self::$system_hmac_algorithm_preferred_ARRAY['DEFAULT'][CRNRSTN_INTEGER]) == -1){

                    return true;

                }

                return false;

            break;
            case 'salt_string_length':

                if(isset(self::$salt_string_length)){

                    return true;

                }

                return false;

            break;
            case 'byte_reporting_units':

                if(isset(self::$byte_reporting_units)){

                    return true;

                }

                return false;

            break;
            case 'byte_reporting_precision':

                if(isset(self::$byte_reporting_precision)){

                    return true;

                }

                return false;

            break;
            case 'data_channel_init_sequence':

                if(isset(self::$data_channel_init_sequence)){

                    return true;

                }

                return false;

            break;
            case 'static_css_length_unit':

                if(isset(self::$static_css_length_unit)){

                    return true;

                }

                return false;

            break;
            case 'css_length_units_ARRAY':

                return $this->oINTERACT_UI_HTML_MGR->isset_crnrstn_interact_ui_html_mgr('css_length_units_ARRAY');

            break;
            case 'system_file_attributes_master_ARRAY':

                if(isset(self::$system_file_attributes_master_ARRAY)){

                    if(count(self::$system_file_attributes_master_ARRAY) > 0){

                        return true;

                    }

                }

                return false;

            break;
            case 'timezone_syntax_ARRAY':

                if(isset(self::$timezone_syntax_ARRAY[$index_0])){

                    return true;

                }

                return false;

            break;
            case 'system_theme_style_constants_ARRAY':

                if(isset($index_0)){

                    if(isset(self::$system_theme_style_constants_ARRAY[$index_0])){

                        return true;

                    }

                }

                return false;

            break;
            case 'system_log_output_profile_constants_ARRAY':

                if(isset($index_0)){

                    if(isset(self::$system_log_output_profile_constants_ARRAY[$index_0])){

                        return true;

                    }

                }

                return false;

            break;
            default:

                error_log(__LINE__ . ' ' . __METHOD__ . ' Unknown SWITCH CASE received [' . $name . '].');
                $this->error_log('Unknown SWITCH CASE received [' . $name . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            break;

        }

        return false;

    }

    public function CRNRSTN_debug_mode(){

        return $this->get_crnrstn('CRNRSTN_debug_mode');

    }

    public function PHPMAILER_debug_mode(){

        //return self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value('PHPMAILER_debug_mode');
        return $this->get_resource('PHPMAILER_debug_mode', 0, 'CRNRSTN::RESOURCE::CONFIGURATION');

    }

    public function version_crnrstn(){

        //self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value('version_crnrstn');
        return $this->get_resource('version_crnrstn', 0, 'CRNRSTN::RESOURCE::CONFIGURATION');

    }

    public function version_apache(){

        //return self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value('version_apache');
        return $this->get_resource('version_apache', 0, 'CRNRSTN::RESOURCE::CONFIGURATION');

    }

    public function version_apache_sysimg(){

        //return self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value('version_apache_sysimg');
        return $this->get_resource('version_apache_sysimg', 0, 'CRNRSTN::RESOURCE::CONFIGURATION');

    }

    public function version_php(){

        //return self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value('version_php');
        return $this->get_resource('version_php', 0, 'CRNRSTN::RESOURCE::CONFIGURATION');

    }

    public function version_mobile_detect(){

        return $this->oCRNRSTN_ENV->oHTTP_MGR->oMOBI_DETECT->getScriptVersion();

    }

    public function version_soap(){

        try{

            //$tmp_version_soap = self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value('version_soap');
            $tmp_version_soap = $this->get_resource('version_soap', 0, 'CRNRSTN::RESOURCE::CONFIGURATION');

            //error_log(__LINE__ . ' crnrstn $tmp_version_soap=' . $tmp_version_soap);
            //die();
            if($tmp_version_soap == $this->session_salt() || $tmp_version_soap == ''){

                $tmp_soap = new nusoap_base();

                $tmp_version_soap = $tmp_soap->title;               //'NuSOAP';
                $tmp_version_soap .= $tmp_soap->version;            //' v0.9.5';
                //$tmp_version_soap .= $tmp_soap->revision;         //' $Revision: 1.123 $';

                $tmp_soap_defencoding = $tmp_soap->soap_defencoding;

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                //$this->input_data_value($tmp_version_soap, 'version_soap', NULL, 0, CRNRSTN_AUTHORIZE_RUNTIME, NULL);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_version_soap, 'version_soap', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //$this->input_data_value($tmp_soap_defencoding, 'soap_defencoding', NULL, 0, CRNRSTN_AUTHORIZE_RUNTIME, NULL);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_soap_defencoding, 'soap_defencoding', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return $tmp_version_soap;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function soap_defencoding(){

        try{

            //$tmp_soap_defencoding = self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value('soap_defencoding');
            $tmp_soap_defencoding = $this->get_resource('soap_defencoding', 0, 'CRNRSTN::RESOURCE::CONFIGURATION');

            if($tmp_soap_defencoding == $this->session_salt() || $tmp_soap_defencoding == ''){

                $tmp_soap = new nusoap_base();

                $tmp_version_soap = $tmp_soap->title;               //'NuSOAP';
                $tmp_version_soap .= $tmp_soap->version;            //' v0.9.5';
                //$tmp_version_soap .= $tmp_soap->revision;         //' $Revision: 1.123 $';

                $tmp_soap_defencoding = $tmp_soap->soap_defencoding;

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                //$this->input_data_value($tmp_version_soap, 'version_soap', NULL);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_version_soap, 'version_soap', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //$this->input_data_value($tmp_soap_defencoding, 'soap_defencoding', NULL);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_soap_defencoding, 'soap_defencoding', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                error_log(__LINE__ . ' crnrstn MIGRATE THIS TO UGC VALIDATION? $version_soap[' . strval($tmp_version_soap) . ']. $soap_defencoding[' . strval($tmp_soap_defencoding) . '].');

            }

            return $tmp_soap_defencoding;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function version_mysqli(){

        //return self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value('version_mysqli');
        return $this->get_resource('version_mysqli', 0, 'CRNRSTN::RESOURCE::CONFIGURATION');

    }

    public function version_openssl(){

        //return self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value('version_openssl');
        return $this->get_resource('version_openssl', 0, 'CRNRSTN::RESOURCE::CONFIGURATION');

    }

    public function version_linux(){

        //return self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value('version_linux');
        return $this->get_resource('version_linux', 0, 'CRNRSTN::RESOURCE::CONFIGURATION');

    }

    public function return_html_favicon_head_meta($filepath, $http_path, $dir_path = '', $removed_segment_count = 0){

        return $this->oCRNRSTN_ASSET_MGR->return_html_favicon_head_meta($filepath, $http_path, $dir_path, $removed_segment_count);

    }

    public function return_social_share_url($social_app_key, $url, $title_caption = NULL, $tags = NULL, $is_sticky = true){
        /*
        https://blog.shahednasser.com/how-to-easily-add-share-links-for-each-social-media-platform/
        */

        switch(strtoupper($social_app_key)){
            case 'FACEBOOK':
                /*
                FACEBOOK
                <a href="https://www.facebook.com/sharer/sharer.php?
                u=blog.shahednasser.com
                &quote=Awesome%20Blog!">Share on Facebook</a>

                */
                $url_base = '';


            break;
            case 'LINKEDIN':
                /*
                LINKEDIN
                <a href="https://www.linkedin.com/sharing/share-offsite/?
                url=blog.shahednasser.com">Share on LinkedIn</a>

                */

            break;
            case 'REDDIT':
                /*
                REDDIT
                <a href="https://www.reddit.com/submit?
                url=blog.shahednasser.com
                &title=Awesome%20Blog!">Share on Reddit</a>

                */

            break;
            case 'TUMBLR':

                /*
                TUMBLR
                <a href="https://www.tumblr.com/widgets/share/tool?
                canonicalUrl=blog.shahednasser.com
                &caption=Awesome%20blog!
                &tags=test%2Chello">Share on Tumblr</a>

                */

            break;
            case 'TWITTER':

                /*
                TWITTER
                <a href="https://twitter.com/intent/tweet?
                text=Awesome%20Blog!
                &url=blog.shahednasser.com">Share on Twitter</a>

                */

            break;
            case 'WHATSAPP':

                /*
                WHATSAPP
                <a href="https://wa.me/?
                text=Awesome%20Blog!%5Cn%20blog.shahednasser.com">Share on Whatsapp</a>

                */

            break;

        }

        /*
        TWITTER
        <a href="https://twitter.com/intent/tweet?
        text=Awesome%20Blog!
        &url=blog.shahednasser.com">Share on Twitter</a>

        LINKEDIN
        <a href="https://www.linkedin.com/sharing/share-offsite/?
        url=blog.shahednasser.com">Share on LinkedIn</a>

        FACEBOOK
        <a href="https://www.facebook.com/sharer/sharer.php?
        u=blog.shahednasser.com
        &quote=Awesome%20Blog!">Share on Facebook</a>

        WHATSAPP
        <a href="https://wa.me/?
        text=Awesome%20Blog!%5Cn%20blog.shahednasser.com">Share on Whatsapp</a>

        TUMBLR
        <a href="https://www.tumblr.com/widgets/share/tool?
        canonicalUrl=blog.shahednasser.com
        &caption=Awesome%20blog!
        &tags=test%2Chello">Share on Tumblr</a>

        REDDIT
        <a href="https://www.reddit.com/submit?
        url=blog.shahednasser.com
        &title=Awesome%20Blog!">Share on Reddit</a>

        */


    }

    public function return_sticky_link($url, $meta_params = NULL){

        $tmp_array = array();
        $tmp_flag_array = array();

        $tmp_array[] = $this->session_salt() . '=lnk';
        if($url == '#'){

            return '#';

        }else{

            //error_log(__LINE__ . ' crnrstn STICKY LINK[' . $url . '].');
            $tmp_array[] = 'crnrstn_r=' . $this->data_encrypt($url);

        }

        $tmp_flag_array[$this->session_salt()] = 1;
        $tmp_flag_array['crnrstn_r'] = 1;

        if(isset($meta_params)){

            if(is_array($meta_params)){

                foreach($meta_params as $key => $value){

                    //
                    // TO AVOID RECURSION
                    if(!isset($tmp_flag_array[$spool_key])){

                        $tmp_flag_array[$spool_key] = 1;

                        $tmp_array[] = $value;

                    }

                }

            }else{

                if(is_string($meta_params)){

                    if(!isset($tmp_flag_array['crnrstn_m'])){

                        $tmp_flag_array['crnrstn_m'] = 1;
                        $tmp_array[] = 'crnrstn_m=' . urlencode($meta_params);
                        //error_log(__LINE__ . ' [' . print_r($meta_params, true) . '].');
                        //$tmp_array[] = urlencode($meta_params);

                    }

                }

            }

        }

        return $this->append_url_param($tmp_array);

    }

    public function return_sticky_media_link($media_element_key, $url = NULL, $target = '_blank', $email_channel = false){

        return $this->oCRNRSTN_USR->return_sticky_media_link($media_element_key, $url, $target, $email_channel);

    }

    public function return_crnrstn_text_link($module_key, $system_asset_constant = 'CRNRSTN_R_MD', $url_override = NULL, $resource_constant = CRNRSTN_RESOURCE_OPENSOURCE){
        // WHERE, $resource_constant = CRNRSTN_RESOURCE_OPENSOURCE OR CRNRSTN_RESOURCE_DOCUMENTATION.
        // WHERE, $system_asset_constant CURRENTLY SUPPORTS 'CRNRSTN_R_MD' AND 'PHP_ELLIPSE'.
        // E.G., WHEN USED FOR NATIVE PHP METHOD DOCUMENTATION LINKS,
        // echo $this->return_crnrstn_text_link('scandir', 'PHP_ELLIPSE', CRNRSTN_RESOURCE_OPENSOURCE);

        //error_log(__LINE__ . ' crnrstn $module_key[' . strval($module_key) . ']. $system_asset_constant[' . strval($system_asset_constant) . ']. $url_override[' . strval($url_override) . ']. $resource_constant[' . strval($resource_constant) . '].');
        return $this->oCRNRSTN_CS_CONTROLLER->return_crnrstn_text_link($module_key, $system_asset_constant, $url_override, $resource_constant);

    }

    public function return_sticky_text_link($media_element_key, $url = NULL, $target = '_blank', $email_channel = false){

        //return $this->oCRNRSTN_USR->return_sticky_text_link($media_element_key, $url = NULL, $target = '_blank', $email_channel = false);

    }

    // SOURCE :: https://www.php.net/manual/en/function.parse-url.php
    // AUTHOR :: ivijan dot stefan at gmail dot com :: https://www.php.net/manual/en/function.parse-url.php#114704
    public function return_youtube_embed($url, $width = 560, $height = 315, $fullscreen = true){

        return $this->oCRNRSTN_USR->return_youtube_embed($url, $width, $height, $fullscreen);

    }

    public function env_key(&$env_key){

        if(!isset($env_key)){

            $env_key = CRNRSTN_RESOURCE_ALL;

        }

        if(isset(self::$env_key_config_ARRAY[self::$config_serial])){

            //error_log(__LINE__ . ' crnrstn [' . print_r(self::$env_key_hash_config_ARRAY, true) . ']. config_serial_hash[' . print_r(self::$config_serial, true) . '].');
            $env_key = self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]];

        }

    }

    public function init_rrs_map_object($oCRNRSTN){

        //
        // INSTANTIATE THE CRNRSTN :: RESPONSE RETURN
        // SERIALIZATION MAP CLASS OBJECT.
        //
        // Monday, December 4, 2023 @ 1159 hrs.
        self::$oCRNRSTN_RRS_MAP = new crnrstn_response_return_serialization_map($oCRNRSTN);

    }

    public function hash_ddo_memory_pointer($data_key, $data_type_family = 'CRNRSTN::RESOURCE', $env_key = NULL){

        //
        // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
        $this->env_key($env_key);

        //
        // MOST LIKELY, THIS METHOD IS CALLED THE MOST IN VANILLA CRNRSTN ::
        // HERE IS SOME RUNTIME OPTIMIZATION.
        $tmp_data_key = self::$oCRNRSTN_RRS_MAP->cache_rw_acceleration($data_key, $data_type_family, $env_key);
        if(strlen($tmp_data_key) > 0){

            return $tmp_data_key;

        }

//        //
//        // THIS METHOD IS COSTLY.
//        $tmp_dataset_prefix_str = $this->return_dataset_nomination_prefix('string', self::$config_serial, $env_key, $data_type_family);
//
//        self::$data_key_cache_rw_acceleration_ARRAY[$data_type_family][$data_key] = $tmp_dataset_prefix_str . '::' . $data_key;
//
//        return self::$data_key_cache_rw_acceleration_ARRAY[$data_type_family][$data_key];

        error_log(__LINE__ . ' crnrstn Unable to return or produce any results here.');

        return NULL;

    }

    private function generate_weighted_elements_keys($cnt){

        // self::$system_creative_element_keys_ARRAY =
        // array('CRNRSTN ::', 'LINUX_PENGUIN_SMALL', 'REDHAT_LOGO', 'APACHE_POWER_VERSION', 'APACHE_FEATHER'
        // 'CRNRSTN_R', '5','MYSQL_DOLPHIN', 'PHP_ELLIPSE',
        // 'POWER_BY_PHP', 'ZEND_LOGO', 'ZEND_FRAMEWORK', 'ZEND_FRAMEWORK_3', 'REDHAT_HAT_LOGO');
        $output_ratio_ARRAY = array(8, 6, 10, 6, 8, 5, 3, 1, 7, 7, 7, 5, 5, 5, 3);

        for ($i = 0; $i < $cnt; $i++){

            if(!isset($output_ratio_ARRAY[$i])){

                $output_ratio_ARRAY[$i] = 1;

            }

            for ($ii = 0; $ii < $output_ratio_ARRAY[$i]; $ii++){

                $this->weighted_elements_keys_ARRAY[] = self::$system_creative_element_keys_ARRAY[$i];

            }

        }

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function initialize_serialized_bit($name, $integer_constant, $is_bit_set = true){

        return self::$oCRNRSTN_BITFLIP_MGR->initialize_serialized_bit($name, $integer_constant, $is_bit_set);

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function initialize_bit($integer_constant, $is_bit_set = true){

        return self::$oCRNRSTN_BITFLIP_MGR->initialize_bit($integer_constant, $is_bit_set);

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function is_serialized_bit_set($name, $integer_constant, $return_raw_byte_read = false){

        $tmp_int_read = self::$oCRNRSTN_BITFLIP_MGR->is_serialized_bit_set($name, $integer_constant);

        if($return_raw_byte_read !== false){

            return $tmp_int_read;

        }

        if($tmp_int_read > 0){

            return true;

        }

        return false;

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function is_bit_set($integer_constant, $return_raw_byte_read = false){

        $tmp_int_read = self::$oCRNRSTN_BITFLIP_MGR->is_bit_set($integer_constant);

        if($return_raw_byte_read !== false){

            return $tmp_int_read;

        }

        if($tmp_int_read > 0){

            return true;

        }

        return false;

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function toggle_serialized_bit($name, $integer_constant, $is_bit_set = NULL){

        //
        // WILL ALSO (AND FOREVER) RETURN FALSE IF THE BIT REPRESENTED BY THE INTEGER CONSTANT IS NOT INITIALIZED.
        return self::$oCRNRSTN_BITFLIP_MGR->toggle_serialized_bit($name, $integer_constant, $is_bit_set);

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function toggle_bit($integer_constant, $is_bit_set = NULL){

        //
        // WILL ALSO (AND FOREVER) RETURN FALSE IF THE BIT REPRESENTED BY THE INTEGER CONSTANT IS NOT INITIALIZED.
        return self::$oCRNRSTN_BITFLIP_MGR->toggle_bit($integer_constant, $is_bit_set);

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function serialized_bit_stringin($name, $bits_stringin){

        return self::$oCRNRSTN_BITFLIP_MGR->serialized_bit_stringin($name);

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function bit_stringin($bits_stringin){

        return self::$oCRNRSTN_BITFLIP_MGR->bit_stringin($bits_stringin);

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function serialized_bit_stringout($name){

        return self::$oCRNRSTN_BITFLIP_MGR->serialized_bit_stringout($name);

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function bit_stringout(){

        return self::$oCRNRSTN_BITFLIP_MGR->bit_stringout();

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function clear_all_bits_set_one($int_const_the_one, $is_bit_set = true, $integer_clear_ARRAY = array()){

        //
        // CLEAR ALL
        foreach($integer_clear_ARRAY as $index => $integer_constant){

            //
            // IF THE CONDITION OF THIS INTEGER IN ICY_DIGITALITCC-
            // BITMASK IS AS IT IS FLIPPED IN ITS STATE, WE WILL
            // TURN IT OFF.
            if($this->is_bit_set($integer_constant) == true){

                $this->initialize_bit($integer_constant, false);

            }

        }

        $this->initialize_bit($int_const_the_one, $is_bit_set);

        return true;

    }

    //
    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
    // # # C # R # N # R # S # T # N # : : # # # #
    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
    public function return_set_bits($integer_constants_ARRAY, $first_match = false){

        //$this->oCRNRSTN_BITWISE->set($integer_constant);
        //$this->oCRNRSTN_BITWISE->toggle($integer_constant);
        //$this->oCRNRSTN_BITWISE->read($integer_constant);
        //$this->oCRNRSTN_BITWISE->remove($integer_constant)
        //$this->oCRNRSTN_BITWISE->stringout()
        //self::$oCRNRSTN_BITFLIP_MGR->set($integer_constant, true);

        $tmp_array = array();

        foreach($integer_constants_ARRAY as $index => $int_constant){

            if(is_string($int_constant)){

                $int_constant = $index;

            }

            if($this->is_bit_set($int_constant) == true){

                $tmp_array[] = $int_constant;

                if($first_match == true){

                    return $tmp_array;

                }

            }

        }

        return $tmp_array;

    }

    public function return_system_info($property){

        return self::$oCRNRSTN_BITFLIP_MGR->return_system_info($property);

    }

    /*
    $this->oCRNRSTN->oCRNRSTN_BITFLIP_MGR->uname_output, true) . '].');
    $this->oCRNRSTN->concat_log_string($tmp_str_html_out, __LINE__ . ' ui html mgr system getconf_output [' . print_r($this->oCRNRSTN->oCRNRSTN_BITFLIP_MGR->getconf_output, true) . '].');
    $this->oCRNRSTN->concat_log_string($tmp_str_html_out, __LINE__ . ' ui html mgr system os_bit_size [' . print_r($this->oCRNRSTN->oCRNRSTN_BITFLIP_MGR->os_bit_size, true) . '].');
    $this->oCRNRSTN->concat_log_string($tmp_str_html_out, __LINE__ . ' ui html mgr system lscpu_output [' . print_r($this->oCRNRSTN->oCRNRSTN_BITFLIP_MGR->lscpu_output,


    */

    public function return_encryptable_data_types(){

        return self::$encryptable_data_types_ARRAY;

    }

    public function return_sys_logging_profile(){

        return self::$system_logging_output_profile_ARRAY;

    }

    public function return_sys_logging_meta(){

        return self::$sys_logging_meta_ARRAY;

    }

    private function initialize_func_overloads(){

    }

    private function initialize_os(){

        if(stristr(PHP_OS, 'win')){

            $this->operating_system = 'WIN';

        }else{

            $this->operating_system = strtoupper(PHP_OS);

        }

        //
        // USED FOR TOTAL BYTES CALCULATIONS TO AUTHORIZE CRNRSTN :: MULTI-CHANNEL DATA STORAGE.
        // SOURCE :: https://www.php.net/manual/en/mbstring.overload.php
        // AUTHOR :: Grandt :: https://www.php.net/manual/en/mbstring.overload.php#115219
        // In short, only use mbstring.func_overload if you are 100% certain that nothing on your
        // site relies on manipulating binary data in PHP.
        /*
        To use function overloading, set mbstring.func_overload in php.ini to a positive value
        that represents a combination of bitmasks specifying the categories of functions to be
        overloaded. It should be set to 1 to overload the mail() function. 2 for string
        functions, 4 for regular expression functions. For example, if it is set to 7, mail,
        strings and regular expression functions will be overloaded. The list of overloaded
        functions are shown below.
        -----
        value of mbstring.func_overload	            original function	overloaded function
        1	                                        mail()	            mb_send_mail()
        2	                                        strlen()	        mb_strlen()
        2	                                        strpos()	        mb_strpos()
        2	                                        strrpos()	        mb_strrpos()
        2	                                        substr()	        mb_substr()
        2	                                        strtolower()	    mb_strtolower()
        2	                                        strtoupper()	    mb_strtoupper()
        2	                                        stripos()	        mb_stripos()
        2	                                        strripos()	        mb_strripos()
        2	                                        strstr()	        mb_strstr()
        2	                                        stristr()	        mb_stristr()
        2	                                        strrchr()	        mb_strrchr()
        2	                                        substr_count()	    mb_substr_count()

        */

        // FIRST PASS LOGIC.
        // THIS IS FOR A BASIC PERFORMANCE BOOST...TO AVOID A SLOW MULTI-BYTE
        // METHOD CALL IN THE DATA AUTHORIZATION STORAGE LOOP USE-CASE.
        if(ini_get('mbstring.func_overload') > 0){

            self::$mbstring_func_overload = true;

        }

    }

    // OPENSSL_VERSION_NUMBER parser, works from OpenSSL v.0.9.5b+ (e.g. for use with version_compare())
    // OPENSSL_VERSION_NUMBER is a numeric release version identifier for OpenSSL
    // Syntax: MNNFFPPS: major minor fix patch status (HEX)
    // The status nibble meaning: 0 => development, 1 to e => betas, f => release
    // Examples:
    // - 0x000906023 => 0.9.6b beta 3
    // - 0x00090605f => 0.9.6e release
    // - 0x1000103f  => 1.0.1c
    /**
     * @param OpenSSL version identifier as hex value $openssl_version_number
     */
    private function get_openssl_version_number($patch_as_number = false, $openssl_version_number = null){

        if(is_null($openssl_version_number)) $openssl_version_number = OPENSSL_VERSION_NUMBER;

        $openssl_numeric_identifier = str_pad((string)dechex($openssl_version_number), 8, '0', STR_PAD_LEFT);

        $openssl_version_parsed = array();
        $preg = '/(?<major>[[:xdigit:]])(?<minor>[[:xdigit:]][[:xdigit:]])(?<fix>[[:xdigit:]][[:xdigit:]])';
        $preg .= '(?<patch>[[:xdigit:]][[:xdigit:]])(?<type>[[:xdigit:]])/';

        preg_match_all($preg, $openssl_numeric_identifier, $openssl_version_parsed);

        $openssl_version = false;
        if(!empty($openssl_version_parsed)){

            $alphabet = array(1 => 'a', 2 => 'b', 3 => 'c', 4 => 'd', 5 => 'e', 6 => 'f', 7 => 'g', 8 => 'h', 9 => 'i',
                10 => 'j', 11 => 'k', 12 => 'l', 13 => 'm', 14 => 'n', 15 => 'o', 16 => 'p', 17 => 'q', 18 => 'r',
                19 => 's', 20 => 't', 21 => 'u', 22 => 'v', 23 => 'w', 24 => 'x', 25 => 'y', 26 => 'z');

            $openssl_version = intval($openssl_version_parsed['major'][0]) . '.';
            $openssl_version .= intval($openssl_version_parsed['minor'][0]) . '.';
            $openssl_version .= intval($openssl_version_parsed['fix'][0]);

            if(!$patch_as_number && array_key_exists(intval($openssl_version_parsed['patch'][0]), $alphabet)){

                $openssl_version .= $alphabet[intval($openssl_version_parsed['patch'][0])]; // ideal for text comparison

            }else{

                $openssl_version .= '.' . intval($openssl_version_parsed['patch'][0]); // ideal for version_compare

            }

        }

        return $openssl_version;

    }

    public function initialize_integer_length(){

        $tmp_os_bit_size = (int)$this->return_system_info('os_bit_size');

        self::$os_bit_size = $tmp_os_bit_size;

    }

    private function initialize_config_manager(){

        try{

            foreach($_SERVER as $data_key => $data_value){

                //
                // WE DON'T HAVE ENV KEY HERE. DO WE USE CRNRSTN_RESOURCE_ALL?
                // input_data_value($data_val, $data_key, $data_type_family = 'CRNRSTN::RESOURCE', $index = NULL, $data_authorization_profile = CRNRSTN_AUTHORIZE_ALL, $ttl = 60, $spool_resource = false, $env_key = NULL)
                //self::$oCRNRSTN_CONFIG_MGR->input_data_value($value, $data_key);
                //$this->input_data_value($data_value, $data_key);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $data_value, $data_key, 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //$this->input_data_value_simple($data_value, $data_key);

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function return_global_constants_string_ARRAY(){

        return $this->global_constants_string_ARRAY;

    }

    private function initialize_bitwise(){

        /*
        NOTES (3/8/2021 0609hrs) ::

        On 32-bit builds, a string can be as large as up to 2GB (2147483647 bytes maximum)

        The name of a constant follows the same rules as any label
        in PHP. A valid constant name starts with a letter or
        underscore, followed by any number of letters, numbers, or
        underscores. As a regular expression, it would be expressed
        thusly: ^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$

        Warning :: Use functions from the gmp extension for bitwise manipulation on
        numbers beyond PHP_INT_MAX.

        */

        self::$oCRNRSTN_BITFLIP_MGR = new crnrstn_bitflip_manager($this);

        $this->global_constants_string_ARRAY = self::$oCRNRSTN_BITFLIP_MGR->return_global_constants_string_ARRAY();

        //
        //const CRNRSTN_UI_PHPNIGHT;
        //const CRNRSTN_UI_HTML;
        //const CRNRSTN_UI_PHP;

        //
        // VALIDATE UGC CONSTANT NAMES BEFORE DEFINITION ESTABLISHED

    }

    public function return_encoder_wheel_output($code_controller, $background_noise = NULL, $output_length = 25){

        $tmp_output_str = '';
        $tmp_output_str_len = 0;

        //
        // BUILD STRING OF 0/1 USING $code_controller
        $tmp_code_controller_char_ARRAY = str_split($code_controller);

        foreach($tmp_code_controller_char_ARRAY as $index => $controller_char){

            $tmp_output_str_len++;
            $tmp_output_str .= self::$char_01_ARRAY[$controller_char];
            $tmp_encoder_position_ARRAY[] = self::$char_01_index_ARRAY[$controller_char];

            if($tmp_output_str_len >= $output_length){

                return $tmp_output_str;

            }

        }

        //
        // DO WE HAVE THE LENGTH?
        $tmp_delta = $output_length - strlen($tmp_output_str);
        if($tmp_delta > 0){

            if(!isset($background_noise)){

                $background_noise = $this->salt(40 + count(self::$char_01_ARRAY));

            }

        }

        $tmp_noise_ARRAY = str_split($background_noise);

        // GUARANTEE OVERFLOW OF OUTPUT LENGTH BY REPETITION OF NOISE FILL PATTERN.
        for ($i = strlen($tmp_output_str); $i < $output_length; $i++){

            //
            // USING CODE CONTROLLER CHARACTER INDEX POSITIONS AS KEY, CONCATENATE MATCHES WITH
            // BACKGROUND NOISE TO FILL ANY REMAINING LENGTH
            foreach($tmp_encoder_position_ARRAY as $index => $position){

                $tmp_output_str .= self::$char_01_ARRAY[$tmp_noise_ARRAY[$position]];

                $i++;

                if($i > $output_length) break 1;

            }

        }

        return $tmp_output_str;

    }

    private function encoder_wheel_integrations(){

        $tmp_salt_tail = $this->return_encoder_wheel_output(self::$wheel_encoder_salt, $this->hash(self::$config_serial), 10);
        self::$crnrstn_session_salt = 'crnrstn_' . $tmp_salt_tail;

    }

    private function initialize_alpha_shift_crypt($salt){

        //
        // J5, my boy!
        // INITIALIZE ALPHA SHIFT KEY
        self::$wheel_encoder_salt = $salt;

        $int_str_01 = 0;
        $char_count = 0;
        $int_str_01 = 1;

        //
        // LOAD ALPHABET
        // SOURCE :: https://www.php.net/manual/en/function.range.php
        // SOURCE :: https://stackoverflow.com/questions/431912/way-to-get-all-alphabetic-chars-in-an-array-in-php
        // COMMENT :: https://stackoverflow.com/a/431930
        // COMMENT :: https://stackoverflow.com/a/433119
        // AUTHOR :: PEZ :: https://stackoverflow.com/users/44639/pez

        $alphas = array_merge(range('A', 'Z'), range('a', 'z'));
        //error_log(__LINE__ . ' crnrstn [' . print_r($alphas, true) . ']. die();');

        //$alpha = range('A', 'Z')
        foreach($alphas as $letter){

            self::$char_01_ARRAY[$letter] = $int_str_01;
            self::$char_01_index_ARRAY[$letter] = $char_count;
            $char_count++;

            if($int_str_01 == 0){

                $int_str_01 = 1;

            }else{

                $int_str_01 = 0;

            }

        }

        //
        // LOAD NUMBERS
        foreach(range(0, 9) as $letter){

            self::$char_01_ARRAY[$letter] = $int_str_01;
            self::$char_01_index_ARRAY[$letter] = $char_count;
            $char_count++;

            if($int_str_01 == 0){

                $int_str_01 = 1;

            }else{

                $int_str_01 = 0;

            }

        }

    }

    public function config_is_valid_detected_env($env_key, $force_detection = true){

        //
        // IS THE ENVIRONMENT DETECTED?
        if(!isset(self::$env_key_hash_config_ARRAY[self::$config_serial]) && $force_detection == true){

            return false;

        }

        //
        // DOES THE DETECTED ENVIRONMENT ALIGN WITH METHOD INPUT KEY?
        if($env_key == CRNRSTN_RESOURCE_ALL || (self::$env_key_hash_config_ARRAY[self::$config_serial] == $this->hash($env_key))){

            return true;

        }

        return false;

    }

    public function config_set_timezone_default($env_key = CRNRSTN_RESOURCE_ALL, $timezone = NULL){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // CALLING METHOD (WITH NO PARAMS) WILL SYNC CRNRSTN :: TO SYSTEM TIMEZONE. RETURN CURRENT SYSTEM TIMEZONE.
                if(!isset($timezone)){

                    $tmp_timezone_name = date_default_timezone_get();
                    //self::$oCRNRSTN_CONFIG_MGR->input_data_value($tmp_timezone_name, 'timezone_default');

                    //
                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                    //
                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                    //
                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                    // - $oCRNRSTN->err_message_queue_push(),
                    // - $oCRNRSTN->err_message_queue_retrieve(),
                    // - $oCRNRSTN->err_message_queue_clear(), AND
                    // - $oCRNRSTN->get_err_message_count().
                    //
                    // Monday, December 11, 2023 @ 1057 hrs.
                    //
                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                    //		        EXPIRATION TTL.
                    //
                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_timezone_current', $tmp_timezone_name, 'theme_profile', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        throw new Exception($this->err_message_queue_retrieve());

                    }

                    return $tmp_timezone_name;

                }

                //
                // FOR LIST OF SUPPORTED TIMEZONES.
                // SEE, https://www.php.net/manual/en/timezones.php
                //self::$oCRNRSTN_CONFIG_MGR->input_data_value($timezone_id, 'timezone_default');

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // Monday, December 11, 2023 @ 1058 hrs.
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_timezone', $timezone, 'timezone_default', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

        return true;

    }

    public function set_timezone_default($timezone_id){

        self::$oCRNRSTN_CONFIG_MGR->input_data_value($timezone_id, 'timezone_default');

        //
        // LIST OF SUPPORTED TIMEZONES.
        // https://www.php.net/manual/en/timezones.php
        return date_default_timezone_set($timezone_id);

    }

    public function get_ui_theme_style(){

        foreach(self::$system_theme_style_constants_ARRAY as $index => $const){

            //
            // THIS WILL RUN LIKE ONCE OR TWICE.
            //
            // IF THE CONDITION OF THIS INTEGER IN ICY_DIGITALITCC-
            // BITMASK IS AS IT IS FLIPPED IN ITS STATE, WE WILL
            // RETURN THE WINNER.
            if($this->is_bit_set($const) == true){

                return $const;

            }

        }

        return false;

    }

    public function set_ui_theme_style($theme_profile = NULL){

        try{

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_bit', $theme_profile, 'theme_profile', 'CRNRSTN::RESOURCE', 0))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_set_ui_theme_style($env_key, $theme_profile, $crnrstn_resource_config_file_path){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_file_path', $crnrstn_resource_config_file_path, 'crnrstn_system_defaults_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_bit', $theme_profile, 'theme_profile', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function return_oLog_ProfileManager(){

        return self::$oLOG_PROFILE_MGR;

    }

    public function sync_olog_profile_manager($oLOG_PROFILE_MGR){

        self::$oLogger->sync_olog_profile_manager(self::$oLOG_PROFILE_MGR);

    }

    public function return_active_log_silo_keys(){

        return self::$oLogger->return_active_log_silo_keys();

    }

    public function get_error_log_trace($output_profile, $output_profile_override_meta, $log_silo_profile, $line_num, $method, $file, $calling_object){

        self::$oLogger->get_error_log_trace($output_profile, $output_profile_override_meta, $log_silo_profile, $line_num, $method, $file, $calling_object);

    }

    public function hello_world($type, $is_bastard = true){

        try{

            if($is_bastard == true){

                $str = 'Hello World.'; // bastard dialect

            }else{

                $str = 'Good morrow, fellow subjects of the Crown.';

            }

            error_log(__LINE__ . ' ' . get_class() . ' exception! ' . $str);
            throw new Exception('CRNRSTN :: v' . $this->version_crnrstn() . ' :: ' . $str . ' This is an exception handling test from ' . $_SERVER['SERVER_NAME'] . ' (' . $_SERVER['SERVER_ADDR'] . ').');

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }


    public function initSOAP_WSDL_connectionProfile($SOAP_endpoint, $WSDL_cache_ttl, $nusoap_useCURL){

        $this->WSDL_cache_ttl_ARRAY[$this->hash($SOAP_endpoint, 'crc32')] = $WSDL_cache_ttl;
        $this->nusoap_useCURL_ARRAY[$this->hash($SOAP_endpoint, 'crc32')] = $nusoap_useCURL;

    }

    public function initSOAP_tunnelEncryptProfile($SOAP_endpoint, $cipher_override, $secret_key_override, $hmac_algorithm_override, $options_bitwise_override){

        $this->secret_key_override_ARRAY[$this->hash($SOAP_endpoint, 'crc32')] = $secret_key_override;
        $this->cipher_override_ARRAY[$this->hash($SOAP_endpoint, 'crc32')] = $cipher_override;
        $this->hmac_algorithm_override_ARRAY[$this->hash($SOAP_endpoint, 'crc32')] = $hmac_algorithm_override;
        $this->options_bitwise_override_ARRAY[$this->hash($SOAP_endpoint, 'crc32')] = $options_bitwise_override;

    }

    public function SOAP_isset_soap_client(){

        if(isset($this->oSoapClient)){

            return $this->oSoapClient->isset_soap_client();

        }else{

            return false;

        }

    }

    public function SOAP_return_client_request(){

        try{

            if(isset($this->oSoapClient)){

                return $this->oSoapClient->returnClientRequest();

            }else{

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception('No SOAP request has been sent, leaving the oSoapClient object uninstantiated and, therefore, unable to return a client request.');

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function SOAP_return_client_response(){

        try{

            if(isset($this->oSoapClient)){

                return $this->oSoapClient->returnClientResponse();

            }else{

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception('No SOAP request has been sent, leaving the oSoapClient object uninstantiated and, therefore, unable to return a client response.');

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function SOAP_return_result(){

        try{

            if(isset($this->oSoapClient)){

                return $this->oSoapClient->returnResult();

            }else{

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception('No SOAP request has been sent, leaving the oSoapClient object uninstantiated and, therefore, unable to return a result from a SOAP server.');

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function SOAP_return_client_get_debug(){

        try{

            if(isset($this->oSoapClient)){

                return $this->oSoapClient->returnClientGetDebug();

            }else{

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception('No SOAP request has been sent, leaving the oSoapClient object uninstantiated and, therefore, unable to return any SOAP client debug information.');

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function SOAP_return_error(){

        try{

            if(isset($this->oSoapClient)){

                return $this->oSoapClient->returnError();

            }else{

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception('No SOAP request has been sent, leaving the oSoapClient object uninstantiated and, therefore, unable to return any SOAP request error information.');

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function isAuthorized_SOAP_request($CRNRSTN_SOAP_SVC_AUTH_KEY, $USERNAME, $PASSWORD, $CRNRSTN_SOAP_SVC_REQUESTED_RESOURCES, $CRNRSTN_SOAP_SVC_METHOD_REQUESTED, $CRNRSTN_SOAP_ACTION_TYPE){

        return $this->oCRNRSTN_ENV->isAuthorized_SOAP_request($CRNRSTN_SOAP_SVC_AUTH_KEY, $USERNAME, $PASSWORD, $CRNRSTN_SOAP_SVC_REQUESTED_RESOURCES, $CRNRSTN_SOAP_SVC_METHOD_REQUESTED, $CRNRSTN_SOAP_ACTION_TYPE);

    }

    public function return_sys_logging_init_profile_pack(){

        $tmp_array = array();

        if(isset(self::$system_logging_output_profile_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL])){

            //
            // PARALLEL STORAGE IN USE BY ENVIRONMENTAL CLASS OBJECT
            $tmp_array['sys_logging_profile_ARRAY'] = self::$system_logging_output_profile_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL];
            $tmp_array['sys_logging_meta_ARRAY'] = self::$sys_logging_meta_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL];
            $tmp_array['sys_logging_wcr_ARRAY'] = self::$oCRNRSTN_oWCR_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL];

        }

        return $tmp_array;

    }

    public function config_include_soap($env_key, $crnrstn_resource_config_file_path){

        //
        // CRNRSTN :: PLAID APPLICATION ACCELERATION.
        // FIRE A RRS MAP BYPASS, IF THIS IS A MAPPED RESOURCE REQUEST.
        if($this->rrs_map_is_asset_return() == true){

            //error_log(__LINE__ . ' crnrstn FIRE BYPASS :: RRS Map Application Acceleration [' . __METHOD__ . '].');
            return true;

        }

        //
        // TODO :: WE NEED TO MOVE THIS TO CMS BEHIND ADMIN LOGIN.
        //error_log(__LINE__ . ' crnrstn - [' . $env_key . '][' . $crnrstn_resource_config_file_path . ']');
        //$this->soap_permissions_file_path_ARRAY[self::$config_serial][hash(self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'][self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER]], $env_key)][] = $crnrstn_resource_config_file_path;

    }

    public function config_load_defaults_terminal($env_key, $crnrstn_resource_config_file_path){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
                if($crnrstn_resource_config_file_path !== ''){

                    $crnrstn_resource_config_file_path = $this->str_sanitize($crnrstn_resource_config_file_path, DIRECTORY_SEPARATOR);

                }

                if(is_file($crnrstn_resource_config_file_path)){

                    //
                    // ACQUIRE FILE VERSIONING CHECKSUM
                    $tmp_file_md5 = md5_file($crnrstn_resource_config_file_path);
                    self::$system_files_version_hash_ARRAY[$crnrstn_resource_config_file_path] = $tmp_file_md5;

                    //
                    // EXTRACT RESOURCE CONFIGURATION FROM FILE
                    $this->error_log('Storing file path [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    $tmp_theme_style = $this->get_ui_theme_style();
                    //self::$oCRNRSTN_CONFIG_MGR->input_data_value($dir_path, 'crnrstn_favicon_asset_map_dir_root', 'CRNRSTN::RESOURCE::ASSET_PATH');
                    self::$oCRNRSTN_CONFIG_MGR->input_data_value($crnrstn_resource_config_file_path, 'crnrstn_system_defaults_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0, CRNRSTN_AUTHORIZE_RUNTIME, NULL, false, $env_key);
                    //error_log(__LINE__ . ' LOADED $tmp_theme_style[' . $tmp_theme_style . ']. $tmp_theme_attributes_ARRAY[' . print_r($tmp_theme_attributes_ARRAY, true) . '].');
                    //error_log(__LINE__ . ' LOADED $tmp_crnrstn_settings_ARRAY[' . print_r($tmp_crnrstn_settings_ARRAY, true) . '].');
                    //$this->apply_theme_style_profile($tmp_theme_style, $crnrstn_resource_config_file_path);

                }else{

                    //
                    // WE COULD NOT FIND THE CONFIGURATION FILE
                    $this->error_log('File path data not recognized as a file. [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    //throw new Exception('Unable to process system resource for environment [' . self::$env_key_hash_config_ARRAY[self::$config_serial] . '].');

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function config_load_system_settings($env_key, $crnrstn_resource_config_file_path){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_file_path', $crnrstn_resource_config_file_path, 'crnrstn_system_settings_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function config_load_system_overrides($env_key, $crnrstn_resource_config_file_path){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                //$this->error_log('Storing file path [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
                //$this->input_data_value($crnrstn_resource_config_file_path, 'crnrstn_system_defaults_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH');

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_file_path', $crnrstn_resource_config_file_path, 'crnrstn_system_overrides_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function config_include_wordpress($env_key, $crnrstn_resource_config_file_path){

        //
        // CRNRSTN :: PLAID APPLICATION ACCELERATION.
        // FIRE A RRS MAP BYPASS, IF THIS IS A MAPPED RESOURCE REQUEST.
        if($this->rrs_map_is_asset_return() == true){

            //error_log(__LINE__ . ' crnrstn FIRE BYPASS :: RRS Map Application Acceleration [' . __METHOD__ . '].');
            return true;

        }

        $data_key = 'crnrstn_wp_config_file_path';
        $data_type_family = 'CRNRSTN::RESOURCE::WORDPRESS_CONFIG_PATH';
        $data_authorization_profile = NULL;
        $index = 0;
        $ttl = -1;
        $spool_resource = false;

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            //
            // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
            if($crnrstn_resource_config_file_path !== ''){

                $crnrstn_resource_config_file_path = $this->str_sanitize($crnrstn_resource_config_file_path, DIRECTORY_SEPARATOR);

            }

            //
            // STORE CONFIG PATH DATA.
            // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
            $this->input_data_value($crnrstn_resource_config_file_path, $data_key, $data_type_family, $index, $data_authorization_profile, $ttl, $spool_resource, self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]]);

            if(is_file($crnrstn_resource_config_file_path)){

                //
                // EXTRACT PROFILE FROM FILE
                $this->error_log('We have a file to include and process for the initialization of WordPress profiles authorized to connect to CRNRSTN :: [' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                include_once($crnrstn_resource_config_file_path);

            }else{

                $this->error_log('Unable to initialize data supporting WordPress integrations with CRNRSTN :: [' . $env_key . ']. Not a file: [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            }

        }

        return true;

    }

    public function config_include_seo_analytics($env_key, $crnrstn_resource_config_file_path){

        try{

            //
            // CRNRSTN :: PLAID APPLICATION ACCELERATION.
            // FIRE A RRS MAP BYPASS, IF THIS IS A MAPPED RESOURCE REQUEST.
            if($this->rrs_map_is_asset_return() == true){

                //error_log(__LINE__ . ' crnrstn FIRE BYPASS :: RRS Map Application Acceleration [' . __METHOD__ . '].');
                return true;

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_file_path', $crnrstn_resource_config_file_path, 'crnrstn_seo_analytics_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

//            //
//            // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
//            if($crnrstn_resource_config_file_path !== ''){
//
//                $crnrstn_resource_config_file_path = $this->str_sanitize($crnrstn_resource_config_file_path, DIRECTORY_SEPARATOR);
//
//            }
//
//            if(is_file($crnrstn_resource_config_file_path)){
//
//                self::$oCRNRSTN_CONFIG_MGR->input_data_value($crnrstn_resource_config_file_path, 'crnrstn_analytics_config_file_path', NULL, NULL, CRNRSTN_AUTHORIZE_RUNTIME, 60, false, $env_key);
//
//                //
//                // ACQUIRE FILE VERSIONING CHECKSUM
//                $tmp_file_md5 = md5_file($crnrstn_resource_config_file_path);
//                self::$system_files_version_hash_ARRAY[$crnrstn_resource_config_file_path] = $tmp_file_md5;
//
//                //
//                // EXTRACT RESOURCE CONFIGURATION FROM FILE
//                $this->error_log('Including and evaluating file [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                include_once($crnrstn_resource_config_file_path);
//
//            }else{
//
//                //
//                // WE COULD NOT FIND THE OPENSSL ENCRYPTION CONFIGURATION FILE
//                $this->error_log('File path data not recognized as a file. [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//            }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function config_include_seo_engagement($env_key, $crnrstn_resource_config_file_path){

        try{

            //
            // CRNRSTN :: PLAID APPLICATION ACCELERATION.
            // FIRE A RRS MAP BYPASS, IF THIS IS A MAPPED RESOURCE REQUEST.
            if($this->rrs_map_is_asset_return() == true){

                //error_log(__LINE__ . ' crnrstn FIRE BYPASS :: RRS Map Application Acceleration [' . __METHOD__ . '].');
                return true;

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_file_path', $crnrstn_resource_config_file_path, 'crnrstn_seo_engagement_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }
//
//            //
//            // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
//            if($crnrstn_resource_config_file_path !== ''){
//
//                $crnrstn_resource_config_file_path = $this->str_sanitize($crnrstn_resource_config_file_path, DIRECTORY_SEPARATOR);
//
//            }
//
//            if(is_file($crnrstn_resource_config_file_path)){
//
//                self::$oCRNRSTN_CONFIG_MGR->input_data_value($crnrstn_resource_config_file_path, 'crnrstn_engagement_config_file_path', NULL, NULL, CRNRSTN_AUTHORIZE_RUNTIME, 60, false, $env_key);
//
//                //
//                // ACQUIRE FILE VERSIONING CHECKSUM
//                $tmp_file_md5 = md5_file($crnrstn_resource_config_file_path);
//                self::$system_files_version_hash_ARRAY[$crnrstn_resource_config_file_path] = $tmp_file_md5;
//
//                //
//                // EXTRACT RESOURCE CONFIGURATION FROM FILE
//                $this->error_log('Including and evaluating file [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                include_once($crnrstn_resource_config_file_path);
//
//            }else{
//
//                //
//                // WE COULD NOT FIND THE OPENSSL ENCRYPTION CONFIGURATION FILE
//                $this->error_log('File path data not recognized as a file. [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//            }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function config_include_encryption($env_key, $crnrstn_resource_config_file_path){

        try{

            //
            // CRNRSTN :: PLAID APPLICATION ACCELERATION.
            // FIRE A RRS MAP BYPASS, IF THIS IS A MAPPED RESOURCE REQUEST.
            if($this->rrs_map_is_asset_return() == true){

                return true;

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_file_path', $crnrstn_resource_config_file_path, 'crnrstn_encryption_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

//                //
//                // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
//                if($crnrstn_resource_config_file_path !== ''){
//
//                    $crnrstn_resource_config_file_path = $this->str_sanitize($crnrstn_resource_config_file_path, DIRECTORY_SEPARATOR);
//
//                }
//
//                if(is_file($crnrstn_resource_config_file_path)){
//
//                    //
//                    // ACQUIRE FILE VERSIONING CHECKSUM
//                    $tmp_file_md5 = md5_file($crnrstn_resource_config_file_path);
//                    self::$system_files_version_hash_ARRAY[$crnrstn_resource_config_file_path] = $tmp_file_md5;
//
//                    //
//                    // EXTRACT RESOURCE CONFIGURATION FROM FILE
//                    $this->error_log('Including and evaluating file [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    include_once($crnrstn_resource_config_file_path);
//
//                }else{
//
//                    //
//                    // WE COULD NOT FIND THE OPENSSL ENCRYPTION CONFIGURATION FILE
//                    $this->error_log('File path data not recognized as a file. [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function config_include_system_resources($env_key, $crnrstn_resource_config_file_path){

        try{

            //
            // CRNRSTN :: PLAID APPLICATION ACCELERATION.
            // FIRE A RRS MAP BYPASS, IF THIS IS A MAPPED RESOURCE REQUEST.
            if($this->rrs_map_is_asset_return() == true){

                //error_log(__LINE__ . ' crnrstn FIRE BYPASS :: RRS Map Application Acceleration [' . __METHOD__ . '].');
                return true;

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_file_path', $crnrstn_resource_config_file_path, 'crnrstn_system_resources_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

//                //
//                // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
//                if($crnrstn_resource_config_file_path !== ''){
//
//                    $crnrstn_resource_config_file_path = $this->str_sanitize($crnrstn_resource_config_file_path, DIRECTORY_SEPARATOR);
//
//                }
//
//                if(is_file($crnrstn_resource_config_file_path)){
//
//                    //
//                    // ACQUIRE FILE VERSIONING CHECKSUM
//                    $tmp_file_md5 = md5_file($crnrstn_resource_config_file_path);
//                    self::$system_files_version_hash_ARRAY[$crnrstn_resource_config_file_path] = $tmp_file_md5;
//
//                    //
//                    // EXTRACT RESOURCE CONFIGURATION FROM FILE
//                    $this->error_log('Including and evaluating file [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    include_once($crnrstn_resource_config_file_path);
//
//                }else{
//
//                    //
//                    // WE COULD NOT FIND THE CONFIGURATION FILE
//                    $this->error_log('File path data not recognized as a file. [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    //
//                    // HOOOSTON...VE HAF PROBLEM!
//                    //throw new Exception('Unable to process system resource for environment [' . self::$env_key_hash_config_ARRAY[self::$config_serial] . '].');
//
//                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

//    public function embryonic_init_crnrstn_tmp_dir($dir_path){
//
//        if(is_dir($dir_path)){
//
//            self::$crnrstn_tmp_dir = rtrim($dir_path,DIRECTORY_SEPARATOR);
//            $this->error_log('Embryonic /tmp directory path ' . $dir_path . ' has been stored.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//        }else{
//
//            $this->error_log('Skipping embryonic /tmp directory path, ' . $dir_path . '. This has not been applied.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//        }
//
//    }

    public function apply_theme_style_profile($theme_profile, $crnrstn_resource_config_file_path = NULL){

        if(!isset($crnrstn_resource_config_file_path)){

            //
            // RETRIEVE FILE PATH FOR THEME SETTINGS CONFIGURATION FROM SYSTEM CONFIG.
            $crnrstn_resource_config_file_path = $this->get_resource('crnrstn_system_defaults_config_file_path', 0, 'CRNRSTN::RESOURCE::ASSET_PATH');

        }

        try{

            $tmp_theme_attributes_ARRAY = array();

            require($crnrstn_resource_config_file_path);

            $this->theme_attributes_ARRAY = $tmp_theme_attributes_ARRAY;

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

//    public function return_theme_style_profile_ARRAY(){
//
//        return self::$system_theme_style_constants_ARRAY;
//
//    }

    public function return_tmp(){

        if(isset(self::$crnrstn_tmp_dir)){

            return self::$crnrstn_tmp_dir;

        }else{

            return false;

        }

    }

    public function return_module_deep_link_token($module_key, $token_override = NULL, $html_encapsulate = true){

        //
        // IS THIS THE FIRST TOKEN?
        if(!isset($this->content_token_index)){

            $this->content_token_index = -1;

        }

        //
        // GENERATE NEXT TOKEN.
        $this->content_token_index++;

        if(!isset($token_override)){

            $tmp_token_seed = $this->hash($module_key . '_' . $this->content_token_index);
            //error_log(__LINE__ . ' ['.$module_key.']. $this->content_token_index['.$this->content_token_index.']. $tmp_token_seed['.$tmp_token_seed.'].');

        }else{

            $tmp_token_seed = $this->hash($module_key . '_' . $token_override . '_' . $this->content_token_index);
            //error_log(__LINE__ . ' ['.$module_key.']. $this->content_token_index['.$this->content_token_index.']. $tmp_token_seed['.$tmp_token_seed.'].');

        }

        $tmp_token_seed = $this->return_encoder_wheel_output($tmp_token_seed, NULL, strlen($tmp_token_seed));

        if(!($html_encapsulate == true)){

            return $tmp_token_seed;

        }

        //
        // THIS WILL SALT THE CONTENT TO SUPPORT STRING COMPARISON CHECKS DURING JS DRIVEN STYLING AT THE CLIENT AND
        // FOR USE IN (SEARCH RESULT, DOCS) SO THAT DEEP LINKS WILL HAVE AN ANCHOR TO WHICH TO AUTO-SCROLL TO AFTER THE
        // PAGE LOADS. SEARCH "CRAWL" WILL STRIP THESE LINKS OUT AUTOMATICALLY AND USE THE DATA TO BUILD THE DEEP LINK.
        $tmp_out_html = '<span class="crnrstn_hidden"><a name="crnrstn_tokenized_top_' . $tmp_token_seed . '"> ' . $tmp_token_seed . '</a></span>';

        return $tmp_out_html;

    }

//	public function embryonic_init_logging($CRNRSTN_log_silo_profile, $profile_meta = NULL){
//
//        self::$oCRNRSTN_BITFLIP_MGR->initialize_bit($CRNRSTN_log_silo_profile, true);
//
//        self::$system_logging_output_profile_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL][] = $CRNRSTN_log_silo_profile;
//
//        if(isset($profile_meta)){
//
//            self::$sys_logging_meta_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL][] = $profile_meta;
//
//        }else{
//
//            self::$sys_logging_meta_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL][] = '0';
//
//        }
//
//        //
//        // PROCESS META DATA
//        $this->error_log('Embryonic logging profile data (int) ' . $CRNRSTN_log_silo_profile . ' has been received.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//    }

    public function save_wildcard_resource($oWildCardResource){

        $this->sync_wild_card_resource_oARRAY($oWildCardResource);

    }

    private function sync_wild_card_resource_oARRAY($oWCR){

        //
        // TODO :: DECOUPLE WCR ARCHITECTURE FROM CRNRSTN :: LOGGING.
        if(isset(self::$oCRNRSTN_oWCR_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL])){

            $tmp_ARRAY = self::$oCRNRSTN_oWCR_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL];
            $tmp_ARRAY[$oWCR->return_resource_key()] = $oWCR;
            self::$oCRNRSTN_oWCR_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL] = $tmp_ARRAY;

        }else{

            $tmp_ARRAY = array();
            $tmp_ARRAY[$oWCR->return_resource_key()] = $oWCR;
            self::$oCRNRSTN_oWCR_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL] = $tmp_ARRAY;

        }

    }

    public function return_wcr_ARRAY(){

        error_log(__LINE__ . ' crnrstn oWCR [' . print_r(self::$oCRNRSTN_oWCR_ARRAY, true) . '].');
        return self::$oCRNRSTN_oWCR_ARRAY[self::$config_serial][CRNRSTN_LOG_ALL];

    }

    public function return_m_start_time(){

        return self::$m_starttime;

    }

    private function config_enable_database_table_replication($env_key, $is_enabled = true, $origin_url = NULL){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            //
            // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
            // # # C # R # N # R # S # T # N # : : # # # #
            // CRNRSTN :: UGC DATA INPUT [SYSTEM_EMAIL]
            $this->input_data_value($is_enabled, 'crnrstn_database_table_replication_is_enabled', 'CRNRSTN::RESOURCE::REPLICATION');
            $this->input_data_value($origin_url, 'crnrstn_database_table_replication_origin_url', 'CRNRSTN::RESOURCE::REPLICATION');

        }

    }

    public function config_admin_email($env_key, $email_data = NULL, $max_login_attempts = 10, $timeout_user_inactive = 900){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        //if($this->config_is_valid_detected_env($env_key) == true){

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // Monday, December 11, 2023 @ 1234 hrs. and 56 secs.
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_admin_email', $email_data, 'email_data', 'CRNRSTN::RESOURCE::CONFIGURATION'))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_admin_email', $max_login_attempts, 'max_login_attempts', 'CRNRSTN::RESOURCE::CONFIGURATION'))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_admin_email', $timeout_user_inactive, 'timeout_user_inactive', 'CRNRSTN::RESOURCE::CONFIGURATION'))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

//            //
//            // FORMAT EMAIL DATA INTO ARRAY.
//            $tmp_email_ARRAY = $this->return_ugc_email_data_profile_ARRAY($email_data);
//            $tmp_data_type_family = 'CRNRSTN::RESOURCE::ADMINISTRATION';
//
//            $tmp_count_email = count($tmp_email_ARRAY['EMAIL']);
//            for($i = 0; $i < $tmp_count_email; $i++){
//
//                //error_log(__LINE__ . ' crnrstn name[' . trim($tmp_email_ARRAY['RECIPIENT_NAME'][$i]) . '] email[' . $this->str_sanitize($tmp_email_ARRAY['EMAIL'][$i], 'email_private') . '].');
//
//                //
//                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
//                // # # C # R # N # R # S # T # N # : : # # # #
//                // CRNRSTN :: UGC DATA INPUT [SYSTEM_EMAIL]
//                $this->input_data_value($env_key, 'crnrstn_system_admin_email_env_key', $tmp_data_type_family);
//
//                $this->input_data_value($tmp_email_ARRAY['EMAIL'][$i], 'crnrstn_system_admin_email_email', $tmp_data_type_family);
//                $this->input_data_value($this->str_sanitize($tmp_email_ARRAY['EMAIL'][$i], 'email_private'), 'crnrstn_system_admin_email_email_display', $tmp_data_type_family);
//                $this->input_data_value($tmp_email_ARRAY['RECIPIENT_NAME'][$i], 'crnrstn_system_admin_email_recipient_name', $tmp_data_type_family);
//
//                $this->input_data_value($max_login_attempts, 'crnrstn_system_admin_email_login_attempts', $tmp_data_type_family);
//                $this->input_data_value($timeout_user_inactive, 'crnrstn_system_admin_email_inactive', $tmp_data_type_family);
//
//                if(strlen($tmp_email_ARRAY['RECIPIENT_NAME'][$i]) > 0){
//
//                    $this->error_log('Storing administrative contact profile information [' . $tmp_email_ARRAY['RECIPIENT_NAME'][$i] . ', ' . $this->str_sanitize($tmp_email_ARRAY['EMAIL'][$i], 'email_private') . '] in memory for environment key [' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                }else{
//
//                    $this->error_log('Storing administrative contact profile information [' . $this->str_sanitize($tmp_email_ARRAY['EMAIL'][$i], 'email_private') . '] in memory for environment key [' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                }
//
//            }

            //$tmp_messenger_from_north_serial = $this->generate_new_key(50);
            //$oCRNRSTN_GABRIEL = $this->initialize_oGabriel($tmp_messenger_from_north_serial);
            //$oCRNRSTN_GABRIEL->addAddress($email_data, $recipient_name);

        //}

    }

    private function initialize_oGabriel($messenger_serial, $mail_protocol = 'MAIL', $smtp_username = NULL, $smtp_password = NULL, $smtp_port = NULL){

        //
        // BRING IN THE MESSENGER
        // Luke 1:19, 26; Daniel 8:16; 9:21-22
        $oCRNRSTN_GABRIEL = new crnrstn_messenger_from_north($messenger_serial, $mail_protocol, $smtp_username, $smtp_password, $smtp_port, $this);

        $this->oMessenger_ARRAY[$oCRNRSTN_GABRIEL->messenger_serial] = $oCRNRSTN_GABRIEL;

        return $oCRNRSTN_GABRIEL;

    }

    public function return_ugc_email_data_profile_ARRAY($ugc_email_data){

        $tmp_comma_cnt = 0;
        $tmp_email_address_count = 0;
        $tmp_email_ARRAY = array();
        $tmp_email_ARRAY['RECIPIENT_NAME'][$tmp_email_address_count] = ' ';

        //
        // CHECK FOR TWO COMMA DELIMITED USE-CASES?
        // 1){name}, {EMAIL}
        // 2){name} {EMAIL}, {name} {EMAIL}, {EMAIL}, {EMAIL},...
        $tmp_pos_comma = strpos($ugc_email_data, ',');

        if($tmp_pos_comma !== false){

            //
            // COMMA DELIMITED EMAIL DATA.
            $tmp_email_explode_ARRAY = explode(',', $ugc_email_data);
            $tmp_comma_cnt = count($tmp_email_explode_ARRAY);

            foreach($tmp_email_explode_ARRAY as $email_index => $email_data){

                $tmp_pos_at = strpos($ugc_email_data, '@');
                $tmp_pos_space = strpos($ugc_email_data, ' ');
                if($tmp_pos_space !== false){

                    $tmp_email_spaced_data_ARRAY = explode(' ', $email_data);

                    foreach($tmp_email_spaced_data_ARRAY as $tmp_email_spaced_index => $tmp_email_spaced_data){

                        $tmp_pos_spaced_at = strpos($tmp_email_spaced_data, '@');

                        if($tmp_pos_spaced_at !== false){

                            //
                            // STORE EMAIL ADDRESS.
                            $tmp_email_ARRAY['EMAIL'][$tmp_email_address_count] = $tmp_email_spaced_data;
                            $tmp_email_address_count++;

                            if($tmp_email_address_count < ($tmp_comma_cnt)){

                                $tmp_email_ARRAY['RECIPIENT_NAME'][$tmp_email_address_count] = ' ';

                            }

                        }else{

                            if(isset($tmp_email_ARRAY['RECIPIENT_NAME'][$tmp_email_address_count])){

                                $tmp_email_ARRAY['RECIPIENT_NAME'][$tmp_email_address_count] .= $tmp_email_spaced_data . ' ';

                            }

                        }

                    }

                }else{

                    if($tmp_pos_at !== false){

                        //
                        // STORE EMAIL ADDRESS.
                        $tmp_email_ARRAY['EMAIL'][$tmp_email_address_count] = $tmp_email_spaced_data;
                        $tmp_email_address_count++;

                    }else{

                        //
                        // RECIPIENT NAME WITH NO EMAIL ADDRESS.

                    }

                }

            }

        }else{

            //
            // NO COMMA IN DATA.
            $tmp_pos_at = strpos($ugc_email_data, '@');
            $tmp_pos_space = strpos($ugc_email_data, ' ');

            if($tmp_pos_space !== false){

                //
                // SPACE IN DATA. CAN BE EMAIL AND NAME MIXTURE....OR EVEN EMAILS SEPARATED BY SPACES...DOH!
                // {NAME} {EMAIL}
                $tmp_email_spaced_data_ARRAY = explode(' ', $ugc_email_data);

                foreach($tmp_email_spaced_data_ARRAY as $tmp_email_spaced_index => $tmp_email_spaced_data){

                    $tmp_pos_spaced_at = strpos($tmp_email_spaced_data, '@');

                    //
                    // IS THIS EMAIL DATA?
                    if($tmp_pos_spaced_at !== false){

                        //
                        // STORE EMAIL ADDRESS.
                        $tmp_email_ARRAY['EMAIL'][$tmp_email_address_count] = $tmp_email_spaced_data;
                        $tmp_email_address_count++;

                        if($tmp_email_address_count < ($tmp_comma_cnt - 1)){

                            $tmp_email_ARRAY['RECIPIENT_NAME'][$tmp_email_address_count] = ' ';

                        }

                    }else{

                        //
                        // STORE RECIPIENT NAME.
                        if(isset($tmp_email_ARRAY['RECIPIENT_NAME'][$tmp_email_address_count])){

                            $tmp_email_ARRAY['RECIPIENT_NAME'][$tmp_email_address_count] .= $tmp_email_spaced_data . ' ';

                        }

                    }

                }

            }else{

                if($tmp_pos_at !== false){

                    //
                    // STORE EMAIL ADDRESS.
                    $tmp_email_ARRAY['EMAIL'][$tmp_email_address_count] = $ugc_email_data;

                }

            }

        }

        return $tmp_email_ARRAY;

    }

    private function config_add_database_table_profile($env_key = CRNRSTN_RESOURCE_ALL, $table_prefix = 'crnrstn_', $logs_rollover_mode = CRNRSTN_DB_LOG_TABLES_NO_ROLLOVER, $storage_engine = 'InnoDB', $collation = 'utf8_unicode_ci', $max_log_table_records = -1){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $this->oMYSQLI_CONN_MGR->add_database_table_profile($env_key, $table_prefix, $logs_rollover_mode, $storage_engine, $collation, $max_log_table_records);

        }

    }

    private function config_add_database_connection($env_key, $host, $un, $pwd, $db, $port = NULL){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_database', $host, 'host', 'CRNRSTN::RESOURCE::DATABASE'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_database', $un, 'un', 'CRNRSTN::RESOURCE::DATABASE'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_database', $pwd, 'pwd', 'CRNRSTN::RESOURCE::DATABASE'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_database', $db, 'db', 'CRNRSTN::RESOURCE::DATABASE'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_database', $port, 'port', 'CRNRSTN::RESOURCE::DATABASE'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // Thursday, August 4, 2022 @ 0450 hrs.
                // $this->oMYSQLI_CONN_MGR->add_connection($env_key, $host, $un, $pwd, $db, $port);

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_html_mode_email($env_key = CRNRSTN_RESOURCE_ALL, $is_HTML = true){

        try{

            /*
            Configure is_HTML setting for CRNRSTN :: system email (PHPMailer) settings.
            CRNRSTN_SYSTEM_EMAIL_IS_HTML

            */

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $is_HTML, 'email_html_mode_is_html', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_js_css_minimization($env_key = CRNRSTN_RESOURCE_ALL, $production_min_js = true){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            //if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $production_min_js, 'production_min_js', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            //}

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_asset_map_favicon($env_key = CRNRSTN_RESOURCE_ALL, $tunneling_active = true, $dir_path = '', $http_path = ''){

        /*
        Configure image routing profile for CRNRSTN :: FAVICON.
        CRNRSTN_FAVICON_ASSET_MAPPING

        */

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $tunneling_active, 'tunneling_active', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $dir_path, 'crnrstn_favicon_asset_map_dir_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $http_path, 'crnrstn_favicon_asset_map_http_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_asset_map_css($env_key = CRNRSTN_RESOURCE_ALL, $tunneling_active = true, $dir_path = '', $http_path = ''){


        try{

            /*
            Configure image routing profile for CRNRSTN :: system notifications.
            CRNRSTN_CSS_ASSET_MAPPING

            */

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            //if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $tunneling_active, 'tunneling_active', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $dir_path, 'crnrstn_css_asset_map_dir_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $http_path, 'crnrstn_css_asset_map_http_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            //}

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_asset_map_js($env_key = CRNRSTN_RESOURCE_ALL, $tunneling_active = true, $dir_path = '', $http_path = ''){

        try{

            /*
            Configure image routing profile for CRNRSTN :: system notifications.
            CRNRSTN_JS_ASSET_MAPPING

            */
            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $tunneling_active, 'tunneling_active', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $dir_path, 'crnrstn_js_asset_map_dir_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $http_path, 'crnrstn_js_asset_map_http_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_asset_map_system_img($env_key = CRNRSTN_RESOURCE_ALL, $tunneling_active = true, $dir_path = '', $http_path = ''){

        try{

            /*
            Configure image routing profile for CRNRSTN :: system notifications.
            CRNRSTN_SYSTEM_IMG_ASSET_MAPPING

            */
            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $tunneling_active, 'tunneling_active', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $dir_path, 'crnrstn_system_asset_map_dir_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // Monday, December 11, 2023 @ 1120 hrs.
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $http_path, 'crnrstn_system_asset_map_http_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_asset_map_social_img($env_key = CRNRSTN_RESOURCE_ALL, $tunneling_active = true, $dir_path = '', $http_path = ''){

        try{

            /*
            Configure image routing profile for CRNRSTN :: system notifications.
            CRNRSTN_SOCIAL_IMG_ASSET_MAPPING

            */
            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // Monday, December 11, 2023 @ 1120 hrs.
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $tunneling_active, 'tunneling_active', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // Monday, December 11, 2023 @ 1120 hrs.
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $dir_path, 'crnrstn_social_asset_map_dir_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $http_path, 'crnrstn_social_asset_map_http_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_asset_map_meta_img($env_key = CRNRSTN_RESOURCE_ALL, $tunneling_active = true, $dir_path = '', $http_path = ''){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $tunneling_active, 'tunneling_active', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $dir_path, 'crnrstn_meta_preview_asset_map_dir_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $http_path, 'crnrstn_meta_preview_asset_map_http_root', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_sys_resp_return_profile($env_key = CRNRSTN_RESOURCE_ALL, $system_asset_mode = CRNRSTN_ASSET_MODE_BASE64, $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME){

        try{

            /*
            Configure the HTML email image handling profile for CRNRSTN :: system notifications.
            CRNRSTN_ASSET_MODE_PNG
            CRNRSTN_ASSET_MODE_JPEG
            CRNRSTN_ASSET_MODE_BASE64

            CLEAR OUT ANY FLIPPED BITS AND THEN FLIP $system_asset_mode.
            $this->system_output_profile_constants

            */
            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_bit', $system_asset_mode, 'system_asset_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $data_authorization_profile, 'crnrstn_data_authorization_profile', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_file_system_integrations($env_key = CRNRSTN_RESOURCE_ALL, $disk_write_authorization = true, $disk_percent_full_warning_override = NULL, $disk_percent_full_max_override = NULL){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $disk_write_authorization, 'disk_write_authorization', 'CRNRSTN::RESOURCE::DISK_STORAGE', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_percentage', $disk_percent_full_warning_override, 'disk_percent_full_warning_override', 'CRNRSTN::RESOURCE::DISK_STORAGE', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_percentage', $disk_percent_full_max_override, 'disk_percent_full_max_override', 'CRNRSTN::RESOURCE::DISK_STORAGE', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_http($env_key = CRNRSTN_RESOURCE_ALL, $crnrstn_http_endpoint = '', $crnrstn_dir_path = '', $crnrstn_system_directory = '_crnrstn'){

        try{

            if($crnrstn_http_endpoint == ''){

                if($this->is_ssl() == true){

                    $crnrstn_http_endpoint = 'https://' . $_SERVER['SERVER_ADDR'] . '/';

                }else{

                    $crnrstn_http_endpoint = 'http://' . $_SERVER['SERVER_ADDR'] . '/';

                }

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            //if($this->config_is_valid_detected_env($env_key) == true){

                //
                // HTTP PATH. PLEASE GUARANTEE TRAILING SLASH.
                $http_slash_char = '/';
                $tmp_clean_crnrstn_dir_path = '';

                //
                // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
                if($crnrstn_dir_path !== ''){

                    $tmp_clean_crnrstn_dir_path = $this->str_sanitize($crnrstn_dir_path, DIRECTORY_SEPARATOR);

                }

                //
                // DIR PATH.
                $tmp_ugc_system_dir = ltrim($crnrstn_system_directory, '\\');
                $tmp_ugc_system_dir = ltrim($tmp_ugc_system_dir, '/');

                //
                // SHOULD BE GUARANTEED TO HAVE ONE TRAILING SLASH.
                $crnrstn_http_endpoint = $this->strrtrim($crnrstn_http_endpoint, $http_slash_char);
                $crnrstn_http_endpoint = $this->strrtrim($crnrstn_http_endpoint, DIRECTORY_SEPARATOR . $tmp_ugc_system_dir);
                $crnrstn_http_endpoint = $this->strrtrim($crnrstn_http_endpoint, $http_slash_char);
                $crnrstn_http_endpoint .= $http_slash_char;

                //
                // CRNRSTN :: INTEGRATIONS SUPPORT.
                // NO SLASH PLEASE. FOR FULL OS SUPPORT, MIND THE SLASH TYPE ON PATHS.
                $crnrstn_path_dir = $this->strrtrim($tmp_clean_crnrstn_dir_path, $http_slash_char);
                $crnrstn_path_dir = $this->strrtrim($crnrstn_path_dir, DIRECTORY_SEPARATOR . $tmp_ugc_system_dir);
                $crnrstn_path_dir = $this->strrtrim($crnrstn_path_dir, $http_slash_char);

                //
                // NO SLASH PLEASE.
                $crnrstn_system_directory = $this->strrtrim($crnrstn_system_directory, $http_slash_char);

                //
                // FOR FULL OS SUPPORT, I BELIEVE WE NEED TWO STRING PATTERN FILTERS HERE.
                $crnrstn_path_dir = $this->strrtrim($crnrstn_path_dir, DIRECTORY_SEPARATOR . $tmp_ugc_system_dir);
                $crnrstn_path_dir = $this->strrtrim($crnrstn_path_dir, DIRECTORY_SEPARATOR . $tmp_ugc_system_dir);
                $crnrstn_path_dir = $this->strrtrim($crnrstn_path_dir, $http_slash_char);
                $crnrstn_path_dir = $crnrstn_path_dir . DIRECTORY_SEPARATOR . $crnrstn_system_directory . DIRECTORY_SEPARATOR . 'ui';

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $crnrstn_http_endpoint, 'crnrstn_http_endpoint', 'CRNRSTN::RESOURCE::HTTP_IMAGES', 0, ''))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                error_log(__LINE__ .  ' ' . __METHOD__ . '  SPOOL[?] $crnrstn_path_dir[' . $crnrstn_path_dir . ']. SEE config_ugc_input_clean_data(' . __FUNCTION__ . '_string).');
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $crnrstn_path_dir, 'crnrstn_path_directory', 'CRNRSTN::RESOURCE::HTTP_IMAGES', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                error_log(__LINE__ . ' ' . __METHOD__ . '  SPOOL[?] $crnrstn_system_directory[' . $crnrstn_system_directory . '].');
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $crnrstn_system_directory, 'crnrstn_system_directory', 'CRNRSTN::RESOURCE::HTTP_IMAGES', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $crnrstn_path_dir, 'crnrstn_integrations_asset_map_dir_path', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            //}

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function crnrstn_http_endpoint($url_override = NULL){

        if(isset($url_override)){

            if(strlen($url_override) > 0){

                return $url_override;

            }

        }

        return $this->get_resource('crnrstn_http_endpoint', 0, 'CRNRSTN::RESOURCE::HTTP_IMAGES');

    }

    public function crnrstn_path_directory(){

        return $this->get_resource('crnrstn_path_directory', 0, 'CRNRSTN::RESOURCE::HTTP_IMAGES');

    }

    public function crnrstn_root_directory(){

        return $this->get_resource('crnrstn_root_directory', 0, 'CRNRSTN::RESOURCE::HTTP_IMAGES');

    }

    public function config_custom_error_handler($env_key = CRNRSTN_RESOURCE_ALL, $crnrstn_error_handling = true, $err_reporting_profile_override = NULL){

        $tmp_env_key_hash = $this->hash($env_key);
        //$this->crnrstn_as_error_handler_ARRAY[self::$config_serial][$tmp_env_key_hash] = $crnrstn_is_active;
        //$this->crnrstn_as_error_handler_constants_ARRAY[self::$config_serial][$tmp_env_key_hash] = $err_reporting_profile_override;

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $crnrstn_error_handling, 'crnrstn_error_handling', 'CRNRSTN::RESOURCE::CUSTOM_ERROR_HANDLING', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $err_reporting_profile_override, 'err_reporting_profile_override', 'CRNRSTN::RESOURCE::CUSTOM_ERROR_HANDLING', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                return $this->crnrstn_custom_error_handler();

            }

            //
            // WE DON'T HAVE THE ENVIRONMENT, BUT DETECTION WOULD HAVE ALREADY BEEN COMPLETED.
            //throw new Exception('Unable to initialize...');
            $this->error_log('Bypassed initialization of CRNRSTN :: as error handler for environment [' . $tmp_env_key_hash . '/' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    private function crnrstn_custom_error_handler(){

        //
        // APPLY SERVER ERROR HANDLING PER
        // SETTINGS RECEIVED THROUGH $oCRNRSTN->config_custom_error_handler();
        if($tmp_result = self::$oCRNRSTN_PERFORMANCE_REGULATOR->crnrstn_custom_error_handler()){

            return $this->apply_CRNRSTN_asErrorHandler($tmp_result);

        }

        return true;

    }

    private function apply_CRNRSTN_asErrorHandler($err_reporting_profile = NULL){

        if(isset($err_reporting_profile)){

            //
            // SOURCE :: https://stackoverflow.com/questions/1241728/can-i-try-catch-a-warning
            // COMMENT :: https://stackoverflow.com/a/1241751
            // AUTHOR :: Philippe Gerber :: https://stackoverflow.com/users/117260/philippe-gerber
            // SET TO THE USER DEFINED ERROR HANDLER
            $old_error_handler = set_error_handler(function ($errno, $errstr, $errfile, $errline, $errcontext){

                try{

                    // error was suppressed with the @-operator
                    if(0 === error_reporting()){

                        return false;

                    }

                    if(is_array($_SESSION['CRNRSTN_ERROR_PREFIX_' . self::$config_serial]['CRNRSTN_EXCEPTION_PREFIX']['SYSTEM_ID'])){

                        $errstr = '';

                        foreach($_SESSION['CRNRSTN_ERROR_PREFIX_' . self::$config_serial]['CRNRSTN_EXCEPTION_PREFIX']['SYSTEM_ID'] as $log_index => $log_data){

                            $errstr .= $log_data;

                        }

                    }else{

                        $errstr = $_SESSION['CRNRSTN_ERROR_PREFIX_' . self::$config_serial]['CRNRSTN_EXCEPTION_PREFIX']['SYSTEM_ID'] . $errstr;

                    }

                    //
                    // CLEAR THE SESSION OF SYSTEM MESSAGE DATA.
                    array_splice($_SESSION['CRNRSTN_ERROR_PREFIX_' . self::$config_serial]['CRNRSTN_EXCEPTION_PREFIX']['SYSTEM_ID'], 0);

                    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);

                }catch(Exception $e){

                    //
                    // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
                    $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

                    return false;

                }

            }, (int)$err_reporting_profile);

        }else{

            $old_error_handler = set_error_handler(function ($errno, $errstr, $errfile, $errline, $errcontext){

                try{

                    // error was suppressed with the @-operator
                    if(0 === error_reporting()){

                        return false;

                    }

                    if(is_array($_SESSION['CRNRSTN_ERROR_PREFIX_' . self::$config_serial]['CRNRSTN_EXCEPTION_PREFIX']['SYSTEM_ID'])){

                        $errstr = '';

                        foreach($_SESSION['CRNRSTN_ERROR_PREFIX_' . self::$config_serial]['CRNRSTN_EXCEPTION_PREFIX']['SYSTEM_ID'] as $log_index => $log_data){

                            $errstr .= $log_data;

                        }

                    }else{

                        $errstr = $_SESSION['CRNRSTN_ERROR_PREFIX_' . self::$config_serial]['CRNRSTN_EXCEPTION_PREFIX']['SYSTEM_ID'] . $errstr;

                    }

                    //
                    // CLEAR THE SESSION OF SYSTEM MESSAGE DATA.
                    array_splice($_SESSION['CRNRSTN_ERROR_PREFIX_' . self::$config_serial]['CRNRSTN_EXCEPTION_PREFIX']['SYSTEM_ID'], 0);

                    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);

                }catch(Exception $e){

                    //
                    // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
                    $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

                    return false;

                }

            });

        }

        return true;

    }

    public function err_message_queue_push($message_serial = NULL, $message = NULL, $data_authorization_profile = CRNRSTN_CHANNEL_SESSION){

        return self::$oLogger->err_message_queue_push($message_serial, $message, $data_authorization_profile);

    }

    public function err_message_queue_retrieve($message_override = NULL, $message_serial = NULL, $index = 0){

        return self::$oLogger->err_message_queue_retrieve($message_override, $message_serial, $index);

    }

    public function err_message_queue_clear($message_serial = NULL){

        return self::$oLogger->err_message_queue_clear($message_serial);

    }

    public function get_err_message_count($message_serial = NULL){

        return self::$oLogger->get_err_message_count($message_serial);

    }

    public function config_add_environment($env_key, $err_reporting_profile = E_ALL & ~E_NOTICE & ~E_STRICT, $crnrstn_debug_mode_override = CRNRSTN_DEBUG_OFF, $system_html_comments_mode = CRNRSTN_HTML_COMMENTS_FULL){
        // WHERE $crnrstn_debug_mode_override = [CRNRSTN_DEBUG_OFF, CRNRSTN_DEBUG_NATIVE_ERR_LOG, CRNRSTN_DEBUG_AGGREGATION_ON]
        // WHERE $system_html_comments_mode = [CRNRSTN_HTML_COMMENTS_FULL, CRNRSTN_HTML_COMMENTS_NONE, CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED]

        //
        // Tuesday, September 5, 2023 @ 1908 hrs.
        //
        // CRNRSTN :: CDN HTML STABILITY CONTROL
        //
        // WHEN CRNRSTN :: CDN HTML STABILITY CONTROL IS ENABLED,
        // TIMESTAMPS ARE REMOVED FROM THE HTML CODE COMMENTS THAT
        // ACCOMPANY CRNRSTN :: HTML CONTENT INJECTIONS.
        //
        // CRNRSTN :: CDN HTML STABILITY CONTROL SUPPORTS BUILDING
        // CLEANER HTML THAT IS MORE OR LESS...AND SIMPLY
        // PUT...TIMELESS. AND THIS IS NOT THE END YET; WITH
        // STABILITY CONTROL ENABLED, CRNRSTN :: WILL STILL BUILD
        // THE SAME HTML THAT WILL BE HAVING THE SAME CONFIGURED
        // ANALYTICS, ENGAGEMENT, META, AND FRAMEWORK INTEGRATIONS
        // COMPONENTS THAT THE WORLD (WIDE WEB) HAS COME TO KNOW
        // AND LOVE TODAY.
        //
        // SEE $crnrstn_html_comments_mode = CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED.

        try{

            $env_key_hash = $this->hash($env_key);

            $this->error_log('Environment key [' . $env_key . '] converts to checksum [' . $env_key_hash . '] and will be referenced as such from time to time. ', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            if(!isset($this->env_err_reporting_profile_ARRAY[self::$config_serial][$env_key_hash])){
                //if(!($this->isset_resource('data_value', 'err_reporting_profile', 'CRNRSTN::RESOURCE::CONFIGURATION') !== false)){

                // is_resource_serialization_active($data_type, $channel);
                // $tmp_ = $this->get_resource('err_reporting_profile', 0, 'CRNRSTN::RESOURCE::CONFIGURATION');
                // $tmp_ = $this->get_resource_count('err_reporting_profile', 'CRNRSTN::RESOURCE::CONFIGURATION');
                // if($this->isset_resource('data_value', 'err_reporting_profile', 'CRNRSTN::RESOURCE::CONFIGURATION') == true)
                //
                // $this->env_err_reporting_profile_ARRAY[self::$config_serial][$env_key_hash] = $err_reporting_profile;

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer_mode', $err_reporting_profile, 'err_reporting_profile', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer_mode', $crnrstn_debug_mode_override, 'crnrstn_debug_mode_override', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                $this->env_html_comments_mode_ARRAY[self::$config_serial][$env_key_hash] = $system_html_comments_mode;

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer_mode', $system_html_comments_mode, 'system_html_comments_mode', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                self::$env_detect_ARRAY[self::$config_serial][$env_key_hash] = 0;

                $this->error_log('Storing environment [' . $env_key . '|' . $env_key_hash . '] in memory.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            }else{

                //
                // THIS KEY HAS ALREADY BEEN INITIALIZED.
                $this->error_log('WARNING :: The environmental key [' . $env_key . '] has already been initialized. hash=[' . $env_key_hash . '.]', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
                //throw new Exception('CRNRSTN :: initialization warning :: This environmental key (' . $env_key . '|' . $env_key_hash . ') has already been initialized.');

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    public function config_init_logging($env_key = CRNRSTN_RESOURCE_ALL, $system_logging_output_profile = CRNRSTN_LOG_DEFAULT, $profile_meta = NULL){

        $tmp_env_hash = $this->hash($env_key);

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            //
            // LET'S STRENGTHEN AND ENRICH THE
            // CRNRSTN :: SOAP SERVICES LOGGING
            // SERVICES LAYER.
            //
            // Sunday, December 3, 2023 @ 0023 hrs.
            //
            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_soap_logging_soap_service', $system_logging_output_profile, 'system_logging_output_profile', 'CRNRSTN::RESOURCE::CONFIGURATION'))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_soap_logging_soap_service', $profile_meta, 'system_logging_profile_meta', 'CRNRSTN::RESOURCE::CONFIGURATION'))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }
//
//            //
//            // PROCESS BITWISE DATA DO THIS AFTER ENVIRONMENTAL DETECTION
//            //self::$oCRNRSTN_BITFLIP_MGR->oCRNRSTN_BITWISE->set($logging_output_profile, true);
//            //error_log(__LINE__ .' '. __METHOD__ .' crnrstn_environment to receive logging array[' . $this->crcINT($this->config_serial).'][' . $this->crcINT($env_key).']=[' . $logging_output_profile . ']');
//            self::$system_logging_output_profile_ARRAY[self::$config_serial][$tmp_env_hash][] = $logging_output_profile;
//
//            if(isset($profile_meta)){
//
//                self::$sys_logging_meta_ARRAY[self::$config_serial][$tmp_env_hash][] = $profile_meta;
//
//            }else{
//
//                self::$sys_logging_meta_ARRAY[self::$config_serial][$tmp_env_hash][] = '0';
//
//            }
//
//            //
//            // PROCESS META DATA
//            $this->error_log('Logging profile data has been received for [' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

        }

        return true;

    }

    public function return_logging_profile($env_key){

        //
        // SESSION DRIVEN RRS MAP ASSET RETURNS (E.G. IMAGE FROM A LINK) HAPPEN BEFORE LOGGING CONFIGURATION. THE ENV
        // CLASS OBJECT INSTANTIATION (USED FOR BUILDING RESPONSE HEADER) EXPOSES THIS MISSING CONFIG DATA.
        if(!isset(self::$system_logging_output_profile_ARRAY[self::$config_serial][$env_key])){

            return CRNRSTN_LOG_DEFAULT;

        }

        return self::$system_logging_output_profile_ARRAY[self::$config_serial][$env_key];

    }

    public function return_logging_meta($env_key){

        //
        // SESSION DRIVEN RRS MAP ASSET RETURNS (E.G. IMAGE FROM A LINK) HAPPEN BEFORE LOGGING CONFIGURATION. THE ENV
        // CLASS OBJECT INSTANTIATION (USED FOR BUILDING RESPONSE HEADER) EXPOSES THIS MISSING CONFIG DATA.
        // Thursday, March 23, 2023 @ 2325 hrs
        if(!isset(self::$sys_logging_meta_ARRAY[self::$config_serial][$env_key])){

            return '';

        }

        return self::$sys_logging_meta_ARRAY[self::$config_serial][$env_key];

    }

    public function config_ip_grant_exclusive_access($env_key, $ip_or_file){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_ip_config', $ip_or_file, 'crnrstn_exclusive_access_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

//                //
//                // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
//                if($ip_or_file !== ''){
//
//                    $ip_or_file = $this->str_sanitize($ip_or_file, DIRECTORY_SEPARATOR);
//
//                }
//
//                $this->grant_accessIP_ARRAY[self::$config_serial][hash(self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'][self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER]], $env_key)] = $ip_or_file;
//
//                $this->error_log('storing grant_exclusive_access IP profile [' . $ip_or_file . '] in memory for environment key [' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//                $this->error_log('TODO :: FINISH INTEGRATIONS INTO CRNRSTN :: LIGHTSABER FOR ALL IP ADDRESS MGMT STUFF.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                return true;
//
//                // TODO :: FINISH INTEGRATIONS INTO LIGHTSABER FOR ALL IP ADDRESS MGMT STUFF. DO THE WORK HERE.
//                self::$oCRNRSTN_CONFIG_MGR->input_data_value($crnrstn_resource_config_file_path, 'crnrstn_engagement_config_file_path', NULL, NULL, CRNRSTN_AUTHORIZE_RUNTIME, NULL, false, $env_key);
//
//                if(is_file($crnrstn_resource_config_file_path)){
//
//                    //
//                    // ACQUIRE FILE VERSIONING CHECKSUM
//                    $tmp_file_md5 = md5_file($crnrstn_resource_config_file_path);
//                    self::$system_files_version_hash_ARRAY[$crnrstn_resource_config_file_path] = $tmp_file_md5;
//
//                    //
//                    // EXTRACT RESOURCE CONFIGURATION FROM FILE
//                    $this->error_log('Including and evaluating file [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    include_once($crnrstn_resource_config_file_path);
//
//                }else{
//
//                    //
//                    // WE COULD NOT FIND THE OPENSSL ENCRYPTION CONFIGURATION FILE
//                    $this->error_log('File path data not recognized as a file. [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE..
            return false;

        }

    }

    public function ip_grant_exclusive_access($ip_address){

        //
        // COMMA-DELIMITED IP ADDRESS / IP RANGE.
        return $this->set_crnrstn('ip_grant_exclusive_access', $ip_address);

    }

    public function config_ip_deny_access($env_key, $ip_or_file){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_ip_config', $ip_or_file, 'crnrstn_deny_access_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

//                //
//                // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
//                if($ip_or_file !== ''){
//
//                    $ip_or_file = $this->str_sanitize($ip_or_file, DIRECTORY_SEPARATOR);
//
//                }
//
//                $this->deny_accessIP_ARRAY[self::$config_serial][hash(self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'][self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER]], $env_key)] = $ip_or_file;
//
//                $this->error_log('storing deny_access IP profile [' . $ip_or_file . '] in memory for environment key [' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//                $this->error_log('TODO :: FINISH INTEGRATIONS INTO CRNRSTN :: LIGHTSABER FOR ALL IP ADDRESS MGMT STUFF.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                return true;
//
//                // TODO :: FINISH INTEGRATIONS INTO LIGHTSABER FOR ALL IP ADDRESS MGMT STUFF. DO THE WORK HERE.
//                self::$oCRNRSTN_CONFIG_MGR->input_data_value($crnrstn_resource_config_file_path, 'crnrstn_engagement_config_file_path', NULL, NULL, CRNRSTN_AUTHORIZE_RUNTIME, NULL, false, $env_key);
//
//                if(is_file($crnrstn_resource_config_file_path)){
//
//                    //
//                    // ACQUIRE FILE VERSIONING CHECKSUM
//                    $tmp_file_md5 = md5_file($crnrstn_resource_config_file_path);
//                    self::$system_files_version_hash_ARRAY[$crnrstn_resource_config_file_path] = $tmp_file_md5;
//
//                    //
//                    // EXTRACT RESOURCE CONFIGURATION FROM FILE
//                    $this->error_log('Including and evaluating file [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    include_once($crnrstn_resource_config_file_path);
//
//                }else{
//
//                    //
//                    // WE COULD NOT FIND THE OPENSSL ENCRYPTION CONFIGURATION FILE
//                    $this->error_log('File path data not recognized as a file. [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function ip_deny_access($ip_address){

        //
        // COMMA-DELIMITED IP ADDRESS / IP RANGE.
        return $this->set_crnrstn('ip_deny_access', $ip_address);

    }

    public function authorize_ip_access(){
        //if(!($this->oCRNRSTN->oCRNRSTN_IPSECURITY_MGR->authorizeEnvAccess($this, $this->env_key_hash) == true)){

        return self::$oCRNRSTN_IP_MGR->authorizeEnvAccess();

    }

//    public function returnDbType($type_id = 0){
//
//        try{
//
//            $databaseExtensionTypes = array(0 => 'MySQLi', 1 => 'MySQL', 2 => 'PostGreSQL', 3 => 'SYBASE', 4 => 'IBM-DB2', 5 => 'Oracle Database', 6 => 'MSSQL');
//
//            if(isset($databaseExtensionTypes[$type_id])){
//
//                return $databaseExtensionTypes[$type_id];
//
//            }else{
//
//                $this->error_log('ERROR :: returnDbType() is being called with reference to a value(' . $type_id . ') that is outside permissible range of [0-6].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//                throw new Exception('CRNRSTN :: initialization warning :: returnDbType() is being called with reference to a value(' . $type_id . ') that is outside permissible range of [0-6]');
//
//            }
//
//        }catch(Exception $e){
//
//            //
//            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
//            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);
//
//        }
//
//        return false;
//
//    }

    public function specifyDatabaseExtension($env_key, $type){

        $this->error_log('CRNRSTN :: Specify database extension. Database type=[' . $type . '] specified for environment=[' . $env_key . '] on server [' . $_SERVER['SERVER_NAME'] . ']', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

        self::$database_extension_type_ARRAY[self::$config_serial][$this->hash(self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'][self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER]], $env_key)] = $type;

    }

    public function config_include_sql_silo($env_key, $crnrstn_resource_config_file_path){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_query_silo', $crnrstn_resource_config_file_path, 'crnrstn_sql_silo_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

//                //
//                // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
//                if($crnrstn_resource_config_file_path !== ''){
//
//                    $crnrstn_resource_config_file_path = $this->str_sanitize($crnrstn_resource_config_file_path, DIRECTORY_SEPARATOR);
//
//                }
//
//                if(is_file($crnrstn_resource_config_file_path)){
//
//                    //
//                    // ACQUIRE FILE VERSIONING CHECKSUM
//                    $tmp_file_md5 = md5_file($crnrstn_resource_config_file_path);
//                    self::$system_files_version_hash_ARRAY[$crnrstn_resource_config_file_path] = $tmp_file_md5;
//
//                    //
//                    // EXTRACT RESOURCE CONFIGURATION FROM FILE
//                    $this->error_log('Including and evaluating file [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    include_once($crnrstn_resource_config_file_path);
//
//                }else{
//
//                    //
//                    // WE COULD NOT FIND THE CONFIGURATION FILE
//                    $this->error_log('File path data not recognized as a file. [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    //
//                    // HOOOSTON...VE HAF PROBLEM!
//                    //throw new Exception('Unable to process system resource for environment [' . self::$env_key_hash_config_ARRAY[self::$config_serial] . '].');
//
//                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function config_include_social_media($env_key, $crnrstn_resource_config_file_path){

        try{

            //
            // CRNRSTN :: PLAID APPLICATION ACCELERATION.
            // FIRE A RRS MAP BYPASS, IF THIS IS A MAPPED RESOURCE REQUEST.
            if($this->rrs_map_is_asset_return() == true){

                return true;

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_file_path', $crnrstn_resource_config_file_path, 'crnrstn_social_media_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

//                //
//                // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
//                if($crnrstn_resource_config_file_path !== ''){
//
//                    $crnrstn_resource_config_file_path = $this->str_sanitize($crnrstn_resource_config_file_path, DIRECTORY_SEPARATOR);
//
//                }
//
//                if(is_file($crnrstn_resource_config_file_path)){
//
//                    //
//                    // ACQUIRE FILE VERSIONING CHECKSUM
//                    $tmp_file_md5 = md5_file($crnrstn_resource_config_file_path);
//                    self::$system_files_version_hash_ARRAY[$crnrstn_resource_config_file_path] = $tmp_file_md5;
//
//                    //
//                    // EXTRACT RESOURCE CONFIGURATION FROM FILE
//                    $this->error_log('Including and evaluating file [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    include_once($crnrstn_resource_config_file_path);
//
//                }else{
//
//                    //
//                    // WE COULD NOT FIND THE CONFIGURATION FILE
//                    $this->error_log('File path data not recognized as a file. [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    //
//                    // HOOOSTON...VE HAF PROBLEM!
//                    //throw new Exception('Unable to process system resource for environment [' . self::$env_key_hash_config_ARRAY[self::$config_serial] . '].');
//
//                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function config_include_wild_card_resources($env_key, $crnrstn_resource_config_file_path){

        try{

            //
            // CRNRSTN :: PLAID APPLICATION ACCELERATION.
            // FIRE A RRS MAP BYPASS, IF THIS IS A MAPPED RESOURCE REQUEST.
            if($this->rrs_map_is_asset_return() == true){

                //error_log(__LINE__ . ' crnrstn FIRE BYPASS :: RRS Map Application Acceleration [' . __METHOD__ . '].');
                return true;

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_file_path', $crnrstn_resource_config_file_path, 'crnrstn_wild_card_resources_config_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

//                //
//                // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
//                if($crnrstn_resource_config_file_path !== ''){
//
//                    $crnrstn_resource_config_file_path = $this->str_sanitize($crnrstn_resource_config_file_path, DIRECTORY_SEPARATOR);
//
//                }
//
//                if(is_file($crnrstn_resource_config_file_path)){
//
//                    //
//                    // ACQUIRE FILE VERSIONING CHECKSUM
//                    $tmp_file_md5 = md5_file($crnrstn_resource_config_file_path);
//                    self::$system_files_version_hash_ARRAY[$crnrstn_resource_config_file_path] = $tmp_file_md5;
//
//                    //
//                    // EXTRACT RESOURCE CONFIGURATION FROM FILE
//                    $this->error_log('Including and evaluating file [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    include_once($crnrstn_resource_config_file_path);
//
//                }else{
//
//                    //
//                    // WE COULD NOT FIND THE CONFIGURATION FILE
//                    $this->error_log('File path data not recognized as a file. [' . $crnrstn_resource_config_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    //
//                    // HOOOSTON...VE HAF PROBLEM!
//                    //throw new Exception('Unable to process system resource for environment [' . self::$env_key_hash_config_ARRAY[self::$config_serial] . '].');
//
//                }
//
            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function config_add_database($env_key, $db_host_or_file_path, $un = NULL, $pwd = NULL, $db = NULL, $port = NULL){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_database', $db_host_or_file_path, 'db_host_or_file_path', 'CRNRSTN::RESOURCE::ASSET_PATH'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_database', $un, 'un', 'CRNRSTN::RESOURCE::DATABASE'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_database', $pwd, 'pwd', 'CRNRSTN::RESOURCE::DATABASE'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_database', $db, 'db', 'CRNRSTN::RESOURCE::DATABASE'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_database', $port, 'port', 'CRNRSTN::RESOURCE::DATABASE'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

        //
        // WE SHOULD HAVE THIS VALUE BY NOW. IF EMPTY, HOOOSTON...VE HAF PROBLEM!
        if(self::$env_key_hash_config_ARRAY[self::$config_serial] == ''){

            $this->error_log('ERROR :: we have processed ALL defined environmental resources and were unable to detect running environment with CRNRSTN :: config serial hash [' . self::$config_serial . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            //
            // HOOOSTON...VE HAF PROBLEM!
            //throw new Exception('CRNRSTN :: Initialization Error :: Environmental detection failed to match a sufficient number of $_SERVER parameters to the servers configuration and therefore DID NOT successfully initialize CRNRSTN :: on server ' . $_SERVER['SERVER_NAME'] . ' (' . $_SERVER['SERVER_ADDR'] . ')');

            error_log(__LINE__ . ' crnrstn FAILED_ENVIRONMENTAL_DETECTION.');
            $this->terminate_configuration_error_ARRAY['FAILED_ENVIRONMENTAL_DETECTION'] = 'CRNRSTN :: could not process database configuration. Unable to detect running environment.';

        }

        if(isset($this->terminate_configuration_error_ARRAY)){

            foreach($this->terminate_configuration_error_ARRAY as $key => $msg){

                if(strlen($key) > 0){

                    $this->error_log(__LINE__ . ' crnrstn [terminate]. [' . __METHOD__ . ']');
                    $this->system_terminate('config_detection_error_help');

                    exit();

                }

            }

        }

        //
        // HANDLE PATH TO DATABASE CONFIG FILE (E.G. ONLY 2 PARAMS PROVIDED)
        if($db == NULL){

            try{

                //
                // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
                // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
                // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
                // PERFORMANCE ACCELERATION BOOST.
                if($this->config_is_valid_detected_env($env_key) == true){

                    //
                    // SANITIZE FILE PATH DIRECTORY_SEPARATOR FOR SYSTEM COMPATIBILITY.
                    if($db_host_or_file_path !== ''){

                        $db_host_or_file_path = $this->str_sanitize($db_host_or_file_path, DIRECTORY_SEPARATOR);

                    }

                    if(is_file($db_host_or_file_path)){

                        //
                        // ACQUIRE FILE VERSIONING CHECKSUM
                        $tmp_file_md5 = md5_file($db_host_or_file_path);
                        self::$system_files_version_hash_ARRAY[$db_host_or_file_path] = $tmp_file_md5;

                        //
                        // EXTRACT RESOURCE CONFIGURATION FROM FILE
                        $this->error_log('Including and evaluating file [' . $db_host_or_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                        include_once($db_host_or_file_path);

                    }else{

                        //
                        // WE COULD NOT FIND THE CONFIGURATION FILE
                        $this->error_log('File path data not recognized as a file. [' . $db_host_or_file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    }

                }

            }catch(Exception $e){

                //
                // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
                $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

                return false;

            }

        }else{

            //
            // SEND DATABASE CONFIGURATION PARAMETERS TO THE CONNECTION MANAGER
            $this->error_log('Sending [' . $env_key . '] database profile information to the CRNRSTN :: MySQLi database connection manager.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            $this->oMYSQLI_CONN_MGR->add_connection($env_key, $db_host_or_file_path, $un, $pwd, $db, $port);

        }

        return true;

    }

    private function config_add_data_wp($env_key, $data_key, $data_value, $data_type_family = 'CRNRSTN::WP_00::INTEGRATIONS'){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                $this->error_log('Sending ' . $data_key . ' WordPress profile information for [' . $env_key . '] to the CRNRSTN :: MySQLi database connection manager.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                $this->oMYSQLI_CONN_MGR->config_add_data_wp($env_key, $data_key, $data_value, $data_type_family);

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    public function config_detect_environment($env_key = CRNRSTN_RESOURCE_ALL, $data_key = NULL, $value = NULL, $required_server_matches = 1){

        //error_log(__LINE__  . ' crnrstn $data_key[' . $data_key . ']. $value[' . $value . ']. $required_server_matches[' . $required_server_matches . '].');

        $env_key_hash = $this->hash($env_key);

        //
        // IS THE ENVIRONMENT NOT DETECTED?
        if(!isset(self::$env_key_hash_config_ARRAY[self::$config_serial][$env_key_hash])){

            if($required_server_matches < 0){

                $required_server_matches = 0;

            }

            //error_log(__LINE__  . ' crnrstn $env_key_hash[' . $env_key_hash . ']. $data_key[' . $data_key . ']. $value[' . $value . ']. $required_server_matches[' . $required_server_matches . '].');
            //die();

            //
            // FOR THE FASTEST SERVER DISCOVERY, RUN CRNRSTN :: ENVIRONMENTAL
            // DETECTION AHEAD OF INITIALIZATION OF AS MANY RESOURCE DEFINITIONS
            // AS ARCHITECTURALLY POSSIBLE...IF WE DON'T SNAG THE ENV CONFIG FROM
            // THE CRNRSTN :: MC-DDO SESSION OR THE SSDTLA CHANNELS, FIRST!
            if($this->detectServerEnv($env_key_hash, $data_key, $value, $required_server_matches) == true){

                //
                // HERE IS THE INITIALIZATION, LOGGING, AND RETURN OF THE ORIGINAL
                // CRNRSTN :: v1.0.0 ENVIRONMENTAL DETECTION SUCCESS DATA STRUCTURES
                // FROM $oCRNRSTN->isServerKeyMatch() (CALLED BY $oCRNRSTN->detectServerEnv()).
                // CRNRSTN :: v1.0.0 O.G. ("original gangster") DATA STRUCTURES HEREIN PRESENTED
                // NEXT TO THEIR CRNRSTN :: LIGHTSABER DESCENDANTS.
                // NOTE: FOR THE CRNRSTN :: HIDDEN ARCHIVES [THE 100% DEPRECATED VERSION THAT WAS STARTED IN Q1 OF 2012],
                //       PLEASE SEE,  _archives/CRNRSTN/2012/09_11_GNU3/
                //
                // ORIGINAL CRNRSTN :: ENVIRONMENT KEY INITIALIZATION:
                //      self::$env_select_ARRAY[$configSerial] = $env;
                //      self::$oLogger->logDebug("crnrstn :: environmental detection complete. CRNRSTN selected environmental profile [".$env."] running with CRNRSTN serialization of [".$configSerial."] and phpsession[".session_id()."].");
                //      return true;
                //
                // INITIALIZATION OF THE CRNRSTN :: SYSTEM KEY AND SYSTEM HASH FOR THIS ENVIRONMENT.
                self::$env_key_config_ARRAY[self::$config_serial][$env_key_hash] = $env_key;
                self::$env_key_hash_config_ARRAY[self::$config_serial] = $env_key_hash;

                //
                // CRNRSTN :: CLIENT ID, AND CLIENT REQUEST AUTHORIZATION KEY.
                $this->session_client_id = $this->salt(128, '01');
                $this->session_client_auth_key = $this->salt();

                $this->encoder_wheel_integrations();

                //error_log(__LINE__ . ' crnrstn CRNRSTN :: ENVIRONMENT detection is complete. Setting the application server key for CRNRSTN :: to [' . print_r($env_key_hash, true) . '].');
                $this->error_log('CRNRSTN :: ENVIRONMENT detection is complete. Setting the application server key for CRNRSTN :: to [' . print_r($env_key_hash, true) . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                $this->initialize_asset_management();

                //
                // INITIALIZATION OF THE CRNRSTN :: ENVIRONMENT CLASS OBJECT.
                $this->oCRNRSTN_ENV = new crnrstn_environment($this);

                //
                // INITIALIZATION OF THE CRNRSTN :: USER CLASS OBJECT.
                $this->oCRNRSTN_USR = $this->oCRNRSTN_ENV->return_ENV_oCRNRSTN_USR();

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT
                // (MC-DDO) ACTIVATION FOR THE ENVIRONMENT SO THAT
                //  DATA CAN BE RECEIVED.
                self::$oCRNRSTN_CONFIG_MGR->initialize_multi_channel_environment_key();

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO)
                // DATA INPUT SERIALIZATION LAYER FOR MULTI-CHANNEL DATA
                // SERIALIZATION OF DATUM OF VARIOUS DATA TYPES (SEE, $oCRNRSTN->gettype())
                // ON INPUT AND FOR THE MANAGEMENT OF UNSERIALIZE() ON
                // DATA RETURN.
                //
                // SEE, $oCRNRSTN->add_resource().
                $tmp_ddo_serializable_resources_ARRAY = array(CRNRSTN_OBJECT => 1, CRNRSTN_ARRAY => 1);
                $this->config_add_resource($env_key, 'ddo_serializable_data_types', $tmp_ddo_serializable_resources_ARRAY, 'CRNRSTN::RESOURCE::MULTI_CHANNEL');

                //
                // NOTE :: LOADING THE CRNRSTN :: CONFIGURATION SPOOL MAY
                //         REQUIRE THE USE OF SERALIZATION, AND SO
                //         'ddo_serializable_data_types' MUST BE
                //         INITIALIZED AHEAD OF config_load_config_spool()
                //         TO ALLOW ANY SERIALIZATION INCONSISTENCIES WITH
                //         A PRIVATE SERIALIZATION PROFILE TO BE UNDONE
                //         DURING THE REPLAY OF THE SPOOL. INTERNALLY,
                //         ddo_serializable_data_types WILL BE HONORED BY
                //         THE CRNRSTN :: DDO.
                //
                // LOAD ALL SPOOLED RESOURCES FROM CRNRSTN ::
                // INITIALIZATION INTO THE CRNRSTN :: MULTI-
                // CHANNEL DECOUPLED DATA OBJECT (MC-DDO)
                // SERVICES LAYER. ALSO, DEACTIVATE SPOOLING.
                $this->config_load_config_spool();

                //
                // INITIALIZE SETTINGS FOR EACH ENVIRONMENT.
                // CRNRSTN :: PLAID FIRES HERE.
                error_log(__LINE__ . ' crnrstn STARTING config_load_system_settings() [rtime ' . $this->wall_time() . ' secs].');
                $this->config_load_system_settings($env_key, CRNRSTN_ROOT . '/_crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php');

                $tmp_channel_ARRAY = $this->get_channel_config(CRNRSTN_CHANNEL_SOAP);

                $this->destruct_output .= '<pre><code>[' . $this->return_micro_time()  . '] [lnum ' .  __LINE__ . '] [rtime ' . $this->wall_time() . ' secs] [' . __METHOD__ . ']
C<span style="color:#F90000;">R</span>NRSTN :: MC-DDO [' . strtoupper($tmp_channel_ARRAY['NAME']) . '] PROFILE <br><br># # C # <span style="color:#F90000;">R</span> # N # R # S # T # N # : : # # # #<br><br>' . print_r($tmp_channel_ARRAY, true) . ']</code></pre>';

                //
                // INITIALIZE SQL QUERY SILOS FOR EACH ENVIRONMENT.
                $this->config_include_sql_silo($env_key, CRNRSTN_ROOT . '/_crnrstn/_config/config.database.sql/crnrstn.db_sql_silo.inc.php');

                error_log(__LINE__ . ' crnrstn STARTING config_add_database() [rtime ' . $this->wall_time() . ' secs].');

                //
                // INITIALIZE DATABASE FUNCTIONALITY FOR EACH ENVIRONMENT.
                $this->config_add_database($env_key, CRNRSTN_ROOT . '/_crnrstn/_config/config.database.secure/_crnrstn.db.config.inc.php');

                //
                // INITIALIZE SUPPORT FOR WORDPRESS CONFIGURATION(S).
                $this->config_include_wordpress($env_key, CRNRSTN_ROOT . '/_crnrstn/_config/config.wp.secure/_crnrstn.wp_config.inc.php');

                error_log(__LINE__ . ' crnrstn STARTING config_include_encryption() [rtime ' . $this->wall_time() . ' secs].');

                //
                // INITIALIZATION OF ENCRYPTION PROFILES :: CRNRSTN ::
                // ADVANCED CONFIGURATION PARAMETERS.
                $this->config_include_encryption($env_key, CRNRSTN_ROOT . '/_crnrstn/_config/config.encryption.secure/_crnrstn.encryption.inc.php');

                //
                // INITIALIZATION OF CRNRSTN :: WILD CARD RESOURCES.
                $this->config_include_wild_card_resources($env_key, CRNRSTN_ROOT . '/_crnrstn/_config/config.resource_wildcards.secure/_crnrstn.resource_wildcards.inc.php');

                //
                // INITIALIZATION OF SYSTEM RESOURCES :: CRNRSTN ::
                // ADVANCED CONFIGURATION PARAMETERS.
                $this->config_include_system_resources($env_key, CRNRSTN_ROOT . '/_crnrstn/_config/config.system_resource.secure/_crnrstn.system_resource.inc.php');

                //
                // INITIALIZATION OF THIRD PARTY WEB REPORTING AND ANALYTICS
                // TAG PROFILES :: CRNRSTN :: ADVANCED CONFIGURATION PARAMETERS
                $this->config_include_seo_analytics($env_key, CRNRSTN_ROOT . '/_crnrstn/_config/config.seo_analytics.secure/_crnrstn.analytics.inc.php');

                //
                // INITIALIZATION OF THIRD PARTY ENGAGEMENT TAG PROFILES ::
                // CRNRSTN :: ADVANCED CONFIGURATION PARAMETERS
                $this->config_include_seo_engagement($env_key, CRNRSTN_ROOT . '/_crnrstn/_config/config.seo_engagement.secure/_crnrstn.engagement.inc.php');

                //
                // INITIALIZE SOCIAL MEDIA PROFILE FOR EACH ENVIRONMENT.
                $this->config_include_social_media($env_key, CRNRSTN_ROOT . '/_crnrstn/_config/config.social_media_meta.secure/_crnrstn.social_media_meta.inc.php');

                //
                // LOAD ALL REMAINING STATIC SYSTEM APPLICATION DATUM PRIOR TO
                // REPLAYING THE CONTENTS OF THE CRNRSTN :: CONFIGURATION
                // APPLICATION SPOOL.
                $this->config_load_static_application_data();

                return self::$env_key_hash_config_ARRAY[self::$config_serial];

            }

            return false;

        }

        return self::$env_key_hash_config_ARRAY[self::$config_serial];

    }

    private function config_load_config_spool(){

        self::$oCRNRSTN_PERFORMANCE_REGULATOR->config_load_config_spool();

    }

    private function initialize_http_get_params(){

        $this->oCRNRSTN_ENV->initialize_http_get_params();

    }

    public function return_mobile_detect_magic_methods($type){

        $tmp_ARRAY = array();

        $type = strtolower($type);
        switch($type){
            case 'basic':

                //
                // Basic methods
                $tmp_ARRAY = array('isMobile()', 'isTablet()');

            break;
            case 'custom':

                //
                // Custom detection methods
                $tmp_ARRAY = array('isiPhone()', 'isBlackBerry()', 'isPixel()', 'isHTC()',
                    'isNexus()', 'isDell()', 'isMotorola()', 'isSamsung()', 'isLG()', 'isSony()', 'isAsus()', 'isXiaomi()', 'isNokiaLumia()', 'isMicromax()', 'isPalm()', 'isVertu()', 'isPantech()', 'isFly()', 'isWiko()',
                    'isiMobile()', 'isSimValley()', 'isWolfgang()', 'isAlcatel()', 'isNintendo()', 'isAmoi()', 'isINQ()', 'isOnePlus()', 'isGenericPhone()', 'isiPad()', 'isNexusTablet()', 'isGoogleTablet()', 'isSamsungTablet()',
                    'isKindle()', 'isSurfaceTablet()', 'isHPTablet()', 'isAsusTablet()', 'isBlackBerryTablet()', 'isHTCtablet()',
                    'isMotorolaTablet()', 'isNookTablet()', 'isAcerTablet()', 'isToshibaTablet()', 'isLGTablet()', 'isFujitsuTablet()', 'isPrestigioTablet()', 'isLenovoTablet()',
                    'isDellTablet()', 'isXiaomiTablet()', 'isYarvikTablet()', 'isMedionTablet()', 'isArnovaTablet()', 'isIntensoTablet()', 'isIRUTablet()', 'isMegafonTablet()', 'isEbodaTablet()', 'isAllViewTablet()',
                    'isArchosTablet()', 'isAinolTablet()', 'isNokiaLumiaTablet()', 'isSonyTablet()', 'isPhilipsTablet()', 'isCubeTablet()', 'isCobyTablet()', 'isMIDTablet()',
                    'isMSITablet()', 'isSMiTTablet()', 'isRockChipTablet()', 'isFlyTablet()', 'isbqTablet()', 'isHuaweiTablet()', 'isNecTablet()',
                    'isPantechTablet()', 'isBronchoTablet()', 'isVersusTablet()', 'isZyncTablet()', 'isPositivoTablet()', 'isNabiTablet()',
                    'isKoboTablet()', 'isDanewTablet()', 'isTexetTablet()', 'isPlaystationTablet()', 'isTrekstorTablet()', 'isPyleAudioTablet()',
                    'isAdvanTablet()', 'isDanyTechTablet()', 'isGalapadTablet()', 'isMicromaxTablet()', 'isKarbonnTablet()', 'isAllFineTablet()', 'isPROSCANTablet()', 'isYONESTablet()',
                    'isChangJiaTablet()', 'isDPSTablet()', 'isVistureTablet()', 'isCrestaTablet()', 'isMediatekTablet()', 'isConcordeTablet()', 'isGoCleverTablet()', 'isModecomTablet()', 'isVoninoTablet()', 'isECSTablet()', 'isStorexTablet()',
                    'isVodafoneTablet()', 'isEssentielBTablet()', 'isRossMoorTablet()', 'isiMobileTablet()', 'isTolinoTablet()', 'isAudioSonicTablet()', 'isAMPETablet()', 'isSkkTablet()', 'isTecnoTablet()', 'isJXDTablet()',
                    'isiJoyTablet()', 'isFX2Tablet()', 'isXoroTablet()', 'isViewsonicTablet()', 'isVerizonTablet()', 'isOdysTablet()', 'isCaptivaTablet()', 'isIconbitTablet()',
                    'isTeclastTablet()', 'isOndaTablet()', 'isJaytechTablet()', 'isBlaupunktTablet()', 'isDigmaTablet()', 'isEvolioTablet()', 'isLavaTablet()', 'isAocTablet()', 'isMpmanTablet()', 'isCelkonTablet()', 'isWolderTablet()', 'isMediacomTablet()', 'isMiTablet()',
                    'isNibiruTablet()', 'isNexoTablet()', 'isLeaderTablet()', 'isUbislateTablet()', 'isPocketBookTablet()', 'isKocasoTablet()', 'isHisenseTablet()', 'isHudl()', 'isTelstraTablet()', 'isGenericTablet()', 'isAndroidOS()', 'isBlackBerryOS()',
                    'isPalmOS()', 'isSymbianOS()', 'isWindowsMobileOS()', 'isWindowsPhoneOS()', 'isiOS()', 'isiPadOS()', 'isSailfishOS()', 'isMeeGoOS()', 'isMaemoOS()',
                    'isJavaOS()', 'iswebOS()', 'isbadaOS()', 'isBREWOS()', 'isChrome()', 'isDolfin()', 'isOpera()', 'isSkyfire()', 'isEdge()', 'isIE()', 'isFirefox()', 'isBolt()', 'isTeaShark()', 'isBlazer()', 'isSafari()',
                    'isWeChat()', 'isUCBrowser()', 'isbaiduboxapp()', 'isbaidubrowser()', 'isDiigoBrowser()', 'isMercury()', 'isObigoBrowser()',
                    'isNetFront()', 'isGenericBrowser()', 'isPaleMoon()');

            break;
            case 'experimental':

                //
                // Experimental version() method
                $tmp_ARRAY = array('version(Chrome)', 'version(Safari)', 'version(Webkit)', 'version(iOS)');

            break;
            case 'other':

                //
                // Other tests
                $tmp_ARRAY = array('isiphone()', 'isIphone()', 'istablet()', 'isIOS()', 'isWhateverYouWant()');

            break;

        }

        return $tmp_ARRAY;

    }

    public function return_system_files_lab_html_report(){

        $tmp_html_out = '';

        $tmp_html_out .= '
<div style="font-family: Courier New, Courier, monospace;width: 100%; margin: 0 auto;">
    <div style="width: 900px; text-align: center; margin: 0 auto; padding:20px 0 0 20px; ">
        <div style="text-align: left; width: 900px;">

            ' . $this->return_system_image('CRNRSTN_LOGO', '', 80, NULL, 'CRNRSTN :: v' . $this->version_crnrstn(), 'CRNRSTN :: v' . $this->version_crnrstn(), NULL, CRNRSTN_HTML) . '

            <div style="padding-left:30px;">
                <div style="font-family: Arial, Helvetica, sans-serif;">
                    <h1 style="padding-top: 10px; margin-top: 10px;">FILE SYSTEM ASSET MANAGEMENT LABORATORY ::</h1>
                </div>
                <div style="font-family: Courier New, Courier, monospace; font-size: 10px;">
                    <div style="width: 100%; height: 75px; padding: 0; margin: 0; clear: both; background-color: #EAEAEA; border-bottom: 2px solid #F90000;"></div>

                    ' . $this->system_output_file_html('../downloads/crnrstn_mem_use.afdesign.zip', '', '', 30) . '

                    <div style="width: 100%; height: 75px; padding: 0; margin: 0; clear: both; background-color: #EAEAEA; border-top: 2px solid #F90000; margin-bottom: 10px;"></div>

                    [' . $this->return_micro_time() . '][rtime ' . $this->wall_time() . ' seconds]

                </div>
            </div>
        </div>
    </div>
</div>';

        return $tmp_html_out;

    }

    private function ____initialize_file_system_constant($mime_type = NULL, $ext = NULL){
        // THIS WAS JUST A TEST FOR THE PROGRAMMATIC INITIALIZATION OF BIT FLIPPABLE INTEGERS.
        // THERE ARE SOME NICE DATA STRUCTURES IN HERE...SO KEEPING THIS METHOD AROUND.

        //
        // PRIORITIZE MIME TYPE OVER FILE EXTENSION FOR
        // PROFILING APPROPRIATE FILE OPTIONS.
        if(isset($mime_type)){

            // MIME

            /*
            'CRNRSTN_HTM', 'CRNRSTN_PHP', 'CRNRSTN_SQL', 'CRNRSTN_XML', 'CRNRSTN_XSLT',
            'CRNRSTN_TXT', 'CRNRSTN_RTF', 'CRNRSTN_CSV', 'CRNRSTN_TIF', 'CRNRSTN_BMP', 'CRNRSTN_SVG',
            'CRNRSTN_PIC', 'CRNRSTN_ZIP', 'CRNRSTN_EXE', 'CRNRSTN_BAT', 'CRNRSTN_TAR', 'CRNRSTN_PSD', 'CRNRSTN_AI',
            'CRNRSTN_AFDESIGN', 'CRNRSTN_AFPHOTO', 'CRNRSTN_CDR', 'CRNRSTN_CPT', 'CRNRSTN_PDF', 'CRNRSTN_XLS',
            'CRNRSTN_XLSX', 'CRNRSTN_DOC', 'CRNRSTN_DOCX', 'CRNRSTN_PPT',
            'CRNRSTN_PPSX', 'CRNRSTN_KEY', 'CRNRSTN_PAGES', 'CRNRSTN_MP2', 'CRNRSTN_MP3', 'CRNRSTN_MP4',
            'CRNRSTN_WAV', 'CRNRSTN_MIDI', 'CRNRSTN_RAM', 'CRNRSTN_MPEG',
            'CRNRSTN_QT', 'CRNRSTN_AVI',

            @define('CRNRSTN_HTM', (int) crnrstn_constants_init('CRNRSTN_HTM'));
            @define('CRNRSTN_PHP', (int) crnrstn_constants_init('CRNRSTN_PHP'));
            @define('CRNRSTN_SQL', (int) crnrstn_constants_init('CRNRSTN_SQL'));
            @define('CRNRSTN_XML', (int) crnrstn_constants_init('CRNRSTN_XML'));
            @define('CRNRSTN_XSLT', (int) crnrstn_constants_init('CRNRSTN_XSLT'));
            @define('CRNRSTN_TXT', (int) crnrstn_constants_init('CRNRSTN_TXT'));
            @define('CRNRSTN_RTF', (int) crnrstn_constants_init('CRNRSTN_RTF'));
            @define('CRNRSTN_CSV', (int) crnrstn_constants_init('CRNRSTN_CSV'));
            @define('CRNRSTN_TIF', (int) crnrstn_constants_init('CRNRSTN_TIF'));
            @define('CRNRSTN_BMP', (int) crnrstn_constants_init('CRNRSTN_BMP'));
            @define('CRNRSTN_SVG', (int) crnrstn_constants_init('CRNRSTN_SVG'));
            @define('CRNRSTN_PIC', (int) crnrstn_constants_init('CRNRSTN_PIC'));
            @define('CRNRSTN_ZIP', (int) crnrstn_constants_init('CRNRSTN_ZIP'));
            @define('CRNRSTN_EXE', (int) crnrstn_constants_init('CRNRSTN_EXE'));
            @define('CRNRSTN_BAT', (int) crnrstn_constants_init('CRNRSTN_BAT'));
            @define('CRNRSTN_TAR', (int) crnrstn_constants_init('CRNRSTN_TAR'));
            @define('CRNRSTN_PSD', (int) crnrstn_constants_init('CRNRSTN_PSD'));
            @define('CRNRSTN_AI', (int) crnrstn_constants_init('CRNRSTN_AI'));
            @define('CRNRSTN_AFDESIGN', (int) crnrstn_constants_init('CRNRSTN_AFDESIGN'));
            @define('CRNRSTN_AFPHOTO', (int) crnrstn_constants_init('CRNRSTN_AFPHOTO'));
            @define('CRNRSTN_CDR', (int) crnrstn_constants_init('CRNRSTN_CDR'));
            @define('CRNRSTN_CPT', (int) crnrstn_constants_init('CRNRSTN_CPT'));
            @define('CRNRSTN_PDF', (int) crnrstn_constants_init('CRNRSTN_PDF'));
            @define('CRNRSTN_XLS', (int) crnrstn_constants_init('CRNRSTN_XLS'));
            @define('CRNRSTN_XLSX', (int) crnrstn_constants_init('CRNRSTN_XLSX'));
            @define('CRNRSTN_DOC', (int) crnrstn_constants_init('CRNRSTN_DOC'));
            @define('CRNRSTN_DOCX', (int) crnrstn_constants_init('CRNRSTN_DOCX'));
            @define('CRNRSTN_PPT', (int) crnrstn_constants_init('CRNRSTN_PPT'));
            @define('CRNRSTN_PPSX', (int) crnrstn_constants_init('CRNRSTN_PPSX'));
            @define('CRNRSTN_KEY', (int) crnrstn_constants_init('CRNRSTN_KEY'));
            @define('CRNRSTN_PAGES', (int) crnrstn_constants_init('CRNRSTN_PAGES'));
            @define('CRNRSTN_MP2', (int) crnrstn_constants_init('CRNRSTN_MP2'));
            @define('CRNRSTN_MP3', (int) crnrstn_constants_init('CRNRSTN_MP3'));
            @define('CRNRSTN_MP4', (int) crnrstn_constants_init('CRNRSTN_MP4'));
            @define('CRNRSTN_WAV', (int) crnrstn_constants_init('CRNRSTN_WAV'));
            @define('CRNRSTN_MIDI', (int) crnrstn_constants_init('CRNRSTN_MIDI'));
            @define('CRNRSTN_RAM', (int) crnrstn_constants_init('CRNRSTN_RAM'));
            @define('CRNRSTN_MPEG', (int) crnrstn_constants_init('CRNRSTN_MPEG'));
            @define('CRNRSTN_QT', (int) crnrstn_constants_init('CRNRSTN_QT'));
            @define('CRNRSTN_AVI', (int) crnrstn_constants_init('CRNRSTN_AVI'));

            */

            $tmp_mimetype_string_constants = array('text/css' => array('.css' => 'CRNRSTN_CSS'),
                'text/csv' => array('.csv' => 'CRNRSTN_CSV', '.txt' => 'CRNRSTN_TXT'),
                'application/vnd.microsoft.portable-executable' => array('.dll' => 'CRNRSTN_DLL'),
                'text/plain' => array('.txt' => 'CRNRSTN_TXT', '.C' => 'CRNRSTN_C', '.cc' => 'CRNRSTN_CC', '.h' => 'CRNRSTN_H'),
                'application/rtf' => array('.rtf' => 'CRNRSTN_RTF'),
                'application/x-tex' => array('.tex' => 'CRNRSTN_TEX'),
                'text/html' => array('.htm' => 'CRNRSTN_HTM', '.html' => 'CRNRSTN_HTML', '.shtml' => 'CRNRSTN_SHTML'),
                'application/xhtml+xml' => array('.xhtml' => 'CRNRSTN_XHTML'),
                'application/xml' => array('.xml' => 'CRNRSTN_XML'),
                'application/vnd.mozilla.xul+xml' => array('.xul' => 'CRNRSTN_XUL'),
                'application/vnd.google-apps.script+json' => array('.json' => 'CRNRSTN_JSON'),
                'text/calendar' => array('.ics' => 'CRNRSTN_ICS'),
                'text/tab-separated-values' => array('.tsv' => 'CRNRSTN_TSV'),
                'application/json' => array('.json' => 'CRNRSTN_JSON'),
                'application/ld+json' => array('.jsonld' => 'CRNRSTN_JSONLD'),
                'text/javascript' => array('.mjs' => 'CRNRSTN_MJS'),
                'application/java-archive' => array('.jar' => 'CRNRSTN_JAR'),
                'application/zip' => array('.zip', 'CRNRSTN_ZIP'),
                'multipart/x-zip' => array('.zip' => 'CRNRSTN_ZIP', '.zipx' => 'CRNRSTN_ZIPX'),
                'application/x-bzip' => array('.bz' => 'CRNRSTN_BZ'),
                'application/x-bzip2' => array('.bz2' => 'CRNRSTN_BZ2'),
                'application/gzip' => array('.gz' => 'CRNRSTN_GZ'),
                'application/x-gzip' => array('.gz' => 'CRNRSTN_GZ', '.gzip' => 'CRNRSTN_GZIP'),
                'multipart/x-gzip' => array('.gzip' => 'CRNRSTN_GZIP'),
                'application/x-gtar' => array('.gtar' => 'CRNRSTN_GTAR'),
                'application/x-7z-compressed' => array('.7z' => 'CRNRSTN_7Z'),
                'application/epub+zip' => array('.epub' => 'CRNRSTN_EPUB'),
                'application/x-tar' => array('.tar' => 'CRNRSTN_TAR'), 'font/otf' => array('.otf' => 'CRNRSTN_OTF'),
                'font/woff' => array('.woff' => 'CRNRSTN_WOFF'), 'font/woff2' => array('.woff2' => 'CRNRSTN_WOFF2'),
                'font/ttf' => array('.ttf' => 'CRNRSTN_TTF'), 'image/x-icon' => array('.ico' => 'CRNRSTN_ICO'),
                'image/vnd.microsoft.icon' => array('.ico' => 'CRNRSTN_ICO'),
                'image/jpeg' => array('.jpg' => 'CRNRSTN_JPG', '.jpe' => 'CRNRSTN_JPE', '.jpeg' => 'CRNRSTN_JPEG', '.jpg2' => 'CRNRSTN_JPG2', '.jif' => 'CRNRSTN_JIF', '.jfif' => 'CRNRSTN_JFIF', '.jfi' => 'CRNRSTN_JFI'),
                'image/gif' => array('.gif' => 'CRNRSTN_GIF'), 'image/bmp' => array('.bmp' => 'CRNRSTN_BMP'),
                'image/x-windows-bmp' => array('.bmp' => 'CRNRSTN_BMP'), 'image/png' => array('.png' => 'CRNRSTN_PNG'),
                'image/svg+xml' => array('.svg' => 'CRNRSTN_SVG'), 'image/tiff' => array('.tif' => 'CRNRSTN_TIF', '.tiff' => 'CRNRSTN_TIFF'),
                'image/x-tiff' => array('.tif' => 'CRNRSTN_TIF', '.tiff' => 'CRNRSTN_TIFF'),
                'image/webp' => array('.webp' => 'CRNRSTN_WEBP'),
                'image/pict' => array('.pic' => 'CRNRSTN_PIC', '.pict' => 'CRNRSTN_PICT'),
                'image/avif' => array('.avif' => 'CRNRSTN_AVIF'),
                'application/x-midi' => array('.mid' => 'CRNRSTN_MID', '.midi' => 'CRNRSTN_MIDI'),
                'audio/aac' => array('.aac' => 'CRNRSTN_AAC'),
                'audio/mpeg' => array('.mp1' => 'CRNRSTN_MP1', '.mp2' => 'CRNRSTN_MP2', '.m1a' => 'CRNRSTN_M1A', '.m2a' => 'CRNRSTN_M2A', '.mp3' => 'CRNRSTN_MP3', '.mpga' => 'CRNRSTN_MPGA', '.mpa' => 'CRNRSTN_MPA', '.mpg' => 'CRNRSTN_MPG'),
                'audio/x-mpeg' => array('.mp1' => 'CRNRSTN_MP1', '.mp2' => 'CRNRSTN_MP2', '.mp3' => 'CRNRSTN_MP3'),
                'audio/x-pn-realaudio' => array('.ra' => 'CRNRSTN_RA', '.ram' => 'CRNRSTN_RAM'),
                'audio/x-pn-realaudio-plugin' => array('.ra' => 'CRNRSTN_RA', '.rmp' => 'CRNRSTN_RMP'),
                'audio/x-realaudio' => array('.ra' => 'CRNRSTN_RA'),
                'audio/wav' => array('.wav' => 'CRNRSTN_WAV', '.wave' => 'CRNRSTN_WAVE'),
                'audio/x-wav' => array('.wav' => 'CRNRSTN_WAV', '.wave' => 'CRNRSTN_WAVE'),
                'audio/ogg' => array('.ogg' => 'CRNRSTN_OGG', '.oga' => 'CRNRSTN_OGA'),
                'audio/webm' => array('.weba' => 'CRNRSTN_WEBA'),
                'audio/3gpp' => array('.3gp' => 'CRNRSTN_3GP'), 'audio/3gpp2' => array('.3g2' => 'CRNRSTN_3G2'),
                'audio/opus' => array('.opus' => 'CRNRSTN_OPUS'), 'audio/x-mpequrl' => array('.m3u' => 'CRNRSTN_M3U'),
                'audio/midi' => array('.mid' => 'CRNRSTN_MID', '.midi' => 'CRNRSTN_MIDI'),
                'audio/x-midi' => array('.mid' => 'CRNRSTN_MID', '.midi' => 'CRNRSTN_MIDI'),
                'audio/x-mid' => array('.mid' => 'CRNRSTN_MID', '.midi' => 'CRNRSTN_MIDI'),
                'music/crescendo' => array('.mid' => 'CRNRSTN_MID', '.midi' => 'CRNRSTN_MIDI'),
                'x-music/x-midi' => array('.mid' => 'CRNRSTN_MID', '.midi' => 'CRNRSTN_MIDI'),
                'audio/mpeg3' => array('.mp3' => 'CRNRSTN_MP3'), 'audio/x-mpeg-3' => array('.mp3' => 'CRNRSTN_MP3'),
                'video/ogg' => array('.ogv' => 'CRNRSTN_OGV'), 'video/webm' => array('.webm' => 'CRNRSTN_WEBM'),
                'video/3gpp' => array('.3gp' => 'CRNRSTN_3GP'), 'video/3gpp2' => array('.3g2' => 'CRNRSTN_3G2'),
                'video/mp4' => array('.mp4' => 'CRNRSTN_MP4', '.m4a' => 'CRNRSTN_M4A', '.m4p' => 'CRNRSTN_M4P', '.m4b' => 'CRNRSTN_M4B', '.m4r' => 'CRNRSTN_M4R', '.m4v' => 'CRNRSTN_M4V'),
                'video/mpeg' => array('.mp1' => 'CRNRSTN_MP1', '.mp2' => 'CRNRSTN_MP2', '.mp3' => 'CRNRSTN_MP3', '.mpa' => 'CRNRSTN_MPA', '.mpe' => 'CRNRSTN_MPE', '.mpeg' => 'CRNRSTN_MPEG', '.mpg' => 'CRNRSTN_MPG', '.mpv' => 'CRNRSTN_MPV', '.mpv2' => 'CRNRSTN_MPV2', '.m1v' => 'CRNRSTN_M1V', '.m2v' => 'CRNRSTN_M2V'),
                'video/quicktime' => array('.mov' => 'CRNRSTN_MOV', '.qt' => 'CRNRSTN_QT'),
                'image/x-quicktime' => array('.qif' => 'CRNRSTN_QIF', '.qti' => 'CRNRSTN_QTI', '.qtif' => 'CRNRSTN_QTIF'),
                'video/x-qtc' => array('.qtc' => 'CRNRSTN_QTC'),
                'video/x-sgi-movie' => array('.movie' => 'CRNRSTN_MOVIE', '.mv' => 'CRNRSTN_MV'),
                'application/x-shockwave-flash' => array('.swf' => 'CRNRSTN_SWF'),
                'application/x-troff-msvideo' => array('.avi' => 'CRNRSTN_AVI'),
                'video/avi' => array('.avi' => 'CRNRSTN_AVI'),
                'video/msvideo' => array('.avi' => 'CRNRSTN_AVI'), 'video/x-msvideo' => array('.avi' => 'CRNRSTN_AVI'),
                'video/avs-video' => array('.avs' => 'CRNRSTN_AVS'),
                'video/x-motion-jpeg' => array('.mjpg' => 'CRNRSTN_MJPG'),
                'video/x-mpeg' => array('.mp1' => 'CRNRSTN_MP1', '.mp2' => 'CRNRSTN_MP2', '.mp3' => 'CRNRSTN_MP3'),
                'video/x-mpeq2a' => array('.mp2' => 'CRNRSTN_MP2'), 'video/mp2t' => array('.ts' => 'CRNRSTN_TS'),
                'application/vnd.ms-fontobject' => array('.eot' => 'CRNRSTN_EOT'),
                'application/x-abiword' => array('.abw' => 'CRNRSTN_ABW'),
                'application/x-freearc' => array('.arc' => 'CRNRSTN_ARC'),
                'application/vnd.amazon.ebook' => array('.azw' => 'CRNRSTN_AZW'),
                'application/octet-stream' => array('.bin' => 'CRNRSTN_BIN'),
                'application/bat' => array('.bat' => 'CRNRSTN_BAT', '.cmd' => 'CRNRSTN_CMD', '.btm' => 'CRNRSTN_BTM'),
                'application/x-bat' => array('.bat' => 'CRNRSTN_BAT', '.cmd' => 'CRNRSTN_CMD', '.btm' => 'CRNRSTN_BTM'),
                'application/x-msdos-program' => array('.bat' => 'CRNRSTN_BAT', '.cmd' => 'CRNRSTN_CMD', '.btm' => 'CRNRSTN_BTM'),
                'application/x-cdf' => array('.cda' => 'CRNRSTN_CDA'),
                'application/x-csh' => array('.csh' => 'CRNRSTN_CSH'),
                'application/vnd.oasis.opendocument.text' => array('.odt' => 'CRNRSTN_ODT'),
                'application/vnd.oasis.opendocument.presentation' => array('.odp' => 'CRNRSTN_ODP'),
                'application/vnd.oasis.opendocument.spreadsheet' => array('.ods' => 'CRNRSTN_ODS'),
                'application/x-vnd.oasis.opendocument.spreadsheet' => array('.ods' => 'CRNRSTN_ODS'),
                'application/pdf' => array('.pdf' => 'CRNRSTN_PDF'),
                'application/vnd.ms-works' => array('.wks' => 'CRNRSTN_WKS', '.wps' => 'CRNRSTN_WPS'),
                'application/vnd.wordperfect' => array('.wpd' => 'CRNRSTN_WPD'),
                'application/vnd.ms-excel' => array('.xls' => 'CRNRSTN_XLS'),
                'application/msword' => array('.doc' => 'CRNRSTN_DOC', '.docm' => 'CRNRSTN_DOCM', '.docx' => 'CRNRSTN_DOCX', '.dotx' => 'CRNRSTN_DOTX', '.dotm' => 'CRNRSTN_DOTM', '.word' => 'CRNRSTN_WORD', '.w6w' => 'CRNRSTN_W6W'),
                'application/vnd.ms-powerpoint' => array('.pot' => 'CRNRSTN_POT', '.pps' => 'CRNRSTN_PPS', '.ppt' => 'CRNRSTN_PPT', '.pptm' => 'CRNRSTN_PPTM', '.potm' => 'CRNRSTN_POTM', '.potx' => 'CRNRSTN_POTX', '.ppam' => 'CRNRSTN_PPAM', '.ppsm' => 'CRNRSTN_PPSM', '.sldm' => 'CRNRSTN_SLDM', '.sldx' => 'CRNRSTN_SLDX', '.pa' => 'CRNRSTN_PA'),
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' => array('.xlsx' => 'CRNRSTN_XLSX'),
                'application/vnd.openxmlformats-officedocument.presentationml.presentation' => array('.pptx' => 'CRNRSTN_PPTX'),
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => array('.doc' => 'CRNRSTN_DOC', '.docm' => 'CRNRSTN_DOCM', '.docx' => 'CRNRSTN_DOCX', '.dotx' => 'CRNRSTN_DOTX', '.dotm' => 'CRNRSTN_DOTM', '.word' => 'CRNRSTN_WORD', '.w6w' => 'CRNRSTN_W6W'),
                'application/vnd.openxmlformats-officedocument.presentationml.slideshow' => array('.ppsx' => 'CRNRSTN_PPSX'),
                'application/vnd.visio' => array('.vsd' => 'CRNRSTN_VSD'),
                'application/vnd.apple.installer+xml' => array('.mpkg' => 'CRNRSTN_MPKG'),
                'application/ogg' => array('.ogx' => 'CRNRSTN_OGX'), 'application/x-httpd-php' => array('.php' => 'CRNRSTN_PHP'),
                'application/vnd.rar' => array('.rar' => 'CRNRSTN_RAR'),
                'application/x-sh' => array('.sh' => 'CRNRSTN_SH'), 'application/acad' => array('.dwg' => 'CRNRSTN_DWG'),
                'application/arj' => array('.arj' => 'CRNRSTN_ARJ'),
                'application/astound' => array('.asd' => 'CRNRSTN_ASD', '.asn' => 'CRNRSTN_ASN'),
                'application/clariscad' => array('.ccad' => 'CRNRSTN_CCAD'),
                'application/drafting' => array('.drw' => 'CRNRSTN_DRW'), 'application/dxf' => array('.dxf' => 'CRNRSTN_DXF'),
                'application/i-deas' => array('.unv' => 'CRNRSTN_UNV'),
                'application/iges' => array('.iges' => 'CRNRSTN_IGES', '.igs' => 'CRNRSTN_IGS'),
                'application/mac-binhex40' => array('.hqx' => 'CRNRSTN_HQX'),
                'application/msaccess' => array('.mdb' => 'CRNRSTN_MDB'),
                'application/msexcel' => array('.xla' => 'CRNRSTN_XLA', '.xls' => 'CRNRSTN_XLS', '.xlt' => 'CRNRSTN_XLT', '.xlw' => 'CRNRSTN_XLW', '.xlm' => 'CRNRSTN_XLM', '.xlsm' => 'CRNRSTN_XLSM', '.xlsb' => 'CRNRSTN_XLSB', '.xlam' => 'CRNRSTN_XLAM', '.xltm' => 'CRNRSTN_XLTM'),
                'application/mspowerpoint' => array('.pot' => 'CRNRSTN_POT', '.pps' => 'CRNRSTN_PPS', '.ppt' => 'CRNRSTN_PPT', '.pptm' => 'CRNRSTN_PPTM', '.potm' => 'CRNRSTN_POTM', '.potx' => 'CRNRSTN_POTX', '.ppam' => 'CRNRSTN_PPAM', '.ppsm' => 'CRNRSTN_PPSM', '.sldm' => 'CRNRSTN_SLDM', '.sldx' => 'CRNRSTN_SLDX', '.pa' => 'CRNRSTN_PA'),
                'application/msproject' => array('.mpp' => 'CRNRSTN_MPP'),
                'application/mswrite' => array('.wri' => 'CRNRSTN_WRI'), 'application/oda' => array('.oda' => 'CRNRSTN_ODA'),
                'application/postscript' => array('.ai' => 'CRNRSTN_AI', '.eps' => 'CRNRSTN_EPS', '.ps' => 'CRNRSTN_PS'),
                'application/pro_eng' => array('.part' => 'CRNRSTN_PART', '.prt' => 'CRNRSTN_PRT'),
                'application/set' => array('.set' => 'CRNRSTN_SET'), 'application/sla' => array('.stl' => 'CRNRSTN_STL'),
                'application/solids' => array('.sol' => 'CRNRSTN_SOL'),
                'application/STEP' => array('.st' => 'CRNRSTN_ST', '.step' => 'CRNRSTN_STEP', '.stp' => 'CRNRSTN_STP'),
                'application/vda' => array('.vda' => 'CRNRSTN_VDA'),
                'application/x-bcpio' => array('.bcpio' => 'CRNRSTN_BCPIO'),
                'application/x-cpio' => array('.cpio' => 'CRNRSTN_CPIO'),
                'application/x-director' => array('.dcr' => 'CRNRSTN_DCR', '.dir' => 'CRNRSTN_DIR', '.dxr' => 'CRNRSTN_DXR'),
                'application/x-dvi' => array('.dvi' => 'CRNRSTN_DVI'),
                'application/x-dwf' => array('.dwf' => 'CRNRSTN_DWF'), 'application/x-hdf' => array('.hdf' => 'CRNRSTN_HDF'),
                'application/x-javascript' => array('.js' => 'CRNRSTN_JS'),
                'application/x-latex' => array('.latex' => 'CRNRSTN_LATEX'),
                'application/x-macbinary' => array('.bin' => 'CRNRSTN_BIN'),
                'application/x-mif' => array('.mif' => 'CRNRSTN_MIF'),
                'application/x-netcdf' => array('.cdf' => 'CRNRSTN_CDF', '.nc' => 'CRNRSTN_NC'),
                'application/x-shar' => array('.shar' => 'CRNRSTN_SHAR'),
                'application/x-stuffit' => array('.sit' => 'CRNRSTN_SIT'),
                'application/x-sv4cpio' => array('.sv4cpio' => 'CRNRSTN_SV4CPIO'),
                'application/x-sv4crc' => array('.sv4crc' => 'CRNRSTN_SV4CRC'),
                'application/x-tcl' => array('.tcl' => 'CRNRSTN_TCL'),
                'application/x-texinfo' => array('.texi' => 'CRNRSTN_TEXI', '.texinfo' => 'CRNRSTN_TEXINFO'),
                'application/x-troff' => array('.roff' => 'CRNRSTN_ROFF', '.t' => 'CRNRSTN_T', '.tr' => 'CRNRSTN_TR'),
                'application/x-troff-man' => array('.man' => 'CRNRSTN_MAN'),
                'application/x-troff-me' => array('.me' => 'CRNRSTN_ME'),
                'application/x-troff-ms' => array('.ms' => 'CRNRSTN_MS'),
                'application/x-ustar' => array('.ustar' => 'CRNRSTN_USTAR'),
                'application/x-wais-source' => array('.src' => 'CRNRSTN_SRC'),
                'application/x-winhelp' => array('.hlp' => 'CRNRSTN_HLP'),
                'audio/basic' => array('.au' => 'CRNRSTN_AU', '.snd' => 'CRNRSTN_SND'),
                'audio/x-aiff' => array('.aif' => 'CRNRSTN_AIF', '.aifc' => 'CRNRSTN_AIFC', '.aiff' => 'CRNRSTN_AIFF'),
                'audio/x-voice' => array('.voc' => 'CRNRSTN_VOC'), 'image/ief' => array('.ief' => 'CRNRSTN_IEF'),
                'image/x-cmu-raster' => array('.ras' => 'CRNRSTN_RAS'),
                'image/x-portable-anymap' => array('.pnm' => 'CRNRSTN_PNM'),
                'image/x-portable-bitmap' => array('.pbm' => 'CRNRSTN_PBM'),
                'image/x-portable-graymap' => array('.pgm' => 'CRNRSTN_PGM'),
                'image/x-portable-pixmap' => array('.ppm' => 'CRNRSTN_PPM'),
                'image/x-rgb' => array('.rgb' => 'CRNRSTN_RGB'),
                'image/x-xbitmap' => array('.xbm' => 'CRNRSTN_XBM'), 'image/x-xpixmap' => array('.xpm' => 'CRNRSTN_XPM'),
                'image/x-xwindowdump' => array('.xwd' => 'CRNRSTN_XWD'),
                'text/richtext' => array('.rtx' => 'CRNRSTN_RTX'), 'text/x-setext' => array('.etx' => 'CRNRSTN_ETX'),
                'text/x-sgml' => array('.sgm' => 'CRNRSTN_SGM', '.sgml' => 'CRNRSTN_SGML'),
                'video/vdo' => array('.vdo' => 'CRNRSTN_VDO'),
                'video/vivo' => array('.viv' => 'CRNRSTN_VIV', '.vivo' => 'CRNRSTN_VIVO'),
                'x-conference/x-cooltalk' => array('.ice' => 'CRNRSTN_ICE'),
                'x-world/x-svr' => array('.svr' => 'CRNRSTN_SVR'), 'x-world/x-vrml' => array('.wrl' => 'CRNRSTN_WRL'),
                'x-world/x-vrt' => array('.vrt' => 'CRNRSTN_VRT'));

            error_log(__LINE__ . ' crnrstn init file data $mime_type[' . $mime_type . '].');

            if(isset($tmp_mimetype_string_constants[$mime_type])){

                error_log(__LINE__ . ' crnrstn init file data $tmp_mimetype_string_constants[' . print_r($tmp_mimetype_string_constants[$mime_type], true) . '].');

//                //
//                // FOR EACH FILE EXTENSION ASSOCIATED WITH THIS MIME TYPE...
//                foreach($tmp_mimetype_string_constants[$mime_type] as $extension_ind => $extension){
//
//                    error_log(__LINE__ . ' crnrstn init file data $mime_type[' . $extension . ']==[' . $ext . ']. $mime_type[' . $mime_type . ']. die()');
//
//                    //
//                    // MUST CHECK FILE EXTENSION.
//                    if('.' . $ext == $extension){
//
//                        //
//                        // ORIGINAL SAUCE:
//                        // @define('CRNRSTN_ZIP', (int) crnrstn_constants_init('CRNRSTN_ZIP'));
//
//                        //
//                        // HOW DO WE WANT TO SUPPRESS REDUNDANT INTEGER CALLS? ...CRNRSTN_CSS, CRNRSTN_JS, ETC
//
//                        //
//                        // SOME MIME TYPES HAVE 5 AND 6 ASSOCIATED FILE EXTENSIONS. HERE IN THIS LOOP, CRNRSTN :: WILL
//                        // INITIALIZE ALL ASSOCIATED FILE EXTENSION SYSTEM INTEGER CONSTANTS.
//                        error_log(__LINE__ . ' crnrstn $mime_type[' . $mime_type . ']. $extension[' . $extension . ']. META[' . print_r($tmp_mimetype_string_constants[$mime_type], true) . '].');
//                        @define((string) $tmp_mimetype_string_constants[$mime_type][1], (int) crnrstn_constants_init($tmp_mimetype_string_constants[$mime_type][1]));
//
//
//                    }
//
//                }

            }

        }else{

            if(isset($ext)){

                $tmp_ext_string_const_ARRAY = array('.css' => 'CRNRSTN_CSS', '.csv' => 'CRNRSTN_CSV',
                    '.txt' => 'CRNRSTN_TXT', '.sql' => 'CRNRSTN_SQL', '.bat' => 'CRNRSTN_BAT', '.php' => 'CRNRSTN_PHP',
                    '.phar' => 'CRNRSTN_PHAR', '.phtml' => 'CRNRSTN_PHTML', '.pht' => 'CRNRSTN_PHT',
                    '.phps' => 'CRNRSTN_PHPS', '.C' => 'CRNRSTN_C', '.cc' => 'CRNRSTN_CC', '.h' => 'CRNRSTN_H',
                    '.rtf' => 'CRNRSTN_RTF', '.tex' => 'CRNRSTN_TEX', '.htm' => 'CRNRSTN_HTM', '.html' => 'CRNRSTN_HTML',
                    '.shtml' => 'CRNRSTN_SHTML', '.xhtml' => 'CRNRSTN_XHTML', '.xml' => 'CRNRSTN_XML',
                    '.xslt' => 'CRNRSTN_XSLT', '.xul' => 'CRNRSTN_XUL', '.json' => 'CRNRSTN_JSON', '.ics' => 'CRNRSTN_ICS',
                    '.tsv' => 'CRNRSTN_TSV', '.jsonld' => 'CRNRSTN_JSONLD', '.mjs' => 'CRNRSTN_MJS',
                    '.jar' => 'CRNRSTN_JAR', '.zip' => 'CRNRSTN_ZIP', '.zipx' => 'CRNRSTN_ZIPX', '.bz' => 'CRNRSTN_BZ',
                    '.bz2' => 'CRNRSTN_BZ2', '.gz' => 'CRNRSTN_GZ', '.gzip' => 'CRNRSTN_GZIP', '.gtar' => 'CRNRSTN_GTAR',
                    '.7z' => 'CRNRSTN_7Z', '.epub' => 'CRNRSTN_EPUB', '.tar' => 'CRNRSTN_TAR', '.otf' => 'CRNRSTN_OTF',
                    '.woff' => 'CRNRSTN_WOFF', '.woff2' => 'CRNRSTN_WOFF2', '.ttf' => 'CRNRSTN_TTF',
                    '.ico' => 'CRNRSTN_ICO', '.jpg' => 'CRNRSTN_JPG', '.jpe' => 'CRNRSTN_JPE', '.jpeg' => 'CRNRSTN_JPEG',
                    '.jpg2' => 'CRNRSTN_JPG2', '.jif' => 'CRNRSTN_JIF', '.jfif' => 'CRNRSTN_JFIF', '.jfi' => 'CRNRSTN_JFI',
                    '.gif' => 'CRNRSTN_GIF', '.bmp' => 'CRNRSTN_BMP', '.png' => 'CRNRSTN_PNG', '.svg' => 'CRNRSTN_SVG',
                    '.tif' => 'CRNRSTN_TIF', '.tiff' => 'CRNRSTN_TIFF', '.webp' => 'CRNRSTN_WEBP', '.pic' => 'CRNRSTN_PIC',
                    '.pict' => 'CRNRSTN_PICT', '.avif' => 'CRNRSTN_AVIF', '.mid' => 'CRNRSTN_MID',
                    '.midi' => 'CRNRSTN_MIDI', '.aac' => 'CRNRSTN_AAC', '.oga' => 'CRNRSTN_OGA', '.mp1' => 'CRNRSTN_MP1',
                    '.mp2' => 'CRNRSTN_MP2', '.m1a' => 'CRNRSTN_M1A', '.m2a' => 'CRNRSTN_M2A', '.mp3' => 'CRNRSTN_MP3',
                    '.mpga' => 'CRNRSTN_MPGA', '.mpa' => 'CRNRSTN_MPA', '.mpv' => 'CRNRSTN_MPV', '.mpg' => 'CRNRSTN_MPG',
                    '.ra' => 'CRNRSTN_RA', '.ram' => 'CRNRSTN_RAM', '.rmp' => 'CRNRSTN_RMP', '.dat' => 'CRNRSTN_DAT',
                    '.wav' => 'CRNRSTN_WAV', '.wave' => 'CRNRSTN_WAVE', '.weba' => 'CRNRSTN_WEBA', '.3gp' => 'CRNRSTN_3GP',
                    '.3g2' => 'CRNRSTN_3G2', '.opus' => 'CRNRSTN_OPUS', '.m3u' => 'CRNRSTN_M3U', '.ogv' => 'CRNRSTN_OGV',
                    '.webm' => 'CRNRSTN_WEBM', '.mp4' => 'CRNRSTN_MP4', '.m4a' => 'CRNRSTN_M4A', '.m4p' => 'CRNRSTN_M4P',
                    '.m4b' => 'CRNRSTN_M4B', '.m4r' => 'CRNRSTN_M4R', '.m4v' => 'CRNRSTN_M4V',
                    '.mpe' => 'CRNRSTN_MPE', '.mpeg' => 'CRNRSTN_MPEG', '.mpv2' => 'CRNRSTN_MPV2', '.m1v' => 'CRNRSTN_M1V',
                    '.m2v' => 'CRNRSTN_M2V', '.mov' => 'CRNRSTN_MOV', '.qt' => 'CRNRSTN_QT', '.qif' => 'CRNRSTN_QIF',
                    '.qti' => 'CRNRSTN_QTI', '.qtif' => 'CRNRSTN_QTIF', '.qtc' => 'CRNRSTN_QTC',
                    '.movie' => 'CRNRSTN_MOVIE', '.mv' => 'CRNRSTN_MV', '.swf' => 'CRNRSTN_SWF', '.fla' => 'CRNRSTN_FLA',
                    '.avi' => 'CRNRSTN_AVI',
                    '.avs' => 'CRNRSTN_AVS', '.mjpg' => 'CRNRSTN_MJPG', '.ts' => 'CRNRSTN_TS', '.eot' => 'CRNRSTN_EOT',
                    '.abw' => 'CRNRSTN_ABW', '.arc' => 'CRNRSTN_ARC', '.azw' => 'CRNRSTN_AZW', '.bin' => 'CRNRSTN_BIN',
                    '.cmd' => 'CRNRSTN_CMD', '.btm' => 'CRNRSTN_BTM', '.cda' => 'CRNRSTN_CDA', '.csh' => 'CRNRSTN_CSH',
                    '.odt' => 'CRNRSTN_ODT', '.odp' => 'CRNRSTN_ODP', '.ods' => 'CRNRSTN_ODS', '.pdf' => 'CRNRSTN_PDF',
                    '.wks' => 'CRNRSTN_WKS', '.wps' => 'CRNRSTN_WPS', '.wpd' => 'CRNRSTN_WPD', '.doc' => 'CRNRSTN_DOC',
                    '.word' => 'CRNRSTN_WORD', '.w6w' => 'CRNRSTN_W6W', '.xlsx' => 'CRNRSTN_XLSX',
                    '.pptx' => 'CRNRSTN_PPTX', '.docx' => 'CRNRSTN_DOCX', '.docm' => 'CRNRSTN_DOCM',
                    '.dotm' => 'CRNRSTN_DOTM', '.dotx' => 'CRNRSTN_DOTX', '.ppsx' => 'CRNRSTN_PPSX',
                    '.potx' => 'CRNRSTN_POTX', '.sldx' => 'CRNRSTN_SLDX', '.vsd' => 'CRNRSTN_VSD',
                    '.mpkg' => 'CRNRSTN_MPKG', '.ogx' => 'CRNRSTN_OGX', '.rar' => 'CRNRSTN_RAR', '.sh' => 'CRNRSTN_SH',
                    '.dwg' => 'CRNRSTN_DWG', '.arj' => 'CRNRSTN_ARJ', '.asd' => 'CRNRSTN_ASD', '.asn' => 'CRNRSTN_ASN',
                    '.ccad' => 'CRNRSTN_CCAD', '.drw' => 'CRNRSTN_DRW', '.dxf' => 'CRNRSTN_DXF', '.unv' => 'CRNRSTN_UNV',
                    '.iges' => 'CRNRSTN_IGES', '.igs' => 'CRNRSTN_IGS', '.hqx' => 'CRNRSTN_HQX', '.mdb' => 'CRNRSTN_MDB',
                    '.xla' => 'CRNRSTN_XLA', '.xls' => 'CRNRSTN_XLS', '.xlt' => 'CRNRSTN_XLT', '.xlm' => 'CRNRSTN_XLM',
                    '.xlsm' => 'CRNRSTN_XLSM', '.xlsb' => 'CRNRSTN_XLSB', '.xlam' => 'CRNRSTN_XLAM',
                    '.xltm' => 'CRNRSTN_XLTM', '.xlw' => 'CRNRSTN_XLW', '.pot' => 'CRNRSTN_POT', '.pps' => 'CRNRSTN_PPS',
                    '.ppt' => 'CRNRSTN_PPT', '.pptm' => 'CRNRSTN_PPTM', '.potm' => 'CRNRSTN_POTM',
                    '.ppam' => 'CRNRSTN_PPAM', '.ppsm' => 'CRNRSTN_PPSM', '.sldm' => 'CRNRSTN_SLDM', '.pa' => 'CRNRSTN_PA',
                    '.mpp' => 'CRNRSTN_MPP', '.wri' => 'CRNRSTN_WRI', '.oda' => 'CRNRSTN_ODA', '.ai' => 'CRNRSTN_AI',
                    '.psd' => 'CRNRSTN_PSD', '.eps' => 'CRNRSTN_EPS', '.ps' => 'CRNRSTN_PS', '.part' => 'CRNRSTN_PART',
                    '.prt' => 'CRNRSTN_PRT', '.set' => 'CRNRSTN_SET', '.stl' => 'CRNRSTN_STL', '.sol' => 'CRNRSTN_SOL',
                    '.st' => 'CRNRSTN_ST', '.step' => 'CRNRSTN_STEP', '.stp' => 'CRNRSTN_STP', '.vda' => 'CRNRSTN_VDA',
                    '.bcpio' => 'CRNRSTN_BCPIO', '.cpio' => 'CRNRSTN_CPIO', '.dcr' => 'CRNRSTN_DCR',
                    '.dir' => 'CRNRSTN_DIR', '.dxr' => 'CRNRSTN_DXR', '.dvi' => 'CRNRSTN_DVI', '.dwf' => 'CRNRSTN_DWF',
                    '.hdf' => 'CRNRSTN_HDF', '.js' => 'CRNRSTN_JS', '.latex' => 'CRNRSTN_LATEX', '.mif' => 'CRNRSTN_MIF',
                    '.cdf' => 'CRNRSTN_CDF', '.nc' => 'CRNRSTN_NC', '.shar' => 'CRNRSTN_SHAR', '.sit' => 'CRNRSTN_SIT',
                    '.sv4cpio' => 'CRNRSTN_SV4CPIO', '.sv4crc' => 'CRNRSTN_SV4CRC', '.tcl' => 'CRNRSTN_TCL',
                    '.texi' => 'CRNRSTN_TEXI', '.texinfo' => 'CRNRSTN_TEXINFO', '.roff' => 'CRNRSTN_ROFF',
                    '.t' => 'CRNRSTN_T', '.tr' => 'CRNRSTN_TR', '.man' => 'CRNRSTN_MAN', '.me' => 'CRNRSTN_ME',
                    '.ms' => 'CRNRSTN_MS', '.ustar' => 'CRNRSTN_USTAR', '.src' => 'CRNRSTN_SRC', '.hlp' => 'CRNRSTN_HLP',
                    '.au' => 'CRNRSTN_AU', '.snd' => 'CRNRSTN_SND', '.aif' => 'CRNRSTN_AIF', '.aifc' => 'CRNRSTN_AIFC',
                    '.aiff' => 'CRNRSTN_AIFF', '.voc' => 'CRNRSTN_VOC', '.ief' => 'CRNRSTN_IEF', '.ras' => 'CRNRSTN_RAS',
                    '.pnm' => 'CRNRSTN_PNM', '.pbm' => 'CRNRSTN_PBM', '.pgm' => 'CRNRSTN_PGM', '.ppm' => 'CRNRSTN_PPM',
                    '.rgb' => 'CRNRSTN_RGB', '.xbm' => 'CRNRSTN_XBM', '.xpm' => 'CRNRSTN_XPM', '.xwd' => 'CRNRSTN_XWD',
                    '.rtx' => 'CRNRSTN_RTX', '.etx' => 'CRNRSTN_ETX', '.sgm' => 'CRNRSTN_SGM', '.sgml' => 'CRNRSTN_SGML',
                    '.vdo' => 'CRNRSTN_VDO', '.viv' => 'CRNRSTN_VIV', '.vivo' => 'CRNRSTN_VIVO', '.ice' => 'CRNRSTN_ICE',
                    '.svr' => 'CRNRSTN_SVR', '.wrl' => 'CRNRSTN_WRL', '.vrt' => 'CRNRSTN_VRT', '.exe' => 'CRNRSTN_EXE',
                    '.bit' => 'CRNRSTN_BIT', '.pages' => 'CRNRSTN_PAGES', '.key' => 'CRNRSTN_KEY',
                    '.afphoto' => 'CRNRSTN_AFPHOTO', '.afdesign' => 'CRNRSTN_AFDESIGN', '.cpt' => 'CRNRSTN_CPT',
                    '.cdr' => 'CRNRSTN_CDR');

                if(isset($tmp_ext_string_const_ARRAY[$ext])){

                    //
                    // ORIGINAL SAUCE:
                    // @define('CRNRSTN_ZIP', (int) crnrstn_constants_init('CRNRSTN_ZIP'));

                    //
                    // HOW DO WE WANT TO SUPPRESS REDUNDANT INTEGER CALLS? ...CRNRSTN_CSS, CRNRSTN_JS, ETC.
                    error_log(__LINE__ . ' crnrstn $extension[' . $ext . ']. STR[' . $tmp_ext_string_const_ARRAY[$ext] . '].');

                    //
                    // CAN WE PASS IN STRING $VAR HERE...OR, DO WE NEED STRING LITERALS (SEE ABOVE) INTO @DEFINE?
                    @define($tmp_ext_string_const_ARRAY[$ext], (int)crnrstn_constants_init($tmp_ext_string_const_ARRAY[$ext]));

                }

            }

        }

    }

    private function initialize_asset_management(){

        $tmp_session_salt = $this->session_salt();

        //
        // SOURCE :: thomas dot sahlin at gmail dot com :: https://www.php.net/manual/en/function.in-array.php#93880
        //
        // If you're creating an array yourself and then using in_array to
        // search it, consider setting the keys of the array and using isset
        // instead since it's much faster.

        /*
        $slow = array('apple', 'banana', 'orange');

        if(in_array('banana', $slow))
            print('Found it!');

        $fast = array('apple' => 'apple', 'banana' => 'banana', 'orange' => 'orange');

        if(isset($fast['banana']))
            print('Found it!');

        */

        $tmp_ARRAY = array('text/css' => '.css', 'text/csv' => array('.csv', '.txt'),
            'text/plain' => array('.txt', '.C', '.cc', '.h'), 'application/rtf' => '.rtf', 'application/x-tex' => '.tex',
            'text/html' => array('.htm', '.html', '.shtml'), 'application/xhtml+xml' => '.xhtml', 'application/xml' => '.xml',
            'application/vnd.mozilla.xul+xml' => '.xul', 'application/vnd.google-apps.script+json' => '.json',
            'text/calendar' => '.ics', 'text/tab-separated-values' => '.tsv', 'application/json' => '.json',
            'application/ld+json' => '.jsonld', 'text/javascript' => '.mjs', 'application/java-archive' => '.jar',
            'application/zip' => array('.zip', '.zipx'), 'multipart/x-zip' => array('.zip', '.zipx'), 'application/x-bzip' => '.bz',
            'application/x-bzip2' => '.bz2', 'application/gzip' => '.gz', 'application/x-gzip' => array('.gz', '.gzip'),
            'multipart/x-gzip' => '.gzip', 'application/x-gtar' => '.gtar', 'application/x-7z-compressed' => '.7z',
            'application/epub+zip' => '.epub', 'application/x-tar' => '.tar', 'font/otf' => '.otf', 'font/woff' => '.woff',
            'font/woff2' => '.woff2', 'font/ttf' => '.ttf', 'image/x-icon' => '.ico', 'image/vnd.microsoft.icon' => '.ico',
            'image/jpeg' => array('.jpg', '.jpe', '.jpeg', '.jpg2', '.jif', '.jfif', '.jfi'), 'image/gif' => '.gif',
            'image/bmp' => '.bmp',
            'image/x-windows-bmp' => '.bmp', 'image/png' => '.png', 'image/svg+xml' => '.svg',
            'image/tiff' => array('.tif', '.tiff'), 'image/x-tiff' => array('.tif', '.tiff'), 'image/webp' => '.webp',
            'image/pict' => array('.pic', '.pict'), 'image/avif' => '.avif', 'application/x-midi' => array('.mid', '.midi'),
            'audio/aac' => '.aac', 'audio/ogg' => '.oga',
            'audio/mpeg' => array('.mp1', '.mp2', '.m1a', '.m2a', '.mp3', '.mpga', '.mpa', '.mpg'),
            'audio/x-mpeg' => array('.mp1', '.mp2', '.mp3'),
            'audio/x-pn-realaudio' => array('.ra', '.ram'), 'audio/x-pn-realaudio-plugin' => array('.ra', '.rmp'),
            'audio/x-realaudio' => '.ra', 'audio/wav' => array('.wav', '.wave'), 'audio/x-wav' => array('.wav', '.wave'),
            'audio/x-ms-wma' => '.wma', 'video/x-ms-wmv' => '.wmv', 'video/x-ms-asf' => array('.asf', '.asx'),
            'audio/x-ms-wax' => '.wax', 'video/x-ms-wvx' => '.wvx', 'video/x-ms-wm' => '.wm', 'audio/webm' => '.weba',
            'audio/3gpp' => '.3gp', 'audio/3gpp2' => '.3g2', 'audio/opus' => '.opus', 'audio/x-mpequrl' => '.m3u',
            'audio/midi' => array('.mid', '.midi'), 'audio/x-midi' => array('.mid', '.midi'),
            'audio/x-mid' => array('.mid', '.midi'), 'music/crescendo' => array('.mid', '.midi'),
            'x-music/x-midi' => array('.mid', '.midi'), 'audio/mpeg3' => '.mp3', 'audio/x-mpeg-3' => '.mp3',
            'video/ogg' => '.ogv', 'video/webm' => '.webm', 'video/3gpp' => '.3gp', 'video/3gpp2' => '.3g2',
            'video/mp4' => array('.mp4', '.m4a', '.m4p', '.m4b', '.m4r', '.m4v'),
            'video/mpeg' => array('.mp1', '.mp2', '.mp3', '.mpa', '.mpe', '.mpeg', '.mpg', '.mpv', '.mpv2', '.m1v', '.m2v'),
            'video/quicktime' => array('.mov', '.qt'), 'image/x-quicktime' => array('.qif', '.qti', '.qtif'),
            'video/x-qtc' => '.qtc', 'video/x-sgi-movie' => array('.movie', '.mv'),
            'application/x-shockwave-flash' => '.swf', 'application/x-troff-msvideo' => '.avi', 'video/avi' => '.avi',
            'video/msvideo' => '.avi', 'video/x-msvideo' => '.avi', 'video/avs-video' => '.avs',
            'video/x-motion-jpeg' => '.mjpg', 'video/x-mpeg' => array('.mp1', '.mp2', '.mp3'), 'video/x-mpeq2a' => '.mp2',
            'video/mp2t' => '.ts', 'application/vnd.ms-fontobject' => '.eot', 'application/x-abiword' => '.abw',
            'application/x-freearc' => '.arc', 'application/vnd.amazon.ebook' => '.azw',
            'application/octet-stream' => '.bin', 'application/bat' => array('.bat', '.cmd', '.btm'),
            'application/x-bat' => array('.bat', '.cmd', '.btm'),
            'application/x-msdos-program' => array('.bat', '.cmd', '.btm'), 'application/x-cdf' => '.cda',
            'application/x-csh' => '.csh', 'application/vnd.oasis.opendocument.text' => '.odt',
            'application/vnd.oasis.opendocument.presentation' => '.odp',
            'application/vnd.oasis.opendocument.spreadsheet' => '.ods',
            'application/x-vnd.oasis.opendocument.spreadsheet' => '.ods', 'application/pdf' => '.pdf',
            'application/vnd.ms-works' => array('.wks', '.wps'), 'application/vnd.wordperfect' => '.wpd',
            'application/vnd.ms-excel' => '.xls',
            'application/msword' => array('.doc', '.docm', '.docx', '.dotx', '.dotm', '.word', '.w6w'),
            'application/vnd.ms-powerpoint' => array('.pot', '.pps', '.ppt', '.pptm', '.potm', '.potx', '.ppam', '.ppsm', '.sldm', '.sldx', '.pa'),
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' => '.xlsx',
            'application/vnd.openxmlformats-officedocument.presentationml.presentation' => '.pptx',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => array('.doc', '.docm', '.docx', '.dotx', '.dotm', '.word', '.w6w'),
            'application/vnd.openxmlformats-officedocument.presentationml.slideshow' => '.ppsx',
            'application/vnd.visio' => '.vsd', 'application/vnd.apple.installer+xml' => '.mpkg',
            'application/ogg' => '.ogx', 'application/x-httpd-php' => '.php', 'application/vnd.rar' => '.rar',
            'application/x-sh' => '.sh', 'application/acad' => '.dwg', 'application/arj' => '.arj',
            'application/astound' => array('.asd', '.asn'), 'application/clariscad' => '.ccad',
            'application/drafting' => '.drw', 'application/dxf' => '.dxf', 'application/i-deas' => '.unv',
            'application/iges' => array('.iges', '.igs'), 'application/mac-binhex40' => '.hqx',
            'application/msaccess' => '.mdb', 'application/msexcel' => array('.xla', '.xls', '.xlt', '.xlw', '.xlm', '.xlsm', '.xlsb', '.xlam', '.xltm'),
            'application/mspowerpoint' => array('.pot', '.pps', '.ppt', '.pptm', '.potm', '.potx', '.ppam', '.ppsm', '.sldm', '.sldx', '.pa'),
            'application/msproject' => '.mpp',
            'application/mswrite' => '.wri', 'application/oda' => '.oda',
            'application/postscript' => array('.ai', '.eps', '.ps'), 'application/pro_eng' => array('.part', '.prt'),
            'application/set' => '.set', 'application/sla' => '.stl', 'application/solids' => '.sol',
            'application/STEP' => array('.st', '.step', '.stp'), 'application/vda' => '.vda',
            'application/x-bcpio' => '.bcpio', 'application/x-cpio' => '.cpio',
            'application/x-director' => array('.dcr', '.dir', '.dxr'), 'application/x-dvi' => '.dvi',
            'application/x-dwf' => '.dwf', 'application/x-hdf' => '.hdf', 'application/x-javascript' => '.js',
            'application/x-latex' => '.latex', 'application/x-macbinary' => '.bin', 'application/x-mif' => '.mif',
            'application/x-netcdf' => array('.cdf', '.nc'), 'application/x-shar' => '.shar',
            'application/x-stuffit' => '.sit', 'application/x-sv4cpio' => '.sv4cpio', 'application/x-sv4crc' => '.sv4crc',
            'application/x-tcl' => '.tcl', 'application/x-texinfo' => array('.texi', '.texinfo'),
            'application/x-troff' => array('.roff', '.t', '.tr'), 'application/x-troff-man' => '.man',
            'application/x-troff-me' => '.me', 'application/x-troff-ms' => '.ms', 'application/x-ustar' => '.ustar',
            'application/x-wais-source' => '.src', 'application/x-winhelp' => '.hlp', 'audio/basic' => array('.au', '.snd'),
            'audio/x-aiff' => array('.aif', '.aifc', '.aiff'), 'audio/x-voice' => '.voc', 'image/ief' => '.ief',
            'image/x-cmu-raster' => '.ras', 'image/x-portable-anymap' => '.pnm', 'image/x-portable-bitmap' => '.pbm',
            'image/x-portable-graymap' => '.pgm', 'image/x-portable-pixmap' => '.ppm', 'image/x-rgb' => '.rgb',
            'image/x-xbitmap' => '.xbm', 'image/x-xpixmap' => '.xpm', 'image/x-xwindowdump' => '.xwd',
            'text/richtext' => '.rtx', 'text/x-setext' => '.etx', 'text/x-sgml' => array('.sgm', '.sgml'),
            'video/vdo' => '.vdo', 'video/vivo' => array('.viv', '.vivo'), 'x-conference/x-cooltalk' => '.ice',
            'x-world/x-svr' => '.svr', 'x-world/x-vrml' => '.wrl', 'x-world/x-vrt' => '.vrt');

        /*
        http://et.engr.iupui.edu/~dskim/tutorials/misc/

        MIME Type	                    Identification	                File Extension
        application/acad                AutoCAD	                        dwg
        application/arj	                compressed archive	            arj
        application/astound	            Astound	                        asd, asn
        application/clariscad	        ClarisCAD	                    ccad
        application/drafting	        MATRA Prelude drafting	        drw
        application/dxf	                DXF (AutoCAD)	                dxf
        application/i-deas	            SDRC I-DEAS	                    unv
        application/iges	            IGES graphics format	        iges, igs
        application/java-archive	    Java archive	                jar
        application/mac-binhex40	    Macintosh binary BinHex 4.0	    hqx
        application/msaccess	        Microsoft Access	            mdb
        application/msexcel 	        Microsoft Excel	                xla, xls, xlt, xlw
        application/mspowerpoint	    Microsoft PowerPoint	        pot, pps, ppt
        application/msproject	        Microsoft Project	            mpp
        application/msword	            Microsoft Word	                doc, word, w6w
        application/mswrite	            Microsoft Write	                wri
        application/octet-stream	    uninterpreted binary	        bin
        application/oda	                ODA	                            oda
        application/pdf	                Adobe Acrobat	                pdf
        application/postscript	        PostScript	                    ai, eps, ps
        application/pro_eng	            PTC Pro/ENGINEER	            part, prt
        application/rtf	                Rich Text Format	            rtf
        application/set	                SET (French CAD)	            set
        application/sla	                stereolithography	            stl
        application/solids	            MATRA Prelude Solids	        sol
        application/STEP	            ISO-10303 STEP data	            st, step, stp
        application/vda	                VDA-FS Surface data	            vda
        application/x-bcpio	            binary CPIO	                    bcpio
        application/x-cpio	            POSIX CPIO	                    cpio
        application/x-csh	            C-shell script	                csh
        application/x-director	        Macromedia Director	            dcr, dir, dxr
        application/x-dvi	            TeX DVI	                        dvi
        application/x-dwf	            AutoCAD	                        dwf
        application/x-gtar	            GNU tar	                        gtar
        application/x-gzip	            GNU ZIP	                        gz, gzip
        application/x-hdf	            NCSA HDF Data File	            hdf
        application/x-javascript	    JavaScript	                    js
        application/x-latex	            LaTeX source	                latex
        application/x-macbinary	        Macintosh compressed	        bin
        application/x-midi	            MIDI	                        mid
        application/x-mif	            FrameMaker MIF	                mif
        application/x-netcdf	        Unidata netCDF	                cdf, nc
        application/x-sh	            Bourne shell script	            sh
        application/x-shar	            shell archive	                shar
        application/x-shockwave-flash	Macromedia Shockwave	        swf
        application/x-stuffit	        StuffIt archive	                sit
        application/x-sv4cpio	        SVR4 CPIO	                    sv4cpio
        application/x-sv4crc	        SVR4 CPIO with CRC	            sv4crc
        application/x-tar	            4.3BSD tar format	            tar
        application/x-tcl	            TCL script	                    tcl
        application/x-tex	            TeX source	                    tex
        application/x-texinfo	        Texinfo (Emacs)     	        texi, texinfo
        application/x-troff	            Troff	                        roff, t, tr
        application/x-troff-man	        Troff with MAN macros	        man
        application/x-troff-me	        Troff with ME macros	        me
        application/x-troff-ms	        Troff with MS macros	        ms
        application/x-ustar	            POSIX tar format	            ustar
        application/x-wais-source	    WAIS source	                    src
        application/x-winhelp	        Microsoft Windows help	        hlp
        application/zip 	            ZIP archive	                    zip
        audio/basic	                    BASIC audio (u-law)	            au, snd
        audio/midi	                    MIDI	                        mid, midi
        audio/x-aiff	                AIFF audio	                    aif, aifc, aiff
        audio/x-mpeg	                MPEG audio	                    mp3
        audio/x-pn-realaudio	        RealAudio	                    ra, ram
        audio/x-pn-realaudio-plugin	    RealAudio plug-in	            rpm
        audio/x-voice	                Voice	                        voc
        audio/x-wav	                    Microsoft Windows WAVE audio	wav
        image/bmp	                    Bitmap	                        bmp
        image/gif	                    GIF image	                    gif
        image/ief	                    Image Exchange Format	        ief
        image/jpeg	                    JPEG image	                    jpe, jpeg, jpg
        image/pict	                    Macintosh PICT	                pict
        image/png	                    Portable Network Graphic	    png
        image/tiff	                    TIFF image	                    tif, tiff
        image/x-cmu-raster	            CMU raster	                    ras
        image/x-portable-anymap	        PBM Anymap format	            pnm
        image/x-portable-bitmap	        PBM Bitmap format	            pbm
        image/x-portable-graymap	    PBM Graymap format	            pgm
        image/x-portable-pixmap	        PBM Pixmap format	            ppm
        image/x-rgb	                    RGB image	                    rgb
        image/x-xbitmap	                X Bitmap	                    xbm
        image/x-xpixmap	                X Pixmap	                    xpm
        image/x-xwindowdump	            X Window System dump	        xwd
        multipart/x-gzip	            GNU ZIP archive	                gzip
        multipart/x-zip	                PKZIP archive	                zip
        text/html	                    HTML	                        htm, html
        text/plain	                    plain text	                    C, cc, h, txt
        text/richtext	                MIME Richtext	                rtx
        text/tab-separated-values	    text with tabs	                tsv
        text/x-setext	                Structurally Enhanced Text	    etx
        text/x-sgml	                    SGML	                        sgm, sgml
        video/mpeg	                    MPEG video	                    mpe, mpeg, mpg
        video/msvideo	                Microsoft Windows video	        avi
        video/quicktime	                QuickTime video	                mov, qt
        video/vdo	                    VDO streaming video	            vdo
        video/vivo	                    VIVO streaming video	        viv, vivo
        video/x-sgi-movie	            SGI Movieplayer format	        movie
        x-conference/x-cooltalk	        CoolTalk	                    ice
        x-world/x-svr	                Virtual reality	                svr
        x-world/x-vrml	                VRML Worlds	                    wrl
        x-world/x-vrt	                Virtual reality	                vrt

        */

        $this->asset_routing_data_key_lookup_ARRAY['mime_type'] = $tmp_ARRAY;

        $tmp_ARRAY = array('/_config/config.mime_types/text_html/CRNRSTN_HTM/Jonathans_source',
            '/_config/config.mime_types/text_html/CRNRSTN_HTM/Computer Information Systems MSDNAA_cd5_files',
            '/_config/config.mime_types/text_html/CRNRSTN_HTM/Computer Information Systems MSDNAA_SQL_files',
            '/_config/config.mime_types/text_html/CRNRSTN_HTM/Fall Books_files',
            '/_config/config.mime_types/text_html/CRNRSTN_HTM/late fee_files',
            '/_config/config.mime_types/text_html/CRNRSTN_HTM/Populating & Retrieving Data in a listbox_files',
            '/_config/config.mime_types/text_html/CRNRSTN_HTM/UML 2 Component Diagram_files',
            '/_config/config.mime_types/text_html/CRNRSTN_HTM/useCaseDiagram_files',
            '/_config/config.mime_types/text_html/CRNRSTN_HTM/c++boost.gif',
            '/_config/config.mime_types/text_html/CRNRSTN_HTM/google_logo_40wht.gif',
            '/_config/config.mime_types/text_html/CRNRSTN_HTML/(ebook - pdf) - OREILLY - HTML the definite guide.pdf',
            '/_config/config.mime_types/text_html/CRNRSTN_SHTML/management_files',
            '/_config/config.mime_types/application_pdf/CRNRSTN_PDF/last_page.txt',
            '/_config/config.mime_types/application_pdf/CRNRSTN_PDF/cis_assign1_CIS3260_GSU_2002.doc');

        $this->asset_routing_data_key_lookup_ARRAY['mime_type_exclusions'] = $tmp_ARRAY;

        $tmp_ARRAY = array('.css' => 'CRNRSTN_CSS', '.csv' => 'CRNRSTN_CSV',
            '.txt' => 'CRNRSTN_TXT', '.sql' => 'CRNRSTN_SQL', '.bat' => 'CRNRSTN_BAT', '.php' => 'CRNRSTN_PHP',
            '.C' => 'CRNRSTN_C', '.cc' => 'CRNRSTN_CC', '.h' => 'CRNRSTN_H', '.rtf' => 'CRNRSTN_RTF',
            '.tex' => 'CRNRSTN_TEX', '.htm' => 'CRNRSTN_HTM', '.html' => 'CRNRSTN_HTML',
            '.shtml' => 'CRNRSTN_SHTML', '.xhtml' => 'CRNRSTN_XHTML', '.xml' => 'CRNRSTN_XML',
            '.xslt' => 'CRNRSTN_XSLT', '.xul' => 'CRNRSTN_XUL', '.json' => 'CRNRSTN_JSON', '.ics' => 'CRNRSTN_ICS',
            '.tsv' => 'CRNRSTN_TSV', '.jsonld' => 'CRNRSTN_JSONLD', '.mjs' => 'CRNRSTN_MJS',
            '.jar' => 'CRNRSTN_JAR', '.zip' => 'CRNRSTN_ZIP', '.zipx' => 'CRNRSTN_ZIPX', '.bz' => 'CRNRSTN_BZ',
            '.bz2' => 'CRNRSTN_BZ2', '.gz' => 'CRNRSTN_GZ', '.gzip' => 'CRNRSTN_GZIP', '.gtar' => 'CRNRSTN_GTAR',
            '.7z' => 'CRNRSTN_7Z', '.epub' => 'CRNRSTN_EPUB', '.tar' => 'CRNRSTN_TAR', '.otf' => 'CRNRSTN_OTF',
            '.woff' => 'CRNRSTN_WOFF', '.woff2' => 'CRNRSTN_WOFF2', '.ttf' => 'CRNRSTN_TTF',
            '.ico' => 'CRNRSTN_ICO', '.jpg' => 'CRNRSTN_JPG', '.jpe' => 'CRNRSTN_JPE', '.jpeg' => 'CRNRSTN_JPEG',
            '.jpg2' => 'CRNRSTN_JPG2', '.jif' => 'CRNRSTN_JIF', '.jfif' => 'CRNRSTN_JFIF', '.jfi' => 'CRNRSTN_JFI',
            '.gif' => 'CRNRSTN_GIF', '.bmp' => 'CRNRSTN_BMP', '.png' => 'CRNRSTN_PNG', '.svg' => 'CRNRSTN_SVG',
            '.tif' => 'CRNRSTN_TIF', '.tiff' => 'CRNRSTN_TIFF', '.webp' => 'CRNRSTN_WEBP', '.pic' => 'CRNRSTN_PIC',
            '.pict' => 'CRNRSTN_PICT', '.avif' => 'CRNRSTN_AVIF', '.mid' => 'CRNRSTN_MID',
            '.midi' => 'CRNRSTN_MIDI', '.aac' => 'CRNRSTN_AAC', '.oga' => 'CRNRSTN_OGA', '.mp1' => 'CRNRSTN_MP1',
            '.mp2' => 'CRNRSTN_MP2', '.m1a' => 'CRNRSTN_M1A', '.m2a' => 'CRNRSTN_M2A', '.mp3' => 'CRNRSTN_MP3',
            '.mpga' => 'CRNRSTN_MPGA', '.mpa' => 'CRNRSTN_MPA', '.mpv' => 'CRNRSTN_MPV', '.mpg' => 'CRNRSTN_MPG',
            '.ra' => 'CRNRSTN_RA', '.ram' => 'CRNRSTN_RAM', '.rmp' => 'CRNRSTN_RMP', '.dat' => 'CRNRSTN_DAT',
            '.wav' => 'CRNRSTN_WAV', '.wave' => 'CRNRSTN_WAVE', '.wma' => 'CRNRSTN_WMA', '.wmv' => 'CRNRSTN_WMV',
            '.wax' => 'CRNRSTN_WAX', '.wvx' => 'CRNRSTN_WVX', '.asx' => 'CRNRSTN_ASX',
            '.asf' => 'CRNRSTN_ASF', '.wm' => 'CRNRSTN_WM', '.weba' => 'CRNRSTN_WEBA',
            '.3gp' => 'CRNRSTN_3GP', '.3g2' => 'CRNRSTN_3G2', '.opus' => 'CRNRSTN_OPUS', '.m3u' => 'CRNRSTN_M3U',
            '.ogv' => 'CRNRSTN_OGV', '.webm' => 'CRNRSTN_WEBM', '.mp4' => 'CRNRSTN_MP4', '.m4a' => 'CRNRSTN_M4A',
            '.m4p' => 'CRNRSTN_M4P', '.m4b' => 'CRNRSTN_M4B', '.m4r' => 'CRNRSTN_M4R', '.m4v' => 'CRNRSTN_M4V',
            '.mpe' => 'CRNRSTN_MPE', '.mpeg' => 'CRNRSTN_MPEG', '.mpv2' => 'CRNRSTN_MPV2', '.m1v' => 'CRNRSTN_M1V',
            '.m2v' => 'CRNRSTN_M2V', '.mov' => 'CRNRSTN_MOV', '.qt' => 'CRNRSTN_QT', '.qif' => 'CRNRSTN_QIF',
            '.qti' => 'CRNRSTN_QTI', '.qtif' => 'CRNRSTN_QTIF', '.qtc' => 'CRNRSTN_QTC',
            '.movie' => 'CRNRSTN_MOVIE', '.mv' => 'CRNRSTN_MV', '.swf' => 'CRNRSTN_SWF', '.fla' => 'CRNRSTN_FLA',
            '.avi' => 'CRNRSTN_AVI',
            '.avs' => 'CRNRSTN_AVS', '.mjpg' => 'CRNRSTN_MJPG', '.ts' => 'CRNRSTN_TS', '.eot' => 'CRNRSTN_EOT',
            '.abw' => 'CRNRSTN_ABW', '.arc' => 'CRNRSTN_ARC', '.azw' => 'CRNRSTN_AZW', '.bin' => 'CRNRSTN_BIN',
            '.cmd' => 'CRNRSTN_CMD', '.btm' => 'CRNRSTN_BTM', '.cda' => 'CRNRSTN_CDA', '.csh' => 'CRNRSTN_CSH',
            '.odt' => 'CRNRSTN_ODT', '.odp' => 'CRNRSTN_ODP', '.ods' => 'CRNRSTN_ODS', '.pdf' => 'CRNRSTN_PDF',
            '.wks' => 'CRNRSTN_WKS', '.wps' => 'CRNRSTN_WPS', '.wpd' => 'CRNRSTN_WPD', '.doc' => 'CRNRSTN_DOC',
            '.word' => 'CRNRSTN_WORD', '.w6w' => 'CRNRSTN_W6W', '.xlsx' => 'CRNRSTN_XLSX',
            '.pptx' => 'CRNRSTN_PPTX', '.docx' => 'CRNRSTN_DOCX', '.docm' => 'CRNRSTN_DOCM',
            '.dotm' => 'CRNRSTN_DOTM', '.dotx' => 'CRNRSTN_DOTX', '.ppsx' => 'CRNRSTN_PPSX',
            '.potx' => 'CRNRSTN_POTX', '.sldx' => 'CRNRSTN_SLDX', '.vsd' => 'CRNRSTN_VSD',
            '.mpkg' => 'CRNRSTN_MPKG', '.ogx' => 'CRNRSTN_OGX', '.rar' => 'CRNRSTN_RAR', '.sh' => 'CRNRSTN_SH',
            '.dwg' => 'CRNRSTN_DWG', '.arj' => 'CRNRSTN_ARJ', '.asd' => 'CRNRSTN_ASD', '.asn' => 'CRNRSTN_ASN',
            '.ccad' => 'CRNRSTN_CCAD', '.drw' => 'CRNRSTN_DRW', '.dxf' => 'CRNRSTN_DXF', '.unv' => 'CRNRSTN_UNV',
            '.iges' => 'CRNRSTN_IGES', '.igs' => 'CRNRSTN_IGS', '.hqx' => 'CRNRSTN_HQX', '.mdb' => 'CRNRSTN_MDB',
            '.xla' => 'CRNRSTN_XLA', '.xls' => 'CRNRSTN_XLS', '.xlt' => 'CRNRSTN_XLT', '.xlm' => 'CRNRSTN_XLM',
            '.xlsm' => 'CRNRSTN_XLSM', '.xlsb' => 'CRNRSTN_XLSB', '.xlam' => 'CRNRSTN_XLAM',
            '.xltm' => 'CRNRSTN_XLTM', '.xlw' => 'CRNRSTN_XLW', '.pot' => 'CRNRSTN_POT', '.pps' => 'CRNRSTN_PPS',
            '.ppt' => 'CRNRSTN_PPT', '.pptm' => 'CRNRSTN_PPTM', '.potm' => 'CRNRSTN_POTM',
            '.ppam' => 'CRNRSTN_PPAM', '.ppsm' => 'CRNRSTN_PPSM', '.sldm' => 'CRNRSTN_SLDM', '.pa' => 'CRNRSTN_PA',
            '.mpp' => 'CRNRSTN_MPP', '.wri' => 'CRNRSTN_WRI', '.oda' => 'CRNRSTN_ODA', '.ai' => 'CRNRSTN_AI',
            '.psd' => 'CRNRSTN_PSD', '.eps' => 'CRNRSTN_EPS', '.ps' => 'CRNRSTN_PS', '.part' => 'CRNRSTN_PART',
            '.prt' => 'CRNRSTN_PRT', '.set' => 'CRNRSTN_SET', '.stl' => 'CRNRSTN_STL', '.sol' => 'CRNRSTN_SOL',
            '.st' => 'CRNRSTN_ST', '.step' => 'CRNRSTN_STEP', '.stp' => 'CRNRSTN_STP', '.vda' => 'CRNRSTN_VDA',
            '.bcpio' => 'CRNRSTN_BCPIO', '.cpio' => 'CRNRSTN_CPIO', '.dcr' => 'CRNRSTN_DCR',
            '.dir' => 'CRNRSTN_DIR', '.dxr' => 'CRNRSTN_DXR', '.dvi' => 'CRNRSTN_DVI', '.dwf' => 'CRNRSTN_DWF',
            '.hdf' => 'CRNRSTN_HDF', '.js' => 'CRNRSTN_JS', '.latex' => 'CRNRSTN_LATEX', '.mif' => 'CRNRSTN_MIF',
            '.cdf' => 'CRNRSTN_CDF', '.nc' => 'CRNRSTN_NC', '.shar' => 'CRNRSTN_SHAR', '.sit' => 'CRNRSTN_SIT',
            '.sv4cpio' => 'CRNRSTN_SV4CPIO', '.sv4crc' => 'CRNRSTN_SV4CRC', '.tcl' => 'CRNRSTN_TCL',
            '.texi' => 'CRNRSTN_TEXI', '.texinfo' => 'CRNRSTN_TEXINFO', '.roff' => 'CRNRSTN_ROFF',
            '.t' => 'CRNRSTN_T', '.tr' => 'CRNRSTN_TR', '.man' => 'CRNRSTN_MAN', '.me' => 'CRNRSTN_ME',
            '.ms' => 'CRNRSTN_MS', '.ustar' => 'CRNRSTN_USTAR', '.src' => 'CRNRSTN_SRC', '.hlp' => 'CRNRSTN_HLP',
            '.au' => 'CRNRSTN_AU', '.snd' => 'CRNRSTN_SND', '.aif' => 'CRNRSTN_AIF', '.aifc' => 'CRNRSTN_AIFC',
            '.aiff' => 'CRNRSTN_AIFF', '.voc' => 'CRNRSTN_VOC', '.ief' => 'CRNRSTN_IEF', '.ras' => 'CRNRSTN_RAS',
            '.pnm' => 'CRNRSTN_PNM', '.pbm' => 'CRNRSTN_PBM', '.pgm' => 'CRNRSTN_PGM', '.ppm' => 'CRNRSTN_PPM',
            '.rgb' => 'CRNRSTN_RGB', '.xbm' => 'CRNRSTN_XBM', '.xpm' => 'CRNRSTN_XPM', '.xwd' => 'CRNRSTN_XWD',
            '.rtx' => 'CRNRSTN_RTX', '.etx' => 'CRNRSTN_ETX', '.sgm' => 'CRNRSTN_SGM', '.sgml' => 'CRNRSTN_SGML',
            '.vdo' => 'CRNRSTN_VDO', '.viv' => 'CRNRSTN_VIV', '.vivo' => 'CRNRSTN_VIVO', '.ice' => 'CRNRSTN_ICE',
            '.svr' => 'CRNRSTN_SVR', '.wrl' => 'CRNRSTN_WRL', '.vrt' => 'CRNRSTN_VRT', '.exe' => 'CRNRSTN_EXE',
            '.bit' => 'CRNRSTN_BIT', '.pages' => 'CRNRSTN_PAGES', '.key' => 'CRNRSTN_KEY',
            '.afphoto' => 'CRNRSTN_AFPHOTO', '.afdesign' => 'CRNRSTN_AFDESIGN', '.cpt' => 'CRNRSTN_CPT',
            '.cdr' => 'CRNRSTN_CDR');

        $this->asset_routing_data_key_lookup_ARRAY['file_ext'] = $tmp_ARRAY;

        $tmp_ARRAY = array('amazon_icon' => 'SOCIAL_AMAZON', 'amazon_icon_hq' => 'SOCIAL_AMAZON_HQ',
            'apple_logo_blk' => 'SOCIAL_APPLE_LOGO_BLK', 'apple_logo_wht' => 'SOCIAL_APPLE_LOGO_WHT',
            'apple_logo_blk_hq' => 'SOCIAL_APPLE_LOGO_BLK_HQ', 'apple_logo_grey' => 'SOCIAL_APPLE_LOGO_GREY',
            'apple_logo_blk_wht_circle' => 'SOCIAL_APPLE_LOGO_BLK_WHT_CIRCLE',
            'apple_logo_grey_hq' => 'SOCIAL_APPLE_LOGO_GREY_HQ', 'apple_logo_wht_hq' => 'SOCIAL_APPLE_LOGO_WHT_HQ',
            'apple_logo_blk_wht_circle_hq' => 'SOCIAL_APPLE_LOGO_BLK_WHT_CIRCLE_HQ',
            'apple_logo_grey_blk_circle' => 'SOCIAL_APPLE_LOGO_GREY_BLK_CIRCLE',
            'apple_logo_grey_blk_circle_hq' => 'SOCIAL_APPLE_LOGO_GREY_BLK_CIRCLE_HQ',
            'apple_logo_grey_wht_circle' => 'SOCIAL_APPLE_LOGO_GREY_WHT_CIRCLE',
            'apple_logo_grey_wht_circle_hq' => 'SOCIAL_APPLE_LOGO_GREY_WHT_CIRCLE_HQ',
            'apple_logo_wht_blk_circle' => 'SOCIAL_APPLE_LOGO_WHT_BLK_CIRCLE',
            'apple_logo_wht_blk_circle_hq' => 'SOCIAL_APPLE_LOGO_WHT_BLK_CIRCLE_HQ',
            'apple_music' => 'SOCIAL_APPLE_MUSIC', 'apple_music_hq' => 'SOCIAL_APPLE_MUSIC_HQ',
            'archives' => 'SOCIAL_ARCHIVES', 'archives_hq' => 'SOCIAL_ARCHIVES_HQ', 'bandcamp' => 'SOCIAL_BANDCAMP',
            'bandcamp_hq' => 'SOCIAL_BANDCAMP_HQ', 'bassdrive' => 'SOCIAL_BASSDRIVE', 'bassdrive_hq' => 'SOCIAL_BASSDRIVE_HQ',
            'beatport' => 'SOCIAL_BEATPORT', 'beatport_hq' => 'SOCIAL_BEATPORT_HQ', 'blogspot' => 'SOCIAL_BLOGSPOT',
            'blogspot_hq' => 'SOCIAL_BLOGSPOT_HQ', 'bluehost_icon' => 'SOCIAL_BLUEHOST_ICON',
            'bluehost_icon_hq' => 'SOCIAL_BLUEHOST_ICON_HQ', 'bluehost_wordmark' => 'SOCIAL_BLUEHOST_WORDMARK',
            'bluehost_wordmark_hq' => 'SOCIAL_BLUEHOST_WORDMARK_HQ', 'discogs' => 'SOCIAL_DISCOGS',
            'discogs_hq' => 'SOCIAL_DISCOGS_HQ', 'dribble' => 'SOCIAL_DRIBBLE', 'dribble_hq' => 'SOCIAL_DRIBBLE_HQ',
            'ebay' => 'SOCIAL_EBAY', 'ebay_hq' => 'SOCIAL_EBAY_HQ', 'etsy' => 'SOCIAL_ETSY', 'etsy_hq' => 'SOCIAL_ETSY_HQ',
            'facebook' => 'SOCIAL_FACEBOOK', 'facebook_hq' => 'SOCIAL_FACEBOOK_HQ', 'feedburner' => 'SOCIAL_FEEDBURNER',
            'feedburner_hq' => 'SOCIAL_FEEDBURNER_HQ', 'flickr' => 'SOCIAL_FLICKR', 'flickr_hq' => 'SOCIAL_FLICKR_HQ',
            'github' => 'SOCIAL_GITHUB', 'github_hq' => 'SOCIAL_GITHUB_HQ', 'google_drive' => 'SOCIAL_GOOGLE_DRIVE',
            'google_drive_hq' => 'SOCIAL_GOOGLE_DRIVE_HQ', 'google_maps' => 'SOCIAL_GOOGLE_MAPS',
            'google_maps_hq' => 'SOCIAL_GOOGLE_MAPS_HQ', 'google_maps_square' => 'SOCIAL_GOOGLE_MAPS_SQUARE',
            'google_maps_square_hq' => 'SOCIAL_GOOGLE_MAPS_SQUARE_HQ', 'history' => 'SOCIAL_HISTORY',
            'history_hq' => 'SOCIAL_HISTORY_HQ', 'ide1_icon' => 'SOCIAL_IDEONE', 'ide1_icon_hq' => 'SOCIAL_IDEONE_HQ',
            'instagram' => 'SOCIAL_INSTAGRAM', 'instagram_hq' => 'SOCIAL_INSTAGRAM_HQ',
            'internet_archive' => 'SOCIAL_INTERNET_ARCHIVE', 'internet_archive_hq' => 'SOCIAL_INTERNET_ARCHIVE_HQ',
            'json' => 'SOCIAL_JSON', 'json_hq' => 'SOCIAL_JSON_HQ', 'kink' => 'SOCIAL_KINK', 'kink_hq' => 'SOCIAL_KINK_HQ',
            'last_fm' => 'SOCIAL_LAST_FM', 'last_fm_hq' => 'SOCIAL_LAST_FM_HQ', 'linkedin' => 'SOCIAL_LINKEDIN',
            'linkedin_hq' => 'SOCIAL_LINKEDIN_HQ', 'microsoft_icon' => 'SOCIAL_MICROSOFT',
            'microsoft_icon_hq' => 'SOCIAL_MICROSOFT_HQ', 'mixcloud' => 'SOCIAL_MIXCLOUD',
            'mixcloud_hq' => 'SOCIAL_MIXCLOUD_HQ', 'mozilla_icon' => 'SOCIAL_MOZILLA_ICON',
            'mozilla_icon_hq' => 'SOCIAL_MOZILLA_ICON_HQ', 'mozilla_wordmark' => 'SOCIAL_MOZILLA_WORDMARK',
            'mozilla_wordmark_hq' => 'SOCIAL_MOZILLA_WORDMARK_HQ', 'pandora_icon' => 'SOCIAL_PANDORA',
            'pandora_icon_hq' => 'SOCIAL_PANDORA_HQ', 'patreon' => 'SOCIAL_PATREON', 'patreon_hq' => 'SOCIAL_PATREON_HQ',
            'paypal' => 'SOCIAL_PAYPAL', 'paypal_hq' => 'SOCIAL_PAYPAL_HQ', 'php_icon' => 'SOCIAL_PHP',
            'php_icon_hq' => 'SOCIAL_PHP_HQ', 'pinterest' => 'SOCIAL_PINTEREST', 'pinterest_hq' => 'SOCIAL_PINTEREST_HQ',
            'pornhub' => 'SOCIAL_PORNHUB', 'pornhub_hq' => 'SOCIAL_PORNHUB_HQ', 'reddit' => 'SOCIAL_REDDIT',
            'reddit_hq' => 'SOCIAL_REDDIT_HQ', 'rolldabeats' => 'SOCIAL_ROLLDABEATS',
            'rolldabeats_hq' => 'SOCIAL_ROLLDABEATS_HQ', 'server_fault' => 'SOCIAL_SERVER_FAULT',
            'server_fault_hq' => 'SOCIAL_SERVER_FAULT_HQ', 'slashdot_icon' => 'SOCIAL_SLASHDOT_ICON',
            'slashdot_icon_hq' => 'SOCIAL_SLASHDOT_ICON_HQ', 'slashdot_wordmark' => 'SOCIAL_SLASHDOT_WORDMARK',
            'slashdot_wordmark_hq' => 'SOCIAL_SLASHDOT_WORDMARK_HQ', 'soundcloud' => 'SOCIAL_SOUNDCLOUD',
            'soundcloud_hq' => 'SOCIAL_SOUNDCLOUD_HQ', 'spotify' => 'SOCIAL_SPOTIFY', 'spotify_hq' => 'SOCIAL_SPOTIFY_HQ',
            'social/sprite' => 'SOCIAL_SPRITE',
            'social/sprite_hq' => 'SOCIAL_SPRITE_HQ', 'stackoverflow' => 'SOCIAL_STACKOVERFLOW',
            'stackoverflow_hq' => 'SOCIAL_STACKOVERFLOW_HQ', 'twitch' => 'SOCIAL_TWITCH', 'twitch_hq' => 'SOCIAL_TWITCH_HQ',
            'twitter' => 'SOCIAL_TWITTER', 'twitter_hq' => 'SOCIAL_TWITTER_HQ',
            'vimeo_blue_icon' => 'SOCIAL_VIMEO_BLUE_ICON', 'vimeo_blue_icon_hq' => 'SOCIAL_VIMEO_BLUE_ICON_HQ',
            'vimeo_blue_wordmark' => 'SOCIAL_VIMEO_BLUE_WORDMARK',
            'vimeo_blue_wordmark_hq' => 'SOCIAL_VIMEO_BLUE_WORDMARK_HQ',
            'vimeo_darkforest_wordmark' => 'SOCIAL_VIMEO_DARKFOREST_WORDMARK',
            'vimeo_darkforest_wordmark_hq' => 'SOCIAL_VIMEO_DARKFOREST_WORDMARK_HQ', 'w3c' => 'SOCIAL_W3C',
            'w3c_hq' => 'SOCIAL_W3C_HQ', 'wikipedia' => 'SOCIAL_WIKIPEDIA', 'wikipedia_hq' => 'SOCIAL_WIKIPEDIA_HQ',
            'www' => 'SOCIAL_WWW', 'www_hq' => 'SOCIAL_WWW_HQ', 'xhamster_icon' => 'SOCIAL_XHAMSTER_ICON',
            'xhamster_icon_hq' => 'SOCIAL_XHAMSTER_ICON_HQ', 'xhamster_wordmark' => 'SOCIAL_XHAMSTER_WORDMARK',
            'xhamster_wordmark_hq' => 'SOCIAL_XHAMSTER_WORDMARK_HQ', 'xnxx' => 'SOCIAL_XNXX', 'xnxx_hq' => 'SOCIAL_XNXX_HQ',
            'xvideos' => 'SOCIAL_XVIDEOS', 'xvideos_hq' => 'SOCIAL_XVIDEOS_HQ', 'youtube' => 'SOCIAL_YOUTUBE',
            'youtube_hq' => 'SOCIAL_YOUTUBE_HQ');

        $this->asset_routing_data_key_lookup_ARRAY['social'] = $tmp_ARRAY;

        $tmp_ARRAY = array('system/sprite' => 'SYSTEM_SPRITE', 'system/sprite_hq' => 'SYSTEM_SPRITE_HQ',
            'crnrstn_logo_social_preview_github_00' => 'SOCIAL_META_PREVIEW', '5' => 'FIVE',
            'apache_feather_logo' => 'APACHE_FEATHER', 'crnrstn_R_lg' => 'CRNRSTN_R_LG', 'crnrstn_R_md' => 'CRNRSTN_R_MD',
            'crnrstn_R_md_plus_wall' => 'CRNRSTN_R_WALL', 'crnrstn_R_sm' => 'CRNRSTN_R_SM',
            'crnrstn_css_validator_logo_smedia' => 'crnrstn_css_validator_logo_smedia', 'crnrstn_logo_lg' => 'CRNRSTN_LOGO',
            'crnrstn_logo_md' => 'crnrstn_logo_md', 'crnrstn_logo_sm' => 'crnrstn_logo_sm',
            'crnrstn_logo_twitter_api_app_profile' => 'crnrstn_logo_twitter_api_app_profile', 'crnrstn_message_bubbles_seriesblue00' => 'MESSAGE_CONVERSATION_BUBBLE_MICRO_THUMB_BLUE00',
            'crnrstn_messenger_message_bubbles' => 'MESSAGE_CONVERSATION_BUBBLE', 'dot_grey' => 'DOT_GREY', 'dot_grn' => 'DOT_GREEN', 'dot_red' => 'DOT_RED',
            'elem_shadow_btm' => 'BG_ELEMENT_RESPONSE_CODE', 'element_page_load_indicator' => 'UI_PAGELOAD_INDICATOR',
            'email_inbox_icon' => 'ICON_EMAIL_INBOX_REFLECTED', 'err_x' => 'ERR_X', 'favicon' => 'CRNRSTN_FAVICON', 'j5_pup_top_right' => 'J5_WOLF_PUP_TOP_RIGHT',
            'j5_wolf_pup' => 'J5_WOLF_PUP', 'j5_wolf_pup_lay_00' => 'J5_WOLF_PUP_LAY_00', 'j5_wolf_pup_lay_01' => 'J5_WOLF_PUP_LAY_01',
            'j5_wolf_pup_lay_02' => 'J5_WOLF_PUP_LAY_02', 'j5_wolf_pup_lay_look_away' => 'J5_WOLF_PUP_LAY_LOOK_AWAY',
            'j5_wolf_pup_lay_look_forward' => 'J5_WOLF_PUP_LAY_LOOK_FORWARD', 'j5_wolf_pup_lay_look_forward_leash' => 'J5_WOLF_PUP_LAY_LOOK_FORWARD_LEASH',
            'j5_wolf_pup_leash_eyes_closed' => 'J5_WOLF_PUP_LEASH_EYES_CLOSED', 'j5_wolf_pup_lil_5_pts' => 'J5_WOLF_PUP_LIL_5_PTS',
            'j5_wolf_pup_sit_eyes_closed' => 'J5_WOLF_PUP_SIT_EYES_CLOSED', 'j5_wolf_pup_sit_look_forward' => 'J5_WOLF_PUP_SIT_LOOK_FORWARD',
            'j5_wolf_pup_sit_look_left_ish_shadow' => 'J5_WOLF_PUP_SIT_LOOK_LEFT_ISH_SHADOW', 'j5_wolf_pup_sit_look_right' => 'J5_WOLF_PUP_SIT_LOOK_RIGHT',
            'j5_wolf_pup_sit_look_right_longshadow' => 'J5_WOLF_PUP_SIT_LOOK_RIGHT_LONGSHADOW', 'j5_wolf_pup_sit_look_right_shadow' => 'J5_WOLF_PUP_SIT_LOOK_RIGHT_SHADOW',
            'j5_wolf_pup_sit_look_right_shortshadow' => 'J5_WOLF_PUP_SIT_LOOK_RIGHT_SHORT_SHADOW', 'j5_wolf_pup_sit_look_right_up' => 'J5_WOLF_PUP_SIT_LOOK_RIGHT_UP',
            'j5_wolf_pup_sit_look_rightsharp_shadow' => 'J5_WOLF_PUP_SIT_LOOK_RIGHTSHARP_SHADOW', 'j5_wolf_pup_stand_look_right' => 'J5_WOLF_PUP_STAND_LOOK_RIGHT',
            'j5_wolf_pup_stand_look_up' => 'J5_WOLF_PUP_STAND_LOOK_UP', 'j5_wolf_pup_walk' => 'J5_WOLF_PUP_WALK', 'linux_penguin_lg' => 'LINUX_PENGUIN_LRG',
            'linux_penguin_md' => 'LINUX_PENGUIN_MED', 'linux_penguin_sm' => 'LINUX_PENGUIN_SMALL', 'mag_glass_search' => 'SEARCH_MAGNIFY_GLASS',
            'mysql_logo' => 'MYSQL_DOLPHIN', 'php_logo' => 'PHP_ELLIPSE', 'powered_by_apache' => 'APACHE_POWER', 'powered_by_apache_1_3' => 'APACHE_POWER_1_3',
            'powered_by_apache_2' => 'APACHE_POWER_2_0', 'powered_by_apache_2_2' => 'APACHE_POWER_2_2', 'powered_by_apache_2_4' => 'APACHE_POWER_2_4',
            'powered_by_php' => 'POWER_BY_PHP', 'primary_nav_seriesblue00_120x120_close_x' => 'PRIMARY_NAV_BLUE00_CLOSE_X',
            'primary_nav_seriesblue00_120x120_close_x_click' => 'PRIMARY_NAV_BLUE00_CLOSE_X_CLICK',
            'primary_nav_seriesblue00_120x120_close_x_hvr' => 'PRIMARY_NAV_BLUE00_CLOSE_X_HOVER',
            'primary_nav_seriesblue00_120x120_close_x_inactive' => 'PRIMARY_NAV_BLUE00_CLOSE_X_INACTIVE',
            'primary_nav_seriesblue00_120x120_fs_expand' => 'PRIMARY_NAV_BLUE00_FULLSCREEN_EXPAND',
            'primary_nav_seriesblue00_120x120_fs_expand_click' => 'PRIMARY_NAV_BLUE00_FULLSCREEN_EXPAND_CLICK',
            'primary_nav_seriesblue00_120x120_fs_expand_hvr' => 'PRIMARY_NAV_BLUE00_FULLSCREEN_EXPAND_HOVER',
            'primary_nav_seriesblue00_120x120_fs_expand_inactive' => 'PRIMARY_NAV_BLUE00_FULLSCREEN_EXPAND_INACTIVE',
            'primary_nav_seriesblue00_120x120_menu' => 'PRIMARY_NAV_BLUE00_MENU', 'primary_nav_seriesblue00_120x120_menu_click' => 'PRIMARY_NAV_BLUE00_MENU_CLICK',
            'primary_nav_seriesblue00_120x120_menu_hvr' => 'PRIMARY_NAV_BLUE00_MENU_HOVER',
            'primary_nav_seriesblue00_120x120_menu_inactive' => 'PRIMARY_NAV_BLUE00_MENU_INACTIVE',
            'primary_nav_seriesblue00_120x120_minimize' => 'PRIMARY_NAV_BLUE00_MINIMIZE',
            'primary_nav_seriesblue00_120x120_minimize_click' => 'PRIMARY_NAV_BLUE00_MINIMIZE_CLICK',
            'primary_nav_seriesblue00_120x120_minimize_fivedev' => 'PRIMARY_NAV_BLUE00_MINIMIZE_FIVEDEV',
            'primary_nav_seriesblue00_120x120_minimize_fivedev_sm' => 'PRIMARY_NAV_BLUE00_MINIMIZE_FIVEDEV_SMALL',
            'primary_nav_seriesblue00_120x120_minimize_hvr' => 'PRIMARY_NAV_BLUE00_MINIMIZE_HOVER',
            'primary_nav_seriesblue00_120x120_minimize_inactive' => 'PRIMARY_NAV_BLUE00_MINIMIZE_INACTIVE',
            'r_stone_giant_pillar' => 'R_STONE_GIANT_PILLAR', 'r_stone_pillar' => 'R_STONE_PILLAR', 'redhat_hat_logo' => 'REDHAT_HAT_LOGO',
            'redhat_logo' => 'REDHAT_LOGO', 'signin_frm_reflection' => 'BG_ELEMENT_REFLECTION_SIGNIN', 'stache' => 'STACHE', 'stache_social' => 'STACHE_SOCIAL',
            'success_chk' => 'SUCCESS_CHECK', 'triangle_alert' => 'NOTICE_TRI_ALERT', 'triangle_alert_hq' => 'NOTICE_TRI_ALERT_HQ',
            'wood' => 'WOOD', 'x' => 'TRANSPARENT_1X1', 'zend_framework' => 'ZEND_FRAMEWORK',
            'zend_framework_3' => 'ZEND_FRAMEWORK_3', 'zend_logo' => 'ZEND_LOGO');

        $this->asset_routing_data_key_lookup_ARRAY['system'] = $tmp_ARRAY;

        $tmp_ARRAY = array('meta/php/add_cookie' => 'add_cookie', 'meta/php/add_raw_cookie' => 'add_raw_cookie',
            'meta/php/add_resource' => 'add_resource', 'meta/php/better_scandir' => 'better_scandir',
            'meta/php/bit_stringin' => 'bit_stringin', 'meta/php/bit_stringout' => 'bit_stringout', 'meta/php/catch_exception' => 'catch_exception',
            'meta/php/clear_all_bits_set_one' => 'clear_all_bits_set_one', 'meta/php/config_add_database' => 'config_add_database',
            'meta/php/config_add_environment' => 'config_add_environment', 'meta/php/config_add_seo_analytics' => 'config_add_seo_analytics',
            'meta/php/config_add_seo_engagement' => 'config_add_seo_engagement', 'meta/php/config_add_resource' => 'config_add_resource',
            'meta/php/config_deny_access' => 'config_deny_access', 'meta/php/config_detect_environment' => 'config_detect_environment',
            'meta/php/config_include_encryption' => 'config_include_encryption', 'meta/php/config_include_seo_analytics' => 'config_include_seo_analytics',
            'meta/php/config_include_seo_engagement' => 'config_include_seo_engagement', 'meta/php/config_include_social_media' => 'config_include_social_media',
            'meta/php/config_include_sql_silo' => 'config_include_sql_silo', 'meta/php/config_include_system_resources' => 'config_include_system_resources', 'meta/php/config_include_wordpress' => 'config_include_wordpress',
            'meta/php/config_ini_set' => 'config_ini_set', 'meta/php/config_init_asset_map_css' => 'config_init_asset_map_css',
            'meta/php/config_init_asset_map_favicon' => 'config_init_asset_map_favicon', 'meta/php/config_init_asset_map_js' => 'config_init_asset_map_js',
            'meta/php/config_init_asset_map_social_img' => 'config_init_asset_map_social_img', 'meta/php/config_init_asset_map_system_img' => 'config_init_asset_map_system_img',
            'meta/php/config_init_cookie_encryption' => 'config_init_cookie_encryption',

            'meta/php/config_init_get_encryption' => 'config_init_get_encryption',
            'meta/php/config_init_post_encryption' => 'config_init_post_encryption',
            'meta/php/config_init_database_encryption' => 'config_init_database_encryption',

            'meta/php/config_init_html_mode_email' => 'config_init_html_mode_email', 'meta/php/config_init_http' => 'config_init_http',
            'meta/php/config_init_js_css_minimization' => 'config_init_js_css_minimization', 'meta/php/config_init_logging' => 'config_init_logging',
            'meta/php/config_init_oersl_encryption' => 'config_init_oersl_encryption', 'meta/php/config_init_session_encryption' => 'config_init_session_encryption',
            'meta/php/config_init_soap_encryption' => 'config_init_soap_encryption', 'meta/php/config_init_sys_resp_return_profile' => 'config_init_sys_resp_return_profile',
            'meta/php/config_init_tunnel_encryption' => 'config_init_tunnel_encryption', 'meta/php/config_load_system_overrides' => 'config_load_system_overrides',
            'meta/php/config_custom_error_handler' => 'config_custom_error_handler', 'meta/php/config_set_timezone_default' => 'config_set_timezone_default',
            'meta/php/config_set_ui_theme_style' => 'config_set_ui_theme_style', 'meta/php/data_decrypt' => 'data_decrypt', 'meta/php/data_encrypt' => 'data_encrypt',
            'meta/php/delete_all_cookies' => 'delete_all_cookies', 'meta/php/delete_cookie' => 'delete_cookie', 'meta/php/device_type' => 'device_type',
            'meta/php/device_type_bit' => 'device_type_bit', 'meta/php/error_log' => 'error_log', 'meta/php/format_bytes' => 'format_bytes',
            'meta/php/generate_new_key' => 'generate_new_key', 'meta/php/get_cookie' => 'get_cookie', 'meta/php/get_disk_free_space' => 'get_disk_free_space',
            'meta/php/get_disk_performance_metric' => 'get_disk_performance_metric', 'meta/php/get_disk_size' => 'get_disk_size',
            'meta/php/get_headers' => 'get_headers', 'meta/php/get_mobile_browsers' => 'get_mobile_browsers', 'meta/php/get_mobile_devices' => 'get_mobile_devices',
            'meta/php/get_mobile_os' => 'get_mobile_os', 'meta/php/get_resource' => 'get_resource', 'meta/php/get_resource_count' => 'get_resource_count',
            'meta/php/get_tablet_devices' => 'get_tablet_devices', 'meta/php/get_user_agent' => 'get_user_agent', 'meta/php/grant_permissions_fwrite' => 'grant_permissions_fwrite',
            'meta/php/hash' => 'hash', 'meta/php/header_options_add' => 'header_options_add', 'meta/php/header_options_apply' => 'header_options_apply',
            'meta/php/header_signature_options_return' => 'header_signature_options_return', 'meta/php/ini_get' => 'ini_get', 'meta/php/ini_set' => 'ini_set',
            'meta/php/initialize_bit' => 'initialize_bit', 'meta/php/initialize_serialized_bit' => 'initialize_serialized_bit',
            'meta/php/is_bit_set' => 'is_bit_set', 'meta/php/is_configured' => 'is_configured', 'meta/php/is_mobile' => 'is_mobile',
            'meta/php/is_serialized_bit_set' => 'is_serialized_bit_set', 'meta/php/is_ssl' => 'is_ssl', 'meta/php/is_tablet' => 'is_tablet',
            'meta/php/iso_language_html' => 'iso_language_html', 'meta/php/iso_language_profile' => 'iso_language_profile', 'meta/php/iso_language_profile_count' => 'iso_language_profile_count',
            'meta/php/isset_data_key' => 'isset_data_key', 'meta/php/isset_encryption' => 'isset_encryption', 'meta/php/openssl_get_cipher_methods' => 'openssl_get_cipher_methods',
            'meta/php/print_r' => 'print_r', 'meta/php/print_r_str' => 'print_r_str', 'meta/php/proper_version' => 'proper_version', 'meta/php/return_data_key' => 'return_data_key',
            'meta/php/return_int_const_profile' => 'return_int_const_profile', 'meta/php/return_set_bits' => 'return_set_bits', 'meta/php/return_sticky_media_link' => 'return_sticky_media_link',
            'meta/php/return_system_image' => 'return_system_image', 'meta/php/return_youtube_embed' => 'return_youtube_embed', 'meta/php/salt' => 'salt',
            'meta/php/serialized_bit_stringin' => 'serialized_bit_stringin', 'meta/php/serialized_bit_stringout' => 'serialized_bit_stringout',
            'meta/php/set_desktop' => 'set_desktop', 'meta/php/set_mobile' => 'set_mobile', 'meta/php/set_tablet' => 'set_tablet', 'meta/php/set_timezone_default' => 'set_timezone_default',
            'meta/php/set_ui_theme_style' => 'set_ui_theme_style', 'meta/php/soap_defencoding' => 'soap_defencoding', 'meta/php/strrtrim' => 'strrtrim',
            'meta/php/system_base64_synchronize' => 'system_base64_synchronize', 'meta/php/system_hash_algo' => 'system_hash_algo',
            'meta/php/system_output_footer_html' => 'system_output_footer_html', 'meta/php/system_output_head_html' => 'system_output_head_html',
            'meta/php/toggle_bit' => 'toggle_bit', 'meta/php/toggle_serialized_bit' => 'toggle_serialized_bit', 'meta/php/var_dump' => 'var_dump',
            'meta/php/version_apache' => 'version_apache', 'meta/php/version_crnrstn' => 'version_crnrstn', 'meta/php/version_linux' => 'version_linux',
            'meta/php/version_mobile_detect' => 'version_mobile_detect', 'meta/php/version_mysqli' => 'version_mysqli', 'meta/php/version_openssl' => 'version_openssl',
            'meta/php/version_php' => 'version_php', 'meta/php/version_soap' => 'version_soap');

        $this->asset_routing_data_key_lookup_ARRAY['meta'] = $tmp_ARRAY;

        $tmp_ARRAY = array('add_cookie' => 'ADD_COOKIE_SOCIAL_META_PREVIEW', 'add_raw_cookie' => 'ADD_RAW_COOKIE_SOCIAL_META_PREVIEW',
            'add_resource' => 'ADD_SYSTEM_RESOURCE_SOCIAL_META_PREVIEW', 'better_scandir' => 'BETTER_SCANDIR_SOCIAL_META_PREVIEW',
            'bit_stringin' => 'BIT_STRINGIN_SOCIAL_META_PREVIEW', 'bit_stringout' => 'BIT_STRINGOUT_SOCIAL_META_PREVIEW', 'catch_exception' => 'CATCH_EXCEPTION_SOCIAL_META_PREVIEW',
            'clear_all_bits_set_one' => 'CLEAR_ALL_BITS_SET_ONE_SOCIAL_META_PREVIEW', 'config_add_database' => 'CONFIG_ADD_DATABASE_SOCIAL_META_PREVIEW',
            'config_add_environment' => 'CONFIG_ADD_ENVIRONMENT_SOCIAL_META_PREVIEW', 'config_add_seo_analytics' => 'CONFIG_ADD_SEO_ANALYTICS_SOCIAL_META_PREVIEW',
            'config_add_seo_engagement' => 'CONFIG_ADD_SEO_ENGAGEMENT_SOCIAL_META_PREVIEW', 'config_add_resource' => 'CONFIG_ADD_SYSTEM_RESOURCE_SOCIAL_META_PREVIEW',
            'config_deny_access' => 'CONFIG_DENY_ACCESS_SOCIAL_META_PREVIEW', 'config_detect_environment' => 'CONFIG_DETECT_ENVIRONMENT_SOCIAL_META_PREVIEW',
            'config_include_encryption' => 'CONFIG_INCLUDE_ENCRYPTION_SOCIAL_META_PREVIEW', 'config_include_seo_analytics' => 'CONFIG_INCLUDE_SEO_ANALYTICS_SOCIAL_META_PREVIEW',
            'config_include_seo_engagement' => 'CONFIG_INCLUDE_SEO_ENGAGEMENT_SOCIAL_META_PREVIEW', 'config_include_social_media' => 'CONFIG_INCLUDE_SOCIAL_MEDIA_SOCIAL_META_PREVIEW',
            'config_include_sql_silo' => 'CONFIG_INCLUDE_SQL_SILO_SOCIAL_META_PREVIEW', 'config_include_system_resources' => 'CONFIG_INCLUDE_SYSTEM_RESOURCES_SOCIAL_META_PREVIEW',
            'config_include_wordpress' => 'CONFIG_INCLUDE_WORDPRESS_SOCIAL_META_PREVIEW', 'config_ini_set' => 'CONFIG_INI_SET_SOCIAL_META_PREVIEW',
            'config_init_asset_map_css' => 'CONFIG_INIT_ASSET_MAPPING_CSS_SOCIAL_META_PREVIEW', 'config_init_asset_map_favicon' => 'CONFIG_INIT_ASSET_MAPPING_FAVICON_SOCIAL_META_PREVIEW',
            'config_init_asset_map_js' => 'CONFIG_INIT_ASSET_MAPPING_JS_SOCIAL_META_PREVIEW', 'config_init_asset_map_social_img' => 'CONFIG_INIT_ASSET_MAPPING_SOCIAL_IMG_SOCIAL_META_PREVIEW',
            'config_init_asset_map_system_img' => 'CONFIG_INIT_ASSET_MAPPING_SYSTEM_IMG_SOCIAL_META_PREVIEW', 'config_init_cookie_encryption' => 'CONFIG_INIT_COOKIE_ENCRYPTION_SOCIAL_META_PREVIEW',

            'config_init_get_encryption' => 'CONFIG_INIT_GET_ENCRYPTION_SOCIAL_META_PREVIEW',
            'config_init_post_encryption' => 'CONFIG_INIT_POST_ENCRYPTION_SOCIAL_META_PREVIEW',
            'config_init_database_encryption' => 'CONFIG_INIT_DATABASE_ENCRYPTION_SOCIAL_META_PREVIEW',
            'config_init_html_mode_email' => 'CONFIG_INIT_HTML_MODE_EMAIL_SOCIAL_META_PREVIEW',
            'config_init_http' => 'CONFIG_INIT_HTTP_SOCIAL_META_PREVIEW', 'config_init_js_css_minimization' => 'CONFIG_INIT_JS_CSS_MINIMIZATION_SOCIAL_META_PREVIEW',
            'config_init_logging' => 'CONFIG_INIT_LOGGING_SOCIAL_META_PREVIEW', 'config_init_oersl_encryption' => 'CONFIG_INIT_OERSL_ENCRYPTION_SOCIAL_META_PREVIEW',
            'config_init_session_encryption' => 'CONFIG_INIT_SESSION_ENCRYPTION_SOCIAL_META_PREVIEW', 'config_init_soap_encryption' => 'CONFIG_INIT_SOAP_ENCRYPTION_SOCIAL_META_PREVIEW',
            'config_init_sys_resp_return_profile' => 'CONFIG_INIT_SYSTEM_ASSET_MODE_SOCIAL_META_PREVIEW', 'config_init_tunnel_encryption' => 'CONFIG_INIT_TUNNEL_ENCRYPTION_SOCIAL_META_PREVIEW',
            'config_load_system_overrides' => 'CONFIG_LOAD_SYSTEM_OVERRIDES_SOCIAL_META_PREVIEW', 'config_custom_error_handler' => 'CONFIG_CUSTOM_ERROR_HANDLER_SOCIAL_META_PREVIEW',
            'config_set_timezone_default' => 'CONFIG_SET_TIMEZONE_DEFAULT_SOCIAL_META_PREVIEW', 'config_set_ui_theme_style' => 'CONFIG_SET_UI_THEME_STYLE_SOCIAL_META_PREVIEW',
            'data_decrypt' => 'DATA_DECRYPT_SOCIAL_META_PREVIEW', 'data_encrypt' => 'DATA_ENCRYPT_SOCIAL_META_PREVIEW', 'delete_all_cookies' => 'DELETE_ALL_COOKIES_SOCIAL_META_PREVIEW',
            'delete_cookie' => 'DELETE_COOKIE_SOCIAL_META_PREVIEW', 'device_type' => 'DEVICE_TYPE_SOCIAL_META_PREVIEW', 'device_type_bit' => 'DEVICE_TYPE_BIT_SOCIAL_META_PREVIEW',
            'error_log' => 'ERROR_LOG_SOCIAL_META_PREVIEW', 'format_bytes' => 'FORMAT_BYTES_SOCIAL_META_PREVIEW', 'generate_new_key' => 'GENERATE_NEW_KEY_SOCIAL_META_PREVIEW',
            'get_cookie' => 'GET_COOKIE_SOCIAL_META_PREVIEW', 'get_disk_free_space' => 'GET_DISK_FREE_SPACE_SOCIAL_META_PREVIEW', 'get_disk_performance_metric' => 'GET_DISK_PERFORMANCE_METRIC_SOCIAL_META_PREVIEW',
            'get_disk_size' => 'GET_DISK_SIZE_SOCIAL_META_PREVIEW', 'get_headers' => 'GET_HEADERS_SOCIAL_META_PREVIEW', 'get_mobile_browsers' => 'GET_MOBILE_BROWSERS_SOCIAL_META_PREVIEW',
            'get_mobile_devices' => 'GET_MOBILE_DEVICES_SOCIAL_META_PREVIEW', 'get_mobile_os' => 'GET_MOBILE_OS_SOCIAL_META_PREVIEW', 'get_resource' => 'GET_RESOURCE_SOCIAL_META_PREVIEW',
            'get_resource_count' => 'GET_RESOURCE_COUNT_SOCIAL_META_PREVIEW', 'get_tablet_devices' => 'GET_TABLET_DEVICES_SOCIAL_META_PREVIEW', 'get_user_agent' => 'GET_USER_AGENT_SOCIAL_META_PREVIEW',
            'grant_permissions_fwrite' => 'GRANT_PERMISSIONS_FWRITE_SOCIAL_META_PREVIEW', 'hash' => 'HASH_SOCIAL_META_PREVIEW', 'header_options_add' => 'HEADER_OPTIONS_ADD_SOCIAL_META_PREVIEW',
            'header_options_apply' => 'HEADER_OPTIONS_APPLY_SOCIAL_META_PREVIEW', 'header_signature_options_return' => 'HEADER_SIGNATURE_OPTIONS_RETURN_SOCIAL_META_PREVIEW',
            'ini_get' => 'INI_GET_SOCIAL_META_PREVIEW', 'ini_set' => 'INI_SET_SOCIAL_META_PREVIEW', 'initialize_bit' => 'INITIALIZE_BIT_SOCIAL_META_PREVIEW',
            'initialize_serialized_bit' => 'INITIALIZE_SERIALIZED_BIT_SOCIAL_META_PREVIEW', 'is_bit_set' => 'IS_BIT_SET_SOCIAL_META_PREVIEW',
            'is_configured' => 'IS_CONFIGURED_SOCIAL_META_PREVIEW', 'is_mobile' => 'IS_MOBILE_SOCIAL_META_PREVIEW', 'is_serialized_bit_set' => 'IS_SERIALIZED_BIT_SET_SOCIAL_META_PREVIEW',
            'is_ssl' => 'IS_SSL_SOCIAL_META_PREVIEW', 'is_tablet' => 'IS_TABLET_SOCIAL_META_PREVIEW', 'iso_language_html' => 'ISO_LANGUAGE_HTML_SOCIAL_META_PREVIEW',
            'iso_language_profile' => 'ISO_LANGUAGE_PROFILE_SOCIAL_META_PREVIEW', 'iso_language_profile_count' => 'ISO_LANGUAGE_PROFILE_COUNT_SOCIAL_META_PREVIEW',
            'isset_data_key' => 'ISSET_DATA_KEY_SOCIAL_META_PREVIEW', 'isset_encryption' => 'ISSET_ENCRYPTION_SOCIAL_META_PREVIEW', 'openssl_get_cipher_methods' => 'OPENSSL_GET_CIPHER_METHODS_SOCIAL_META_PREVIEW',
            'print_r' => 'PRINT_R_SOCIAL_META_PREVIEW', 'print_r_str' => 'PRINT_R_STR_SOCIAL_META_PREVIEW', 'proper_version' => 'PROPER_VERSION_SOCIAL_META_PREVIEW',
            'return_data_key' => 'RETURN_DDO_KEY_SOCIAL_META_PREVIEW', 'return_int_const_profile' => 'RETURN_INT_CONST_PROFILE_SOCIAL_META_PREVIEW', 'return_set_bits' => 'RETURN_SET_BITS_SOCIAL_META_PREVIEW',
            'return_sticky_media_link' => 'RETURN_STICKY_MEDIA_LINK_SOCIAL_META_PREVIEW', 'return_system_image' => 'RETURN_SYSTEM_IMAGE_SOCIAL_META_PREVIEW',
            'return_youtube_embed' => 'RETURN_YOUTUBE_EMBED_SOCIAL_META_PREVIEW', 'salt' => 'SALT_SOCIAL_META_PREVIEW', 'serialized_bit_stringin' => 'SERIALIZED_BIT_STRINGIN_SOCIAL_META_PREVIEW',
            'serialized_bit_stringout' => 'SERIALIZED_BIT_STRINGOUT_SOCIAL_META_PREVIEW', 'set_desktop' => 'SET_DESKTOP_SOCIAL_META_PREVIEW', 'set_mobile' => 'SET_MOBILE_SOCIAL_META_PREVIEW',
            'set_tablet' => 'SET_TABLET_SOCIAL_META_PREVIEW', 'set_timezone_default' => 'SET_TIMEZONE_DEFAULT_SOCIAL_META_PREVIEW', 'set_ui_theme_style' => 'SET_UI_THEME_STYLE_SOCIAL_META_PREVIEW',
            'soap_defencoding' => 'SOAP_DEFENCODING_SOCIAL_META_PREVIEW', 'strrtrim' => 'STRRTRIM_SOCIAL_META_PREVIEW', 'system_base64_synchronize' => 'SYSTEM_BASE64_SYNCHRONIZE_SOCIAL_META_PREVIEW',
            'system_hash_algo' => 'SYSTEM_HASH_ALGO_SOCIAL_META_PREVIEW', 'system_output_footer_html' => 'SYSTEM_OUTPUT_FOOTER_HTML_SOCIAL_META_PREVIEW',
            'system_output_head_html' => 'SYSTEM_OUTPUT_HEAD_HTML_SOCIAL_META_PREVIEW', 'toggle_bit' => 'TOGGLE_BIT_SOCIAL_META_PREVIEW', 'toggle_serialized_bit' => 'TOGGLE_SERIALIZED_BIT_SOCIAL_META_PREVIEW',
            'var_dump' => 'VAR_DUMP_SOCIAL_META_PREVIEW', 'version_apache' => 'VERSION_APACHE_SOCIAL_META_PREVIEW', 'version_crnrstn' => 'VERSION_CRNRSTN_SOCIAL_META_PREVIEW',
            'version_linux' => 'VERSION_LINUX_SOCIAL_META_PREVIEW', 'version_mobile_detect' => 'VERSION_MOBILE_DETECT_SOCIAL_META_PREVIEW',
            'version_mysqli' => 'VERSION_MYSQLI_SOCIAL_META_PREVIEW', 'version_openssl' => 'VERSION_OPENSSL_SOCIAL_META_PREVIEW', 'version_php' => 'VERSION_PHP_SOCIAL_META_PREVIEW',
            'version_soap' => 'VERSION_SOAP_SOCIAL_META_PREVIEW');

        $this->asset_routing_data_key_lookup_ARRAY['module_key'] = $tmp_ARRAY;

        $this->asset_routing_data_key_lookup_ARRAY['favicon'] = array('crnrstn/favicon' => 'CRNRSTN_FAVICON',
            'jony5/favicon' => 'system/jony5/favicon.ico', 'bassdrive/favicon' => 'system/bassdrive/favicon.ico');

        // http://172.16.225.139/lightsaber.crnrstn.evifweb.com/?crnrstn_0010111011=
        // jquery-3.6.1.js
        // &crnrstn_=420.00.289812.1670066826.0
        $tmp_ARRAY = array('crnrstn.main.js' => '/', 'crnrstn.lightbox-2.03.3.js' => $tmp_session_salt,
            'crnrstn.backbone_1_4_1.min.js' => $tmp_session_salt, 'jquery-3.6.1.js' => '_lib/frameworks/jquery/3.6.1',
            'jquery-3.6.1.min.map' => '_lib/frameworks/jquery/3.6.1', 'jquery-3.6.1.min.js' => '_lib/frameworks/jquery/3.6.1',
            'jquery-2.2.4.min.js' => '_lib/frameworks/jquery/2.2.4', 'jquery-2.2.4.js' => '_lib/frameworks/jquery/2.2.4',
            'jquery-1.12.4.min.js' => '_lib/frameworks/jquery/1.12.4', 'jquery-1.12.4.js' => '_lib/frameworks/jquery/1.12.4',
            'jquery-1.11.1.min.js' => '_lib/frameworks/jquery/1.11.1', '1.13.2/jquery-ui.theme.min.css' => '_lib/frameworks/jquery_ui',
            '1.13.2/jquery-ui.structure.min.css' => '_lib/frameworks/jquery_ui', '1.13.2/jquery-ui.min.css' => '_lib/frameworks/jquery_ui',
            '1.13.2/jquery-ui.theme.css' => '_lib/frameworks/jquery_ui', '1.13.2/jquery-ui.structure.css' => '_lib/frameworks/jquery_ui',
            '1.13.2/jquery-ui.css' => '_lib/frameworks/jquery_ui', '1.13.2/jquery-ui.min.js' => '_lib/frameworks/jquery_ui',
            '1.13.2/jquery-ui.js' => '_lib/frameworks/jquery_ui', '1.12.1/jquery-ui.theme.min.css' => '_lib/frameworks/jquery_ui',
            '1.12.1/jquery-ui.structure.min.css' => '_lib/frameworks/jquery_ui', '1.12.1/jquery-ui.min.css' => '_lib/frameworks/jquery_ui',
            '1.12.1/jquery-ui.theme.css' => '_lib/frameworks/jquery_ui', '1.12.1/jquery-ui.structure.css' => '_lib/frameworks/jquery_ui',
            '1.12.1/jquery-ui.css' => '_lib/frameworks/jquery_ui', '1.12.1/jquery-ui.min.js' => '_lib/frameworks/jquery_ui',
            '1.12.1/jquery-ui.js' => '_lib/frameworks/jquery_ui', 'jquery.mobile.external-png-1.4.5.min.css' => '_lib/frameworks/jquery_mobile/1.4.5',
            'jquery.mobile.icons-1.4.5.min.css' => '_lib/frameworks/jquery_mobile/1.4.5', 'jquery.mobile.inline-png-1.4.5.min.css' => '_lib/frameworks/jquery_mobile/1.4.5',
            'jquery.mobile.inline-svg-1.4.5.min.css' => '_lib/frameworks/jquery_mobile/1.4.5', 'jquery.mobile.structure-1.4.5.min.css' => '_lib/frameworks/jquery_mobile/1.4.5',
            'jquery.mobile.theme-1.4.5.min.css' => '_lib/frameworks/jquery_mobile/1.4.5', 'jquery.mobile-1.4.5.min.css' => '_lib/frameworks/jquery_mobile/1.4.5',
            'jquery.mobile.external-png-1.4.5.css' => '_lib/frameworks/jquery_mobile/1.4.5', 'jquery.mobile.icons-1.4.5.css' => '_lib/frameworks/jquery_mobile/1.4.5',
            'jquery.mobile.inline-png-1.4.5.css' => '_lib/frameworks/jquery_mobile/1.4.5', 'jquery.mobile.inline-svg-1.4.5.css' => '_lib/frameworks/jquery_mobile/1.4.5',
            'jquery.mobile.structure-1.4.5.css' => '_lib/frameworks/jquery_mobile/1.4.5', 'jquery.mobile.theme-1.4.5.css' => '_lib/frameworks/jquery_mobile/1.4.5',
            'jquery.mobile-1.4.5.css' => '_lib/frameworks/jquery_mobile/1.4.5', 'jquery.mobile-1.4.5/index.js' => '_lib/frameworks/jquery_mobile/1.4.5',
            'jquery.mobile-1.4.5.min.js' => '_lib/frameworks/jquery_mobile/1.4.5', 'jquery.mobile-1.4.5.js' => '_lib/frameworks/jquery_mobile/1.4.5',
            '2.11.3/css/lightbox.min.css' => '_lib/frameworks/lightbox.js', '2.11.3/css/lightbox.css' => '_lib/frameworks/lightbox.js',
            '2.11.3/js/lightbox.min.js' => '_lib/frameworks/lightbox.js', '2.11.3/js/lightbox.js' => '_lib/frameworks/lightbox.js',
            '2.11.3/js/lightbox-plus-jquery.min.js' => '_lib/frameworks/lightbox.js', '2.11.3/js/lightbox-plus-jquery.js' => '_lib/frameworks/lightbox.js',
            '1.4.1/backbone.min.js' => '_lib/frameworks/backbone', '1.4.1/backbone.min.map' => '_lib/frameworks/backbone', '1.4.1/backbone.js' => '_lib/frameworks/backbone',
            'prototype.js' => '_lib/frameworks/prototype.js/1.7.3', 'scriptaculous.js' => '_lib/frameworks/script.aculo.us/1.9.0/src',
            'builder.js' => '_lib/frameworks/script.aculo.us/1.9.0/src', 'controls.js' => '_lib/frameworks/script.aculo.us/1.9.0/src',
            'dragdrop.js' => '_lib/frameworks/script.aculo.us/1.9.0/src', 'effects.js' => '_lib/frameworks/script.aculo.us/1.9.0/src',
            'slider.js' => '_lib/frameworks/script.aculo.us/1.9.0/src', 'sound.js' => '_lib/frameworks/script.aculo.us/1.9.0/src',
            '2.03.3/css/lightbox.css' => '_lib/frameworks/lightbox.js', '2.03.3/js/lightbox.js' => '_lib/frameworks/lightbox.js',
            'moo.fx.js' => '_lib/frameworks/moo.fx/2.0/source', 'moo.fx.pack.js' => '_lib/frameworks/moo.fx/2.0/source', 'moo.fx.utils.js' => '_lib/frameworks/moo.fx/2.0/source',
            'accordion.js' => '_lib/frameworks/moo.fx/2.0/source', 'moo.fx.transitions.js' => '_lib/frameworks/moo.fx/2.0/source',
            'mootools-more-1.6.0.js' => '_lib/frameworks/mootools/more/1.6.0', 'mootools-more-1.6.0-min.js' => '_lib/frameworks/mootools/more/1.6.0',
            'mootools-core-1.6.0.js' => '_lib/frameworks/mootools/core/1.6.0', 'mootools-core-1.6.0-min.js' => '_lib/frameworks/mootools/core/1.6.0');

        $this->asset_routing_data_key_lookup_ARRAY['js'] = $tmp_ARRAY;

        $tmp_ARRAY = array('crnrstn.main_desktop.css' => '/', 'crnrstn.main_tablet.css' => '/', 'crnrstn.main_mobi.css' => '/',
            'crnrstn.lightbox.min.css' => $tmp_session_salt, 'crnrstn.lightbox.css' => $tmp_session_salt,
            'crnrstn.lightbox-2.03.3.css' => $tmp_session_salt, 'crnrstn.jquery-mobile-external-png-1.4.5.css' => $tmp_session_salt,
            'crnrstn.jquery-mobile-external-png-1.4.5.min.css' => $tmp_session_salt, 'crnrstn.jquery-mobile-icons-1.4.5.css' => $tmp_session_salt,
            'crnrstn.jquery-mobile-icons-1.4.5.min.css' => $tmp_session_salt, 'crnrstn.jquery-mobile-inline-png-1.4.5.css' => $tmp_session_salt,
            'crnrstn.jquery-mobile-inline-png-1.4.5.min.css' => $tmp_session_salt, 'crnrstn.jquery-mobile-inline-svg-1.4.5.css' => $tmp_session_salt,
            'crnrstn.jquery-mobile-inline-svg-1.4.5.min.css' => $tmp_session_salt, 'crnrstn.jquery-mobile-theme-1.4.5.css' => $tmp_session_salt,
            'crnrstn.jquery-mobile-theme-1.4.5.min.css' => $tmp_session_salt, 'crnrstn.jquery-mobile-1.4.5.css' => $tmp_session_salt,
            'crnrstn.jquery-mobile-1.4.5.min.css' => $tmp_session_salt, 'simple-grid.min.css' => '_lib/frameworks/simple_grid',
            'simple-grid.css' => '_lib/frameworks/simple_grid', '12cols.css' => '_lib/frameworks/responsive_grid_system/css',
            '11cols.css' => '_lib/frameworks/responsive_grid_system/css', '10cols.css' => '_lib/frameworks/responsive_grid_system/css',
            '9cols.css' => '_lib/frameworks/responsive_grid_system/css', '8cols.css' => '_lib/frameworks/responsive_grid_system/css',
            '7cols.css' => '_lib/frameworks/responsive_grid_system/css', '6cols.css' => '_lib/frameworks/responsive_grid_system/css',
            '5cols.css' => '_lib/frameworks/responsive_grid_system/css', '4cols.css' => '_lib/frameworks/responsive_grid_system/css',
            '3cols.css' => '_lib/frameworks/responsive_grid_system/css', '2cols.css' => '_lib/frameworks/responsive_grid_system/css',
            'col.css' => '_lib/frameworks/responsive_grid_system/css', 'html5reset.css' => '_lib/frameworks/responsive_grid_system/css',
            'main.js' => '_lib/frameworks/html5_boilerplate/8.0.0/js', 'plugins.js' => '_lib/frameworks/html5_boilerplate/8.0.0/js',
            'modernizr-3.11.2.min.js' => '_lib/frameworks/html5_boilerplate/8.0.0/js/vendor', 'main.css' => '_lib/frameworks/html5_boilerplate/8.0.0/css',
            'normalize.css' => '_lib/frameworks/html5_boilerplate/8.0.0/css', '6/js/vendor/foundation.js' => '_lib/frameworks/foundation',
            '6/js/vendor/foundation.min.js' => '_lib/frameworks/foundation', '6/js/vendor/what-input.js' => '_lib/frameworks/foundation',
            '960_rtl.css' => '_lib/frameworks/960_grid_system/code/css', 'min/960_rtl.css' => '_lib/frameworks/960_grid_system/code/css',
            'text.css' => '_lib/frameworks/960_grid_system/code/css', 'min/text.css' => '_lib/frameworks/960_grid_system/code/css',
            'reset.css' => '_lib/frameworks/960_grid_system/code/css', 'min/reset.css' => '_lib/frameworks/960_grid_system/code/css',
            '960_12_col_rtl.css' => '_lib/frameworks/960_grid_system/code/css', 'min/960_12_col_rtl.css' => '_lib/frameworks/960_grid_system/code/css',
            '960_16_col_rtl.css' => '_lib/frameworks/960_grid_system/code/css', 'min/960_16_col_rtl.css' => '_lib/frameworks/960_grid_system/code/css',
            '960_24_col_rtl.css' => '_lib/frameworks/960_grid_system/code/css', 'min/960_24_col_rtl.css' => '_lib/frameworks/960_grid_system/code/css',
            '960_16_col.css' => '_lib/frameworks/960_grid_system/code/css', 'min/960_16_col.css' => '_lib/frameworks/960_grid_system/code/css',
            '960_24_col.css' => '_lib/frameworks/960_grid_system/code/css', '960.css' => '_lib/frameworks/960_grid_system/code/css',
            'min/960.css' => '_lib/frameworks/960_grid_system/code/css', 'simplegrid.css' => '_lib/frameworks/this_is_dallas_simple_grid',
            'style.css' => '_lib/frameworks/rwdgrid/css', 'rwdgrid.css' => '_lib/frameworks/rwdgrid/css',
            'rwdgrid.min.css' => '_lib/frameworks/rwdgrid/css/rwdgrid.min.css', 'skeleton.css' => '_lib/frameworks/skeleton/2.0.4/css/skeleton.css',
            '2.0.4/css/normalize.css' => '_lib/frameworks/skeleton/2.0.4/css/normalize.css', 'screen.css' => '_lib/frameworks/dead_simple_grid/css/screen.css',
            'grid.css' => '_lib/frameworks/dead_simple_grid/css', 'html5.js' => '_lib/frameworks/unsemantic/assets/javascripts',
            'adapt.min.js' => '_lib/frameworks/unsemantic/assets/javascripts', 'demo.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'ie-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'ie.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'reset-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'frameworks/unsemantic/assets/stylesheets/reset.css' => '_lib',
            'frameworks/unsemantic/assets/stylesheets/text.css' => '_lib', 'unsemantic-grid-base-no-ie7-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-base-no-ie7.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-base-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-base-tablet-no-ie7-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-base-tablet-no-ie7.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-base-tablet-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-base-tablet.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-base.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-desktop-no-ie7-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-desktop-no-ie7.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-desktop-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-desktop.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-mobile-no-ie7-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-mobile-no-ie7.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-mobile-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-mobile.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-responsive-no-ie7-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-responsive-no-ie7.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-responsive-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-responsive-tablet-no-ie7-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-responsive-tablet-no-ie7.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-responsive-tablet-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-responsive-tablet.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-responsive.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-tablet-no-ie7-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-tablet-no-ie7.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'unsemantic-grid-tablet-rtl.css' => '_lib/frameworks/unsemantic/assets/stylesheets',
            'unsemantic-grid-tablet.css' => '_lib/frameworks/unsemantic/assets/stylesheets', 'demo.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'ie-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass', 'ie.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'reset.scss' => '_lib/frameworks/unsemantic/assets/sass', 'text.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-base-no-ie7-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-base-no-ie7.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-base-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-base-tablet-no-ie7-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-base-tablet-no-ie7.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-base-tablet-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-base-tablet.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-base.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-desktop-no-ie7-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-desktop-no-ie7.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-desktop-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-desktop.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-mobile-no-ie7-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-mobile-no-ie7.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-mobile-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-mobile.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-responsive-no-ie7-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-responsive-no-ie7.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-responsive-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-responsive-tablet-no-ie7-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-responsive-tablet-no-ie7.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-responsive-tablet-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-responsive-tablet.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-responsive.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-tablet-no-ie7-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-tablet-no-ie7.scss' => '_lib/frameworks/unsemantic/assets/sass',
            'unsemantic-grid-tablet-rtl.scss' => '_lib/frameworks/unsemantic/assets/sass', 'unsemantic-grid-tablet.scss' => '_lib/frameworks/unsemantic/assets/sass',
            '_demo.scss' => '_lib/frameworks/unsemantic/assets/sass/partials', '_ie.scss' => '_lib/frameworks/unsemantic/assets/sass/partials',
            '_reset.scss' => '_lib/frameworks/unsemantic/assets/sass/partials', '_text.scss' => '_lib/frameworks/unsemantic/assets/sass/partials',
            '_unsemantic-grid-responsive-tablet.scss' => '_lib/frameworks/unsemantic/assets/sass/partials', '_unsemantic-grid-responsive.scss' => '_lib/frameworks/unsemantic/assets/sass/partials',
            '_unsemantic-ie-snap.scss' => '_lib/frameworks/unsemantic/assets/sass/partials', '_unsemantic-vars.scss' => '_lib/frameworks/unsemantic/assets/sass/partials',
            'grid.js' => '_lib/frameworks/unsemantic/assets/react/dist', 'grid_clear.js' => '_lib/frameworks/unsemantic/assets/react/dist',
            'grid_container.js' => '_lib/frameworks/unsemantic/assets/react/dist', 'grid_offset.js' => '_lib/frameworks/unsemantic/assets/react/dist',
            'frameworks/unsemantic/assets/react/dist/index.js' => '_lib');

        $this->asset_routing_data_key_lookup_ARRAY['css'] = $tmp_ARRAY;

        $tmp_ARRAY = array(
            'framework/jquery_mobile_1_4_5/images/icons-png/action-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ACTION_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/action-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ACTION_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/alert-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ALERT_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/alert-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_VIDEO_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-d-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_D_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-d-l-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_D_L_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-d-l-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_D_L_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-d-r-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_D_R_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-d-r-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_D_R_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-d-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_D_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-l-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_L_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-l-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_L_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-r-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_R_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-r-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_R_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-u-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_U_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-u-l-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_U_L_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-u-l-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_U_L_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-u-r-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_U_R_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-u-r-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_U_R_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/arrow-u-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_ARROW_U_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/audio-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_AUDIO_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/audio-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_AUDIO_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/back-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_BACK_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/back-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_BACK_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/bars-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_BARS_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/bars-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_BARS_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/bullets-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_BULLETS_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/bullets-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_BULLETS_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/calendar-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CALENDAR_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/calendar-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CALENDAR_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/camera-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CAMERA_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/camera-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CAMERA_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/carat-d-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CARAT_D_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/carat-d-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CARAT_D_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/carat-l-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CARAT_L_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/carat-l-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CARAT_L_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/carat-r-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CARAT_R_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/carat-r-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CARAT_R_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/carat-u-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CARAT_U_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/carat-u-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CARAT_U_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/check-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CHECK_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/check-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CHECK_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/clock-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CLOCK_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/clock-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CLOCK_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/cloud-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CLOUD_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/cloud-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_CLOUD_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/comment-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_COMMENT_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/comment-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_COMMENT_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/delete-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_DELETE_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/delete-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_DELETE_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/edit-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_EDIT_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/edit-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_EDIT_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/eye-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_EYE_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/eye-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_EYE_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/forbidden-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_FORBIDDEN_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/forbidden-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_FORBIDDEN_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/forward-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_FORWARD_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/forward-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_FORWARD_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/gear-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_GEAR_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/gear-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_GEAR_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/grid-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_GRID_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/grid-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_GRID_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/heart-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_HEART_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/heart-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_HEART_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/home-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_HOME_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/home-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_HOME_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/info-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_INFO_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/info-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_INFO_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/location-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_LOCATION_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/location-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_LOCATION_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/lock-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_LOCK_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/lock-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_LOCK_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/mail-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_MAIL_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/mail-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_MAIL_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/minus-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_MINUS_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/minus-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_MINUS_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/navigation-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_NAVIGATION_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/navigation-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_NAVIGATION_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/phone-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_PHONE_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/phone-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_PHONE_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/plus-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_PLUS_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/plus-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_PLUS_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/power-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_POWER_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/power-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_POWER_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/recycle-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_RECYCLE_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/recycle-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_RECYCLE_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/refresh-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_REFRESH_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/refresh-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_REFRESH_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/search-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_SEARCH_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/search-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_SEARCH_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/shop-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_SHOP_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/shop-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_SHOP_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/star-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_STAR_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/star-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_STAR_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/tag-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_TAG_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/tag-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_TAG_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/user-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_USER_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/user-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_USER_WHITE',
            'framework/jquery_mobile_1_4_5/images/icons-png/video-black' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_VIDEO_BLACK',
            'framework/jquery_mobile_1_4_5/images/icons-png/video-white' => 'JQUERY_MOBILE_1_4_5_ICONS_PNG_VIDEO_WHITE',
            'framework/jquery_mobile_1_4_5/images/ajax-loader' => 'JQUERY_MOBILE_1_4_5_AJAX_LOADER', 'framework/lightbox/close' => 'LIGHTBOX_2.11.3_CLOSE',
            'framework/lightbox/loading' => 'LIGHTBOX_2.11.3_LOADING', 'framework/lightbox/next' => 'LIGHTBOX_2.11.3_NEXT',
            'framework/lightbox/prev' => 'LIGHTBOX_2.11.3_PREV', 'framework/lightbox-2.03.3/blank' => 'LIGHTBOX_2.03.3_BLANK',
            'framework/lightbox-2.03.3/close' => 'LIGHTBOX_2.03.3_CLOSE', 'framework/lightbox-2.03.3/loading' => 'LIGHTBOX_2.03.3_LOADING',
            'framework/lightbox-2.03.3/next' => 'LIGHTBOX_2.03.3_NEXT', 'framework/lightbox-2.03.3/prev' => 'LIGHTBOX_2.03.3_PREV');

        $this->asset_routing_data_key_lookup_ARRAY['integrations'] = $tmp_ARRAY;

    }

    public function flag_built_head_resource($resource_constant){

        $this->html_head_build_flag_ARRAY[$resource_constant] = 1;

        return true;

    }

    public function flag_built_footer_resource($resource_constant){

        $this->html_footer_build_flag_ARRAY[$resource_constant] = 1;

        return true;

    }

    public function sauce($resource){

        $tmp_sauce = '';

        //
        // RETURN STRING DATA FOR HASH (OR EVEN POWER FOR SEARCH). NOT FOR DISPLAY.
        $tmp_sauce .= $this->oINTERACT_UI_HTML_MGR->sauce($resource);

        return $tmp_sauce;

    }

    public function tmp_restrict_this_lorem_ipsum_method($method){

        $tmp_ARRAY = array(

            'config_add_administration' => 'DISABLED',
            'form_hidden_input_add' => 'DISABLED',
            'form_input_add' => 'DISABLED',
            'form_input_feedback_copy_add' => 'DISABLED',
            'form_integration_html_packet_output' => 'DISABLED',
            'form_response_add' => 'DISABLED',
            'config_grant_exclusive_access' => 'DISABLED',
            'set_max_login_attempts' => 'DISABLED',
            'set_timeout_user_inactive' => 'DISABLED',

        );

        if(isset($tmp_ARRAY[$method])){

            return true;

        }

        return false;

    }

    private function detectServerEnv($env_key_hash, $data_key, $value, $required_server_matches){

        //
        // CHECK THE ENVIRONMENTAL DETECTION KEYS FOR MATCHES AGAINST THE SERVER CONFIGURATION
        if(array_key_exists($data_key, $_SERVER)){

            $this->error_log('We have a SERVER param [' . $data_key . '] to check value [' . $value . '] for match against actual SERVER[].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            //error_log(__LINE__ . ' crnrstn ' . __METHOD__ . ' We have a SERVER param [' . $data_key . '] to check value [' . $value . '] for match against actual SERVER[].');

            return $this->isServerKeyMatch($env_key_hash, $data_key, $value, $required_server_matches);

        }else{

            return false;

        }

    }

    private function isServerKeyMatch($env_key_hash, $data_key, $value, $required_server_matches){

        //
        // RUN VALUE COMPARISON FOR INCOMING VALUE AND DATA FROM THE SERVERS' SUPER GLOBAL VARIABLE ARRAY
        //error_log(__LINE__ . ' crnrstn SERVER match [' . $data_key . '/' . $_SERVER[$data_key] . '] with value [' . $value . ']');
        if($value == $_SERVER[$data_key]){

            $this->error_log('SERVER match found for key [' . $data_key . '] with value [' . $value . '] Increment detection count [' . self::$env_detect_ARRAY[self::$config_serial][$env_key_hash] . '] for environment [' . $env_key_hash . ']. Need [' . $required_server_matches . '] matches to detect environment (if 0, then must process all config data).', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            //error_log(__LINE__ . ' crnrstn SERVER match found for key [' . $data_key . '] with value [' . $value . '] Increment detection count [' . self::$env_detect_ARRAY[self::$config_serial][$env_key_hash] . ' of ' . $required_server_matches . '] for environment [' . $env_key_hash . '].');

            //
            // INCREMENT FOR EACH MATCH.
            self::$env_detect_ARRAY[self::$config_serial][$env_key_hash]++;
            //error_log(__LINE__ . ' crnrstn Detection count [' . self::$env_detect_ARRAY[self::$config_serial][$env_key_hash] . ' of ' . $required_server_matches . '].');

        }

        //
        // FIRST $ENV TO REACH $envDetectRequiredCnt...YOU KNOW YOU HAVE QUALIFIED MATCH.
        if(self::$env_detect_ARRAY[self::$config_serial][$env_key_hash] >= $required_server_matches){

            //
            // WE HAVE AN ENVIRONMENTAL DEFINITION WITH A SUFFICIENT NUMBER OF SUCCESSFUL MATCHES
            // TO THE RUNNING ENVIRONMENT AS DEFINED BY THE CRNRSTN :: CONFIG FILE.
            self::$env_key_hash_config_ARRAY[self::$config_serial] = $env_key_hash;

            $this->error_log('Environmental detection complete. CRNRSTN :: selected environmental profile [' . $env_key_hash . '] running with CRNRSTN :: serialization of [' . self::$config_serial . '] and phpsession[' . session_id() . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            //error_log(__LINE__ . ' crnrstn Environmental detection complete. CRNRSTN :: selected environmental profile [' . $env_key_hash . '] running with CRNRSTN :: serialization of [' . self::$config_serial . '] and phpsession[' . session_id() . '].');

            //
            // CRNRSTN :: HTML COMMENTS MODE.
            switch($this->env_html_comments_mode_ARRAY[self::$config_serial][$env_key_hash]){
                //switch($this->get_resource('system_html_comments_mode', 0, 'CRNRSTN::RESOURCE::CONFIGURATION')){
                case CRNRSTN_HTML_COMMENTS_NONE:
                case CRNRSTN_HTML_COMMENTS_SILENT_GOLD:

                    //
                    // NO CRNRSTN :: HTML CODE COMMENTS SHOULD BE WRITTEN.
                    // TODO :: REMOVE THIS TODO WHEN CRNRSTN :: HTML CODE COMMENTS MODES ARE ALL IMPLEMENTED.
                    $this->initialize_serialized_bit('crnrstn_html_comments_mode', CRNRSTN_HTML_COMMENTS_SILENT_GOLD);

                break;
                case CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED:
                    //
                    // CRNRSTN :: CDN HTML STABILITY CONTROL.

                    //
                    // WHEN CRNRSTN :: CDN HTML STABILITY CONTROL IS ENABLED,
                    // TIMESTAMPS ARE REMOVED FROM THE HTML CODE COMMENTS THAT
                    // ACCOMPANY CRNRSTN :: HTML CONTENT INJECTIONS.
                    $this->initialize_serialized_bit('crnrstn_html_comments_mode', CRNRSTN_HTML_COMMENTS_CDN_STABILITY_CONTROL_ENABLED);

                break;
                case CRNRSTN_HTML_COMMENTS_FULL:
                case CRNRSTN_HTML_COMMENTS_ENLARGED_PHYLACTERIES:
                default:
                    // SILENCE IS GOLDEN.
                    //$this->initialize_serialized_bit('crnrstn_html_comments_mode', CRNRSTN_HTML_COMMENTS_ENLARGED_PHYLACTERIES);

                break;

            }

            return true;

        }else{

            //
            // EVIDENCE OF A MATCH...STILL NOT SUFFICIENT
            return false;

        }

    }

    private function auth_data_input($auth_type){

        switch($auth_type){
            case 'config_detection_error_help':

                if(isset($this->terminate_configuration_error_ARRAY)){

                    foreach($this->terminate_configuration_error_ARRAY as $key => $msg){

                        if(strlen($key) > 0){

                            $this->system_terminate($auth_type);

                            exit();

                        }

                    }

                }

            break;

        }

    }

    public function is_resource($data_key, $data_type_family){

        if(isset(self::$system_resource_profile_ARRAY[$data_key]['data_type_family'])){

            if(self::$system_resource_profile_ARRAY[$data_key]['data_type_family'] == $data_type_family){

                return self::$system_resource_profile_ARRAY[$data_key]['validation_profile'];

            }

        }

        return NULL;

    }

    public function get_resource($data_key, $index = NULL, $data_type_family = 'CRNRSTN::RESOURCE', $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME){

        $env_key = NULL;

        //
        // EVALUATE AND UPDATE ENV_KEY.
        $this->env_key($env_key);

        if(strlen($env_key) > 0){

            error_log(__LINE__  . ' crnrstn $data_key[' . $data_key . ']. $data_type_family[' . $data_type_family . ']. $index[' . $index . ']. $env_key[' . $env_key . ']. $data_authorization_profile[' . $data_authorization_profile . '].');
            $tmp_return = self::$oCRNRSTN_CONFIG_MGR->retrieve_data_value($data_key, $data_type_family, $index, $env_key, $data_authorization_profile);

            if($tmp_return != $this->session_salt()){

                return $tmp_return;

            }

        }

        return '';

    }

    public function get_resource_count($data_key, $data_type_family = 'CRNRSTN::RESOURCE', $data_authorization_profile = NULL){

        //
        // TODO :: THIS CAN/SHOULD RETURN ALL COUNTS...AND BY ALL CHANNELS...EVEN.
        //
        // Saturday, November 4, 2023 @ 1833 hrs.
        return $this->get_config_cache_count($data_key, $data_type_family, $data_authorization_profile);

    }


//
//     MOVED TO ENVIRONMENTAL DETECTION, METHOD NAME
//     CHANGE, AND RE-ARCHITURE.
//     private function init_system_data_channels(){
//
//         //
//         // WHERE, $data_channel_init_sequence = 'GPHSJCDROF';
//         // SEE, _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
//         // THIS DATA IS REFERENCED ALOT, SO WE SAVE IT PRIVATE STATIC.
//         self::$data_channel_init_sequence = $this->get_resource('data_channel_init_sequence', 0, 'CRNRSTN::RESOURCE::MULTI-CHANNEL');
//
//         $tmp_channel_ARRAY = str_split(self::$data_channel_init_sequence);
// //
// //        error_log(__LINE__ . ' crnrstn self::$data_channel_init_sequence[' . self::$data_channel_init_sequence . '].');
// //        die();
//
//         //
//         // INITIALIZE CHANNEL BYTES TO ZED.
//         foreach($tmp_channel_ARRAY as $ch_index => $ch_alpha){
//
//             $tmp_channel = $this->return_channel_name($tmp_channel_ARRAY[$ch_index]);

//             $this->oCRNRSTN_RRS_MAP->ini_rrs_map_set('channel_bytes', $tmp_channel);

//         }

        //
        // PLEASE SEE,
        //  $oCRNRSTN->set_channel_config($channel_constant, $attribute_name, $data);
        //  $oCRNRSTN->get_channel_config($channel, $index_0 = NULL, $index_1 = NULL, $index_2 = NULL, $index_3 = NULL);
        //  $oCRNRSTN->isset_channel_config($channel_constant, $attribute_name, $return_type = CRNRSTN_BOOLEAN);
        //  $oCRNRSTN->is_channel_active($channel_constant, $return_type = CRNRSTN_BOOLEAN)
//         $tmp_cnt = count($tmp_channel_ARRAY);
//         for($i = 0; $i < $tmp_cnt; $i++){

//             $tmp_channel = $this->return_channel_name($tmp_channel_ARRAY[$i]);

//             if(!isset(self::$channel_init_burn_ARRAY[$tmp_channel_ARRAY[$i]])){

//                 self::$channel_init_burn_ARRAY[$tmp_channel_ARRAY[$i]] = 1;

//                 if((($this->xxxxxxxxx($tmp_channel . '_cache_is_active')) === true) && (isset($_GET[$this->session_salt()]))){

//                     //
//                     // CAN WE GO TO CRNRSTN :: PLAID?
//                     if(!($this->gone_to_plaid($_GET[$this->session_salt()], CRNRSTN_ASSET_MAPPING, $tmp_channel) === true)){

//                         //
//                         // CRNRSTN :: PLAID APPLICATION ACCELERATION.
//                         $this->plaid($tmp_channel);

//                     }

//                 }

//             }

//         }

//     }

    public function get_ddo_resource_pointer($ddo_memory_pointer, $data_key, $data_type_family, $index = 0){

        return self::$oCRNRSTN_CONFIG_MGR->get_ddo_resource_pointer($ddo_memory_pointer, $data_key, $data_type_family, $index);

    }

    public function initialize_ddo_resource_pointer($ddo_memory_pointer, $data_key, $channel = NULL, $index = 0, $ttl = 60){
        // TODO :: $ttl SHOULD INITIALIZE AS NULL AND THEN TAKE A SYSTEM OVERRIDE...IN LEU OF VALID TTL INPUT.
        //         Thursday, January 4, 2024 @ 0158 hrs.

        self::$oCRNRSTN_CONFIG_MGR->initialize_ddo_resource_pointer($ddo_memory_pointer, $data_key, $channel, $index, $ttl);

    }

    public function retrieve_data_count($data_key, $data_type_family = 'CRNRSTN::RESOURCE'){

        error_log(__LINE__ . ' crnrstn env_key[' . self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]] . '].');
        return self::$oCRNRSTN_CONFIG_MGR->retrieve_data_count($data_key, $data_type_family, self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]]);

    }

    public function _____isset_data_key($data_key, $data_type_family = 'CRNRSTN::RESOURCE', $env_key = NULL){
        // SEE if($this->isset_resource('data_value', 'override_interact_theme_sprite_icon_mouseover_effect_magnification_zoom_percent', 'CRNRSTN::RESOURCE::SPRITE_ICON') == true){
        //
        // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
        $this->env_key($env_key);

        return self::$oCRNRSTN_CONFIG_MGR->isset_data_key($data_key, $data_type_family, $env_key);

    }

    public function input_data_value_simple($data_value, $data_key){

        return self::$oCRNRSTN_CONFIG_MGR->input_data_value($data_value, $data_key);

    }

    public function init_system_overrides(){

        self::$byte_reporting_units = $this->get_resource('byte_reporting_units', 0, 'CRNRSTN::RESOURCE::FILE_SYSTEM_REPORTING');
        self::$byte_reporting_precision = $this->get_resource('byte_reporting_precision', 0, 'CRNRSTN::RESOURCE::FILE_SYSTEM_REPORTING');

        //
        // config_disk_byte_settings_overrides(
        //      $env_key = CRNRSTN_RESOURCE_ALL,
        //      $os_bit_size = NULL,
        //      $max_write_file_size = NULL,
        //      $crnrstn_file_bytes_reserve = NULL,
        //      $max_write_volume_size = NULL,
        //      $crnrstn_volume_bytes_reserve = NULL
        // )
        // config_disk_max_item_count_overrides(
        //      $env_key = CRNRSTN_RESOURCE_ALL,
        //      $max_count_folder_items = NULL,
        //      $crnrstn_folder_items_reserve = NULL,
        //      $max_count_volume_items = NULL,
        //      $crnrstn_volume_items_reserve = NULL,
        //      $crnrstn_max_length_filename = NULL,
        //      $crnrstn_max_length_filepath = NULL
        // )
        if($this->isset_resource('data_value', 'os_bit_size_override', 'CRNRSTN::RESOURCE::INTEGER_LENGTH') == true){

            self::$os_bit_size_override = $this->get_resource('os_bit_size_override', 0, 'CRNRSTN::RESOURCE::INTEGER_LENGTH');

        }

        if($this->isset_resource('data_value', 'max_write_file_size_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE') == true){

            self::$max_write_file_size_override = $this->get_resource('max_write_file_size_override', 0, 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE');

        }

        if($this->isset_resource('data_value', 'crnrstn_file_bytes_reserve_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE') == true){

            self::$crnrstn_file_bytes_reserve_override = $this->get_resource('crnrstn_file_bytes_reserve_override', 0, 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE');

        }

        if($this->isset_resource('data_value', 'max_write_volume_size_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE') == true){

            self::$max_write_volume_size_override = $this->get_resource('max_write_volume_size_override', 0, 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE');

        }

        if($this->isset_resource('data_value', 'crnrstn_volume_bytes_reserve_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE') == true){

            self::$crnrstn_volume_bytes_reserve_override = $this->get_resource('crnrstn_volume_bytes_reserve_override', 0, 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE');

        }

        if($this->isset_resource('data_value', 'volume_bytes_reserve_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE') == true){

            self::$volume_bytes_reserve_override = $this->get_resource('volume_bytes_reserve_override', 0, 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE');

        }

        if($this->isset_resource('data_value', 'max_count_folder_items_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE') == true){

            self::$max_count_folder_items_override = $this->get_resource('max_count_folder_items_override', 0, 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE');

        }

        if($this->isset_resource('data_value', 'crnrstn_folder_items_reserve_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE') == true){

            self::$crnrstn_folder_items_reserve_override = $this->get_resource('crnrstn_folder_items_reserve_override', 0, 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE');

        }

        if($this->isset_resource('data_value', 'max_count_volume_items_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE') == true){

            self::$max_count_volume_items_override = $this->get_resource('max_count_volume_items_override', 0, 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE');

        }

        if($this->isset_resource('data_value', 'crnrstn_volume_items_reserve_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE') == true){

            self::$crnrstn_volume_items_reserve_override = $this->get_resource('crnrstn_volume_items_reserve_override', 0, 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE');

        }

        if($this->isset_resource('data_value', 'crnrstn_max_length_filename_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE') == true){

            self::$crnrstn_max_length_filename_override = $this->get_resource('crnrstn_max_length_filename_override', 0, 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE');

        }

        if($this->isset_resource('data_value', 'crnrstn_max_length_filepath_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE') == true){

            self::$crnrstn_max_length_filepath_override = $this->get_resource('crnrstn_max_length_filepath_override', 0, 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE');

        }

        //
        // config_database_network_overrides(
        //      $env_key = CRNRSTN_RESOURCE_ALL,
        //      $crnrstn_soap_services_enabled = NULL,
        //      $crnrstn_slow_queries_acceleration_enabled = NULL,
        //      $connection_keepalive = NULL,
        //      $connection_ttl = NULL
        // )
        if($this->isset_resource('data_value', 'crnrstn_soap_services_enabled_override', 'CRNRSTN::RESOURCE::DATABASE_NETWORK') == true){

            self::$crnrstn_soap_services_enabled_override = $this->get_resource('crnrstn_soap_services_enabled_override', 0, 'CRNRSTN::RESOURCE::DATABASE_NETWORK');

        }

        if($this->isset_resource('data_value', 'crnrstn_slow_queries_acceleration_enabled_override', 'CRNRSTN::RESOURCE::DATABASE_NETWORK') == true){

            self::$crnrstn_slow_queries_acceleration_enabled_override = $this->get_resource('crnrstn_slow_queries_acceleration_enabled_override', 0, 'CRNRSTN::RESOURCE::DATABASE_NETWORK');

        }

        if($this->isset_resource('data_value', 'max_connections_override', 'CRNRSTN::RESOURCE::DATABASE_NETWORK') == true){

            self::$max_connections_override = $this->get_resource('max_connections_override', 0, 'CRNRSTN::RESOURCE::DATABASE_NETWORK');

        }

        if($this->isset_resource('data_value', 'connection_keepalive_override', 'CRNRSTN::RESOURCE::DATABASE_NETWORK') == true){

            self::$connection_keepalive_override = $this->get_resource('connection_keepalive_override', 0, 'CRNRSTN::RESOURCE::DATABASE_NETWORK');

        }

        if($this->isset_resource('data_value', 'connection_ttl_override', 'CRNRSTN::RESOURCE::DATABASE_NETWORK') == true){

            self::$connection_ttl_override = $this->get_resource('connection_ttl_override', 0, 'CRNRSTN::RESOURCE::DATABASE_NETWORK');

        }

        //
        // config_database_throughput_overrides(
        //      $env_key = CRNRSTN_RESOURCE_ALL,
        //      $crnrstn_query_cache_enabled = NULL,
        //      $crnrstn_results_cache_enabled = NULL,
        //      $max_allowed_packet = NULL,
        //      $max_cache_packet_bytes = NULL,
        //      $cache_ttl_packet = NULL,
        //      $max_cache_results_bytes = NULL,
        //      $cache_ttl_results = NULL
        // )
        if($this->isset_resource('data_value', 'crnrstn_query_cache_enabled_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT') == true){

            self::$crnrstn_query_cache_enabled_override = $this->get_resource('crnrstn_query_cache_enabled_override', 0, 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT');

        }

        if($this->isset_resource('data_value', 'crnrstn_results_cache_enabled_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT') == true){

            self::$crnrstn_results_cache_enabled_override = $this->get_resource('crnrstn_results_cache_enabled_override', 0, 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT');

        }

        if($this->isset_resource('data_value', 'max_allowed_packet_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT') == true){

            self::$max_allowed_packet_override = $this->get_resource('max_allowed_packet_override', 0, 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT');

        }

        if($this->isset_resource('data_value', 'max_cache_packet_bytes_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT') == true){

            self::$max_cache_packet_bytes_override = $this->get_resource('max_cache_packet_bytes_override', 0, 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT');

        }

        if($this->isset_resource('data_value', 'cache_ttl_packet_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT') == true){

            self::$cache_ttl_packet_override = $this->get_resource('cache_ttl_packet_override', 0, 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT');

        }

        if($this->isset_resource('data_value', 'max_cache_results_bytes_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT') == true){

            self::$max_cache_results_bytes_override = $this->get_resource('max_cache_results_bytes_override', 0, 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT');

        }

        if($this->isset_resource('data_value', 'cache_ttl_results_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT') == true){

            self::$cache_ttl_results_override = $this->get_resource('cache_ttl_results_override', 0, 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT');

        }

        //
        // config_database_shard_overrides(
        //      $env_key = CRNRSTN_RESOURCE_ALL,
        //      $table_prefix = NULL,
        //      $max_table_record_count = NULL,
        //      $shard_ttl = NULL
        // )
        if($this->isset_resource('data_value', 'table_prefix_override', 'CRNRSTN::RESOURCE::DATABASE_SHARD') == true){

            self::$table_prefix_override = $this->get_resource('table_prefix_override', 0, 'CRNRSTN::RESOURCE::DATABASE_SHARD');

        }

        if($this->isset_resource('data_value', 'max_table_record_count_override', 'CRNRSTN::RESOURCE::DATABASE_SHARD') == true){

            self::$max_table_record_count_override = $this->get_resource('max_table_record_count_override', 0, 'CRNRSTN::RESOURCE::DATABASE_SHARD');

        }

        if($this->isset_resource('data_value', 'shard_ttl_override', 'CRNRSTN::RESOURCE::DATABASE_SHARD') == true){

            self::$shard_ttl_override = $this->get_resource('shard_ttl_override', 0, 'CRNRSTN::RESOURCE::DATABASE_SHARD');

        }

        //
        // config_electrum_overrides(
        //      $env_key = CRNRSTN_RESOURCE_ALL,
        //      $max_bytes_throughput = NULL,
        //      $max_pid_threads = NULL,
        //      $max_conn_ftp = NULL,
        //      $ftp_conn_timeout = NULL,
        //      $max_cpu_load_percentage = NULL,
        //      $max_incoming_data_connections = NULL,
        //      $max_outgoing_data_connections = NULL,
        //      $ftp_graceful_degrade = NULL
        // )
        if($this->isset_resource('data_value', 'max_bytes_throughput_override', 'CRNRSTN::RESOURCE::ELECTRUM') == true){

            self::$max_bytes_throughput_override = $this->get_resource('max_bytes_throughput_override', 0, 'CRNRSTN::RESOURCE::ELECTRUM');

        }

        if($this->isset_resource('data_value', 'max_pid_threads_override', 'CRNRSTN::RESOURCE::ELECTRUM') == true){

            self::$max_pid_threads_override = $this->get_resource('max_pid_threads_override', 0, 'CRNRSTN::RESOURCE::ELECTRUM');

        }

        if($this->isset_resource('data_value', 'max_conn_ftp_override', 'CRNRSTN::RESOURCE::ELECTRUM') == true){

            self::$max_conn_ftp_override = $this->get_resource('max_conn_ftp_override', 0, 'CRNRSTN::RESOURCE::ELECTRUM');

        }

        if($this->isset_resource('data_value', 'ftp_conn_timeout_override', 'CRNRSTN::RESOURCE::ELECTRUM') == true){

            self::$ftp_conn_timeout_override = $this->get_resource('ftp_conn_timeout_override', 0, 'CRNRSTN::RESOURCE::ELECTRUM');

        }

        if($this->isset_resource('data_value', 'max_cpu_load_percentage_override', 'CRNRSTN::RESOURCE::ELECTRUM') == true){

            self::$max_cpu_load_percentage_override = $this->get_resource('max_cpu_load_percentage_override', 0, 'CRNRSTN::RESOURCE::ELECTRUM');

        }

        if($this->isset_resource('data_value', 'max_incoming_data_connections_override', 'CRNRSTN::RESOURCE::ELECTRUM') == true){

            self::$max_incoming_data_connections_override = $this->get_resource('max_incoming_data_connections_override', 0, 'CRNRSTN::RESOURCE::ELECTRUM');

        }

        if($this->isset_resource('data_value', 'max_outgoing_data_connections_override', 'CRNRSTN::RESOURCE::ELECTRUM') == true){

            self::$max_outgoing_data_connections_override = $this->get_resource('max_outgoing_data_connections_override', 0, 'CRNRSTN::RESOURCE::ELECTRUM');

        }

        if($this->isset_resource('data_value', 'ftp_graceful_degrade_override', 'CRNRSTN::RESOURCE::ELECTRUM') == true){

            self::$ftp_graceful_degrade_override = $this->get_resource('ftp_graceful_degrade_override', 0, 'CRNRSTN::RESOURCE::ELECTRUM');

        }

        //
        // config_wethrbug_overrides(
        //      $env_key = CRNRSTN_RESOURCE_ALL,
        //      $default_zipcode = NULL,
        //      $forecast_length = NULL,
        //      $default_units_celsius = NULL,
        //      $database_enabled = NULL
        // )
        if($this->isset_resource('data_value', 'default_zipcode_override', 'CRNRSTN::RESOURCE::WETHRBUG') == true){

            self::$default_zipcode_override = $this->get_resource('default_zipcode_override', 0, 'CRNRSTN::RESOURCE::WETHRBUG');

        }

        if($this->isset_resource('data_value', 'forecast_length_override', 'CRNRSTN::RESOURCE::WETHRBUG') == true){

            self::$forecast_length_override = $this->get_resource('forecast_length_override', 0, 'CRNRSTN::RESOURCE::WETHRBUG');

        }

        if($this->isset_resource('data_value', 'default_units_celsius_override', 'CRNRSTN::RESOURCE::WETHRBUG') == true){

            self::$default_units_celsius_override = $this->get_resource('default_units_celsius_override', 0, 'CRNRSTN::RESOURCE::WETHRBUG');

        }

        if($this->isset_resource('data_value', 'database_enabled_override', 'CRNRSTN::RESOURCE::WETHRBUG') == true){

            self::$database_enabled_override = $this->get_resource('database_enabled_override', 0, 'CRNRSTN::RESOURCE::WETHRBUG');

        }

    }

    private function ddo_translate($channel_profile_ARRAY){

        /*
        CHANNEL PROFILE ARRAY[Array
        (
            [SOURCEID] => Array
                (
                    [INTEGER] => 8070
                    [STRING] => CRNRSTN_CHANNEL_SOAP
                )

            [ENCRYPTION] => Array
                (
                    [PROFILE] => Array
                        (
                            [INTEGER] => 8191
                            [STRING] => CRNRSTN_ENCRYPT_SOAP
                        )

                )

            [CHAR] => O
            [NAME] => soap
            [DESCRIPTION] => O :: SIMPLE OBJECT ACCESS PROTOCOL (NuSOAP 0.9.5, SOAP 1.1)
            [AUTHORIZATION] => Array
                (
                    [PROFILE] => Array
                        (
                            [PRIMARY] => Array
                                (
                                    [INTEGER] => Array
                                        (
                                            [8083] => 8083
                                        )

                                    [STRING] => Array
                                        (
                                            [CRNRSTN_AUTHORIZE_GET] => 8083
                                        )

                                )

                            [AUTHORIZED] => Array
                                (
                                    [INTEGER] => Array
                                        (
                                            [8076] => 8076
                                            [8082] => 8082
                                            [8080] => 8080
                                            [8064] => 8064
                                            [8066] => 8066
                                            [12] => 12
                                            [8] => 8
                                            [0] => 0
                                        )

                                    [STRING] => Array
                                        (
                                            [CRNRSTN_AUTHORIZE_ALL] => 8076
                                            [CRNRSTN_AUTHORIZE_SOAP] => 8082
                                            [CRNRSTN_AUTHORIZE_SOAP & CRNRSTN_AUTHORIZE_GET] => 8082
                                            [CRNRSTN_AUTHORIZE_SOAP & CRNRSTN_AUTHORIZE_POST] => 8080
                                            [CRNRSTN_AUTHORIZE_SOAP & CRNRSTN_AUTHORIZE_COOKIE] => 8080
                                            [CRNRSTN_AUTHORIZE_SOAP & CRNRSTN_AUTHORIZE_SESSION] => 8080
                                            [CRNRSTN_AUTHORIZE_SOAP & CRNRSTN_AUTHORIZE_DATABASE] => 8064
                                            [CRNRSTN_AUTHORIZE_SOAP & CRNRSTN_AUTHORIZE_SSDTLA] => 8066
                                            [CRNRSTN_AUTHORIZE_SOAP & CRNRSTN_AUTHORIZE_PSSDTLA] => 8066
                                            [CRNRSTN_AUTHORIZE_SOAP & CRNRSTN_AUTHORIZE_RUNTIME] => 8080
                                            [CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_GET] => 12
                                            [CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_POST] => 8
                                            [CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_POST & ~CRNRSTN_AUTHORIZE_GET] => 8
                                            [CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_COOKIE] => 12
                                            [CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_SESSION] => 12
                                            [0] => 0
                                            [CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_DATABASE] => 0
                                            [CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_SSDTLA] => 0
                                            [CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_PSSDTLA] => 0
                                            [CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_PSSDTLA & ~CRNRSTN_AUTHORIZE_COOKIE] => 0
                                            [CRNRSTN_AUTHORIZE_ALL & ~CRNRSTN_AUTHORIZE_RUNTIME] => 8
                                        )

                                )

                        )

                )

        )
        ].

        */

        error_log(__LINE__ . ' crnrstn BEGIN FIRST[?] DDO TRANSLATION OPPORTUNITY...? die();');
        die();

        //
        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
        // OBJECT (MC-DDO) DATA TRANSLATION
        // SERVICES LAYER.
        $this->destruct_output .= '<pre><code>[' . $this->return_micro_time() . '] [lnum ' . __LINE__ . '] [rtime ' . $this->wall_time() . '] [class ' . __CLASS__ . '] Starting ' . $channel_profile_ARRAY['NAME'] . ' [' . $channel_profile_ARRAY['CHAR'] . '] channel data translation into the C<span style="color:#F90000;">R</span>NRSTN :: DDO.</code></pre>';

        switch($channel_profile_ARRAY['SOURCEID'][CRNRSTN_INTEGER]){
            case CRNRSTN_CHANNEL_GET:
                //G :: HTTP $_GET REQUEST.

                $tmp_str = '';

                //
                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) DATA TRANSLATION.
                // # # C # R # N # R # S # T # N # : : # # # #
                // G :: HTTP $_GET REQUEST.
                //
                // $_GET[] DATA.
                foreach($_GET as $attribute => $get_data){

                    $tmp_str .= $get_data;
                    $this->input_data_value($get_data, $attribute, 'CRNRSTN::RESOURCE::GET_CHANNEL_DATA', 0, CRNRSTN_AUTHORIZE_GET);

                }

                //error_log(__LINE__ . ' rrs map [' . $channel . '] ' . $this->get_channel_config($channel, 'NAME') . ' CHANNEL DATA INITIALIZED $channel_bytes=0.');
                self::$cache_ARRAY[self::$request_id]['channel_bytes'][$channel] = $this->return_cache_bytes_size($tmp_str);

            break;
            case CRNRSTN_CHANNEL_POST:
                //P :: HTTP $_POST REQUEST.

                $tmp_str = '';

                //
                // $_GET[] DATA.
                foreach($_POST as $attribute => $post_data){

                    $tmp_str .= $post_data;
                    //
                    // TODO :: CONSIDER CONSUMING POST DATA HERE.
                    //$this->input_data_value($post_data, $attribute, 'CRNRSTN::RESOURCE::GET_CHANNEL_DATA', 0, CRNRSTN_AUTHORIZE_POST);

                }

                //error_log(__LINE__ . ' rrs map [' . $channel . '] ' . $this->get_channel_config($channel, 'NAME') . ' CHANNEL DATA INITIALIZED $channel_bytes=0.');
                self::$cache_ARRAY[self::$request_id]['channel_bytes'][$channel] = $this->return_cache_bytes_size($tmp_str);

            break;
            case CRNRSTN_CHANNEL_COOKIE:
                //C :: CARRIER PIGEON (AVIAN OF HOMING VARIANT)...OR EVEN A BROWSER COOKIE...EQUALLY AS RELIABLE TO CRNRSTN ::

                //error_log(__LINE__ . ' rrs map [' . $channel . '] ' . $this->get_channel_config($channel, 'NAME') . ' CHANNEL DATA INITIALIZED $channel_bytes=0.');
                self::$cache_ARRAY[self::$request_id]['channel_bytes'][$channel] = 0;

            break;
            case CRNRSTN_CHANNEL_SESSION:
                //H :: PHP SERVER SESSION ($_SESSION SUPER GLOBAL ARRAY).

                //error_log(__LINE__ . ' rrs map [' . $channel . '] ' . $this->get_channel_config($channel, 'NAME') . ' CHANNEL DATA INITIALIZED $channel_bytes=0.');
                $_SESSION['CRNRSTN_' . self::$config_serial]['channel_bytes'][$channel] = 0;

            break;
            case CRNRSTN_CHANNEL_DATABASE:
                //D :: DATABASE (MySQLi CONNECTION).
            case CRNRSTN_CHANNEL_SSDTLA:
                //S :: CRNRSTN :: SSDTLA PACKET (SOAP WRAPPED ENCRYPTED PSSDTLA PACKET. THE BROWSER WILL TALK LIKE A SERVER).
            case CRNRSTN_CHANNEL_PSSDTLA:
                //J :: CRNRSTN :: PSSDTLA PACKET (OPENSSL ENCRYPTED JSON OBJECT).
            case CRNRSTN_CHANNEL_RUNTIME:
                //R :: RUNTIME.
            case CRNRSTN_CHANNEL_SOAP:
                //O :: SIMPLE OBJECT ACCESS PROTOCOL (NuSOAP 0.9.5, SOAP 1.1).
            case CRNRSTN_CHANNEL_FILE:
                //F :: SERVER LOCAL FILE SYSTEM.

                //error_log(__LINE__ . ' rrs map [' . $channel . '] ' . $this->get_channel_config($channel, 'NAME') . ' CHANNEL DATA INITIALIZED $channel_bytes=0.');
                self::$cache_ARRAY[self::$request_id]['channel_bytes'][$channel] = 0;

            break;

        }

        $this->destruct_output .= '<pre><code>[' . $this->return_micro_time() . '] [lnum ' . __LINE__ . '] [rtime ' . $this->wall_time() . '] [class ' . __CLASS__ . '] Completed ' . $channel_profile_ARRAY['NAME'] . ' [' . $channel_profile_ARRAY['CHAR'] . '] channel data translation.</code></pre>';

        return true;

    }

    public function set_channel_config($channel_constant, $attribute_name, $data){

        //
        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
        // OBJECT (MC-DDO) SERVICES LAYER.
        // # # C # R # N # R # S # T # N # : : # # # #
        // CRNRSTN :: UGC DATA INPUT [BOOLEAN]
        // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
        return self::$oCRNRSTN_CONFIG_MGR->set_channel_config($channel_constant, $attribute_name, $data);

    }

    public function ________get_channel_config($channel_constant, $attribute_name){

        //
        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
        // OBJECT (MC-DDO) SERVICES LAYER.
        // # # C # R # N # R # S # T # N # : : # # # #
        // CRNRSTN :: UGC DATA INPUT [BOOLEAN]
        // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
        return self::$oCRNRSTN_CONFIG_MGR->get_channel_config($channel_constant, $attribute_name);

    }

    public function isset_channel_config($channel_constant, $attribute_name, $return_type = CRNRSTN_BOOLEAN){

        //
        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
        // OBJECT (MC-DDO) SERVICES LAYER.
        // # # C # R # N # R # S # T # N # : : # # # #
        // CRNRSTN :: UGC DATA INPUT [BOOLEAN]
        // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
        return self::$oCRNRSTN_CONFIG_MGR->isset_channel_config($channel_constant, $attribute_name, $return_type);

    }

    public function is_channel_active($channel_constant, $return_type = CRNRSTN_BOOLEAN){

        //?
        return self::$oCRNRSTN_CONFIG_MGR->is_channel_active($channel_constant, $return_type);

    }

    public function get_system_logging_config($channel, $index_0 = NULL, $index_1 = NULL, $index_2 = NULL, $index_3 = NULL, $initialize = false){

        //
        // CRNRSTN_LOG_EMAIL                => 'CRNRSTN_LOG_EMAIL'
        // CRNRSTN_LOG_EMAIL_PROXY          => 'CRNRSTN_LOG_EMAIL_PROXY'
        // CRNRSTN_LOG_FILE                 => 'CRNRSTN_LOG_FILE'
        // CRNRSTN_CHANNEL_FILE             => 'CRNRSTN_CHANNEL_FILE'
        // CRNRSTN_LOG_FILE_FTP             => 'CRNRSTN_LOG_FILE_FTP'
        // CRNRSTN_LOG_SCREEN_TEXT          => 'CRNRSTN_LOG_SCREEN_TEXT'
        // CRNRSTN_LOG_SCREEN               => 'CRNRSTN_LOG_SCREEN'
        // CRNRSTN_LOG_SCREEN_HTML          => 'CRNRSTN_LOG_SCREEN_HTML'
        // CRNRSTN_LOG_SCREEN_HTML_HIDDEN   => 'CRNRSTN_LOG_SCREEN_HTML_HIDDEN'
        // CRNRSTN_LOG_DEFAULT              => 'CRNRSTN_LOG_DEFAULT'
        // CRNRSTN_LOG_ELECTRUM             => 'CRNRSTN_LOG_ELECTRUM'
        // CRNRSTN_LOG_SCREEN               => 'CRNRSTN_LOG_SCREEN'
        // CRNRSTN_CHANNEL_DATABASE         => 'CRNRSTN_CHANNEL_DATABASE'
        // CRNRSTN_CHANNEL_SSDTLA           => 'CRNRSTN_CHANNEL_SSDTLA'
        // CRNRSTN_CHANNEL_PSSDTLA          => 'CRNRSTN_CHANNEL_PSSDTLA'
        // CRNRSTN_CHANNEL_SOAP             => 'CRNRSTN_CHANNEL_SOAP'

        //
        // CRNRSTN :: SOAP SERVICES LOGGING SERVICES LAYER.
        // # # C # R # N # R # S # T # N # : : # # # #
        return self::$oLogger->get_system_logging_config($channel, $index_0, $index_1, $index_2, $index_3, $initialize);

    }

    public function authorized_channel_ids($channel_data, $output_format = CRNRSTN_INTEGER){

        return self::$oCRNRSTN_CONFIG_MGR->authorized_channel_ids($channel_data, $output_format);

    }

    public function get_channel_config($channel, $index_0 = NULL, $index_1 = NULL, $index_2 = NULL, $index_3 = NULL){
        // RENAMED THIS METHOD AND PRESSED BACK INTO SERVICE ON Tuesday, October 10, 2023 @ 0651 hrs.
        // LAST MODIFIED: Wednesday, October 18, 2023 @ 0110 hrs.
        //
        // ORIGINAL METHOD NAME AND INTRO NOTES:
        //      public function follows_channel_init_sequence($channel){
        //
        //      /*
        //      CRNRSTN :: ORDER OF OPERATIONS (PREFERENCE) FOR SPECIFICATION OF
        //      AUTHORIZED DATA ARCHITECTURES (CHANNEL).
        //
        //      DATA HANDLING ARCHITECTURES
        //      -----
        //      G :: HTTP $_GET REQUEST.
        //      P :: HTTP $_POST REQUEST.
        //      H :: PHP SERVER SESSION ($_SESSION SUPER GLOBAL ARRAY).
        //      S :: CRNRSTN :: SSDTLA PACKET (SOAP WRAPPED ENCRYPTED PSSDTLA PACKET. THE BROWSER WILL TALK LIKE A SERVER).
        //      J :: CRNRSTN :: PSSDTLA PACKET (OPENSSL ENCRYPTED JSON OBJECT).
        //      C :: CARRIER PIGEON (AVIAN OF HOMING VARIANT)...OR BROWSER COOKIE...
        //      D :: DATABASE (MySQLi CONNECTION).
        //      R :: RUNTIME.
        //      O :: SIMPLE OBJECT ACCESS PROTOCOL (NuSOAP 0.9.5, SOAP 1.1).
        //      F :: SERVER LOCAL FILE SYSTEM.
        //
        //      GPHSJCDROF
        //
        //      */

        //
        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
        // OBJECT (MC-DDO) SERVICES LAYER.
        // # # C # R # N # R # S # T # N # : : # # # #
        // CRNRSTN :: UGC DATA INPUT [BOOLEAN]
        // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
        return self::$oCRNRSTN_CONFIG_MGR->get_channel_config($channel, $index_0, $index_1, $index_2, $index_3);

    }

    public function data_channel_init_sequence(){

        return self::$data_channel_init_sequence;

    }

    public function channel_authorization_data_reporting_sync(&$data, $data_key, $data_type_family, $channel = CRNRSTN_CHANNEL_RUNTIME, $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME, $cache_storage = 'CHANNEL_PERFORMANCE_MONITORING_REPORTING'){

        $data = self::$oCRNRSTN_RRS_MAP->channel_authorization_data_reporting_sync($data, $data_key, $data_type_family, $channel, $data_authorization_profile, $cache_storage);

    }

    public function channel_bytes_stored($channel = CRNRSTN_CHANNEL_RUNTIME){

        return self::$oCRNRSTN_CONFIG_MGR->get_channel_config($channel, 'total_channel_bytes');

        //
        // PLEASE SEE,
        //  $oCRNRSTN->set_channel_config($channel_constant, $attribute_name, $data);
        //  $oCRNRSTN->get_channel_config($channel, $index_0 = NULL, $index_1 = NULL, $index_2 = NULL, $index_3 = NULL);
        //  $oCRNRSTN->isset_channel_config($channel_constant, $attribute_name, $return_type = CRNRSTN_BOOLEAN);
        //  $oCRNRSTN->is_channel_active($channel_constant, $return_type = CRNRSTN_BOOLEAN)

    }

    public function config_init_channel($env_key, $channel, $max_bytes = -1, $ttl = 30, $is_active = true, $oersl_enabled = true){

        try{

            $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$env_key', '$channel');
            $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('MISSING_STRING_DATA', $tmp_stripe_key_ARRAY, $env_key, $channel);

            $tmp_param_missing_str = $tmp_param_err_str_ARRAY['string'];
            $tmp_param_missing_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

            if(count($tmp_param_missing_ARRAY) > 0){

                $this->error_log('Attempted ' . __METHOD__ . ' [(' . $channel . ') ' . $this->get_channel_config($channel, 'NAME') . ' CHANNEL] but missing required parameters. ' .
                    $tmp_param_missing_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                throw new Exception('CRNRSTN :: channel initialization ERROR. Missing parameter information. ' . $tmp_param_missing_str);

            }else{

                //
                // A CATCH FOR THROWBACK (PRE-BITFLIP ERA) CONFIG DATA.
                if($env_key == '*'){

                    $env_key = CRNRSTN_RESOURCE_ALL;

                }

                //
                // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
                // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
                // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
                // PERFORMANCE ACCELERATION BOOST.
                if($this->config_is_valid_detected_env($env_key, false) == true){

                    //
                    // CHANNEL INTEGER.
                    $tmp_channel_int = $this->get_channel_config($channel, 'AUTHORIZATION', 'PROFILE', 'PRIMARY', CRNRSTN_INTEGER);

                    /*
                    database_channel_is_opened_timestamp
                    database_channel_is_closed_timestamp

                    database_channel_config_ini_call_timestamp
                    database_client_ip_address
                    database_php_sessionid

                    database_channel_opened_count
                    database_last_opened_timestamp
                    database_last_closed_timestamp

                    $this->set_channel_config($tmp_channel_name, 'client_ip_address', $this->client_ip());
                    $this->get_channel_config($tmp_channel_name, 'client_ip_address');
                    $this->isset_channel_config($tmp_channel_name, 'client_ip_address');

                    */

                    $tmp_channel_name = $this->get_channel_config($channel, 'NAME');
                    //$tmp_channel_description = $this->get_channel_config($channel, 'DESCRIPTION');
                    $tmp_channel_encryption = $this->get_channel_config($channel, 'ENCRYPTION', 'PROFILE', CRNRSTN_INTEGER);

                    //
                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                    //
                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                    //
                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                    // - $oCRNRSTN->err_message_queue_push(),
                    // - $oCRNRSTN->err_message_queue_retrieve(),
                    // - $oCRNRSTN->err_message_queue_clear(), AND
                    // - $oCRNRSTN->get_err_message_count().
                    //
                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                    //		        EXPIRATION TTL.
                    //
                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_bytes', $max_bytes, $tmp_channel_name . '_max_bytes', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        throw new Exception($this->err_message_queue_retrieve());

                    }

                    //
                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                    //
                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                    //
                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                    // - $oCRNRSTN->err_message_queue_push(),
                    // - $oCRNRSTN->err_message_queue_retrieve(),
                    // - $oCRNRSTN->err_message_queue_clear(), AND
                    // - $oCRNRSTN->get_err_message_count().
                    //
                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                    //		        EXPIRATION TTL.
                    //
                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $is_active, $tmp_channel_name . '_is_active', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        throw new Exception($this->err_message_queue_retrieve());

                    }

                    //
                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                    //
                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                    //
                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                    // - $oCRNRSTN->err_message_queue_push(),
                    // - $oCRNRSTN->err_message_queue_retrieve(),
                    // - $oCRNRSTN->err_message_queue_clear(), AND
                    // - $oCRNRSTN->get_err_message_count().
                    //
                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                    //		        EXPIRATION TTL.
                    //
                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $ttl, $tmp_channel_name . '_ttl', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        throw new Exception($this->err_message_queue_retrieve());

                    }

                    //
                    // CRNRSTN :: OPENSSL ENCRYPTION ROTATION SERVICES LAYER (OERSL) INITIALIZATION.
                    //
                    // TODO :: DON'T WORRY TOO MUCH ABOUT CHANNEL-TO-ENCRYPT RELATIONS.
                    // THERE SHOULD BE SUPPORT FOR n+1 ENCRYPTION PROFILES. E.G. EVERY SOAP CLIENT
                    // SHOULD HAVE ITS OWN OPENSSL PROFILE AT THE SERVER. THIS WILL BE QUITE USEFUL
                    // WHEN LEGACY SYSTEMS (READ AS SUPPORTING PHP 5 >= 5.5) WITH LIMITED[?]
                    // CIPHER/ALGORITHM OPTIONS AND DEPENDING UPON SOAP INTEGRATIONS WITH
                    // CRNRSTN :: FOR UPDATES.
                    if($this->tidy_boolean($oersl_enabled) == true){

                        switch($tmp_channel_int){
                            case CRNRSTN_CHANNEL_GET:

                                //
                                // CRNRSTN_ENCRYPT_GET.
                                //
                                // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                                // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                                self::$oCRNRSTN_BITFLIP_MGR->toggle_bit($tmp_channel_encryption, true);

                                //
                                // CRNRSTN :: MULTI-CHANNEL PERFORMANCE REPORT TESTING.
                                // Sunday, November 19, 2023 @ 2305 hrs.
                                //$this->destruct_output .= $tmp_channel_report_str = $this->channel_report($tmp_channel_int);

                                //
                                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
                                // OBJECT (MC-DDO) SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [MIXED]
                                // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
                                // TODO :: LEVERAGE ENCRYPTION PROFILE DATA FROM THE CHANNEL META ARRAY, HERE.
                                $this->set_channel_config($tmp_channel_name, 'encryption_profile', $tmp_channel_int);
                                $this->set_channel_config($tmp_channel_name, 'channel_request_startime', $this->starttime);
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_timestamp', $this->microtime_float());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_client_ip_address', $this->client_ip());
                                $this->set_channel_config($tmp_channel_name, '_channel_activation_php_sessionid', session_id());

                            break;
                            case CRNRSTN_CHANNEL_POST:

                                //
                                // CRNRSTN_ENCRYPT_POST.
                                //
                                // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                                // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                                self::$oCRNRSTN_BITFLIP_MGR->toggle_bit($this->get_channel_config($channel, 'ENCRYPTION', 'PROFILE', CRNRSTN_INTEGER), true);

                                //
                                // CRNRSTN :: MULTI-CHANNEL PERFORMANCE REPORT TESTING.
                                // Sunday, November 19, 2023 @ 2305 hrs.
                                //$this->destruct_output .= $tmp_channel_report_str = $this->channel_report($tmp_channel_int);


                                //
                                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
                                // OBJECT (MC-DDO) SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [MIXED]
                                // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
                                $this->set_channel_config($tmp_channel_name, 'encryption_profile', $tmp_channel_int);
                                $this->set_channel_config($tmp_channel_name, 'channel_request_startime', $this->starttime);
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_timestamp', $this->microtime_float());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_client_ip_address', $this->client_ip());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_php_sessionid', session_id());

                            break;
                            case CRNRSTN_CHANNEL_COOKIE:

                                //
                                // CRNRSTN_ENCRYPT_COOKIE.
                                //
                                // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                                // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                                self::$oCRNRSTN_BITFLIP_MGR->toggle_bit($this->get_channel_config($channel, 'ENCRYPTION', 'PROFILE', CRNRSTN_INTEGER), true);

                                //
                                // CRNRSTN :: MULTI-CHANNEL PERFORMANCE REPORT TESTING.
                                // Sunday, November 19, 2023 @ 2305 hrs.
                                //$this->destruct_output .= $tmp_channel_report_str = $this->channel_report($tmp_channel_int);


                                //
                                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
                                // OBJECT (MC-DDO) SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [MIXED]
                                // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
                                $this->set_channel_config($tmp_channel_name, 'encryption_profile', $tmp_channel_int);
                                $this->set_channel_config($tmp_channel_name, 'channel_request_startime', $this->starttime);
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_timestamp', $this->microtime_float());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_client_ip_address', $this->client_ip());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_php_sessionid', session_id());

                            break;
                            case CRNRSTN_CHANNEL_SESSION:

                                //
                                // CRNRSTN_ENCRYPT_SESSION.
                                //
                                // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                                // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                                self::$oCRNRSTN_BITFLIP_MGR->toggle_bit($this->get_channel_config($channel, 'ENCRYPTION', 'PROFILE', CRNRSTN_INTEGER), true);

                                //
                                // CRNRSTN :: MULTI-CHANNEL PERFORMANCE REPORT TESTING.
                                // Sunday, November 19, 2023 @ 2305 hrs.
                                //$this->destruct_output .= $tmp_channel_report_str = $this->channel_report($tmp_channel_int);

                                //
                                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
                                // OBJECT (MC-DDO) SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [MIXED]
                                // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
                                $this->set_channel_config($tmp_channel_name, 'encryption_profile', $tmp_channel_int);
                                $this->set_channel_config($tmp_channel_name, 'channel_request_startime', $this->starttime);
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_timestamp', $this->microtime_float());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_client_ip_address', $this->client_ip());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_php_sessionid', session_id());

                            break;
                            case CRNRSTN_CHANNEL_DATABASE:

                                //
                                // CRNRSTN_ENCRYPT_DATABASE.
                                //
                                // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                                // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                                self::$oCRNRSTN_BITFLIP_MGR->toggle_bit($this->get_channel_config($channel, 'ENCRYPTION', 'PROFILE', CRNRSTN_INTEGER), true);

                                //
                                // CRNRSTN :: MULTI-CHANNEL PERFORMANCE REPORT TESTING.
                                // Sunday, November 19, 2023 @ 2305 hrs.
                                //$this->destruct_output .= $tmp_channel_report_str = $this->channel_report($tmp_channel_int);

                                //
                                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
                                // OBJECT (MC-DDO) SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [MIXED]
                                // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
                                $this->set_channel_config($tmp_channel_name, 'encryption_profile', $tmp_channel_int);
                                $this->set_channel_config($tmp_channel_name, 'channel_request_startime', $this->starttime);
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_timestamp', $this->microtime_float());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_client_ip_address', $this->client_ip());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_php_sessionid', session_id());

                            break;
                            case CRNRSTN_CHANNEL_SSDTLA:
                            case CRNRSTN_CHANNEL_PSSDTLA:
                            case CRNRSTN_CHANNEL_RUNTIME:

                                //
                                // CRNRSTN_ENCRYPT_TUNNEL.
                                //
                                // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                                // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                                self::$oCRNRSTN_BITFLIP_MGR->toggle_bit($this->get_channel_config($channel, 'ENCRYPTION', 'PROFILE', CRNRSTN_INTEGER), true);

                                //
                                // CRNRSTN :: MULTI-CHANNEL PERFORMANCE REPORT TESTING.
                                // Sunday, November 19, 2023 @ 2305 hrs.
                                //$this->destruct_output .= $tmp_channel_report_str = $this->channel_report(CRNRSTN_ENCRYPT_TUNNEL);

                                //
                                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
                                // OBJECT (MC-DDO) SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [MIXED]
                                // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
                                $this->set_channel_config($tmp_channel_name, 'encryption_profile', $tmp_channel_int);
                                $this->set_channel_config($tmp_channel_name, 'channel_request_startime', $this->starttime);
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_timestamp', $this->microtime_float());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_client_ip_address', $this->client_ip());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_php_sessionid', session_id());

                            break;
                            case CRNRSTN_CHANNEL_SOAP:

                                //
                                // CRNRSTN_ENCRYPT_SOAP.
                                //
                                // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                                // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                                self::$oCRNRSTN_BITFLIP_MGR->toggle_bit($this->get_channel_config($channel, 'ENCRYPTION', 'PROFILE', CRNRSTN_INTEGER), true);

                                //
                                // CRNRSTN :: MULTI-CHANNEL PERFORMANCE REPORT TESTING.
                                // Sunday, November 19, 2023 @ 2305 hrs.
                                //$this->destruct_output .= $tmp_channel_report_str = $this->channel_report($tmp_channel_int);

                                //
                                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
                                // OBJECT (MC-DDO) SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [MIXED]
                                // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
                                $this->set_channel_config($tmp_channel_name, 'encryption_profile', $tmp_channel_int);
                                $this->set_channel_config($tmp_channel_name, 'channel_request_startime', $this->starttime);
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_timestamp', $this->microtime_float());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_client_ip_address', $this->client_ip());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_php_sessionid', session_id());

                            break;
                            case CRNRSTN_CHANNEL_FILE:

                                //
                                // CRNRSTN_ENCRYPT_FILE.
                                //
                                // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                                // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                                self::$oCRNRSTN_BITFLIP_MGR->toggle_bit($this->get_channel_config($channel, 'ENCRYPTION', 'PROFILE', CRNRSTN_INTEGER), true);

                                //
                                // CRNRSTN :: MULTI-CHANNEL PERFORMANCE REPORT TESTING.
                                // Sunday, November 19, 2023 @ 2305 hrs.
                                //$this->destruct_output .= $tmp_channel_report_str = $this->channel_report($tmp_channel_int);

                                //
                                // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
                                // OBJECT (MC-DDO) SERVICES LAYER.
                                // # # C # R # N # R # S # T # N # : : # # # #
                                // CRNRSTN :: UGC DATA INPUT [MIXED]
                                // APPLY CHANNEL SETTINGS TO RRS MAP OBJECT.
                                $this->set_channel_config($tmp_channel_name, 'encryption_profile', $tmp_channel_int);
                                $this->set_channel_config($tmp_channel_name, 'channel_request_startime', $this->starttime);
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_timestamp', $this->microtime_float());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_client_ip_address', $this->client_ip());
                                $this->set_channel_config($tmp_channel_name, 'channel_activation_php_sessionid', session_id());

                            break;
                            default:

                                error_log(__LINE__ . ' crnrstn MISSING SWITCH CASE $channel[(' . $channel . ') ' . $this->get_channel_config($channel, 'NAME') . '].');

                            break;

                        }

                    }

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_init_channel_map(){

        //
        // INITIALIZE CHANNEL PERFORMANCE REPORTING.
        $this->config_init_rrs_map_max_report_length();

        //
        // SYNC ACTIVE CHANNEL DATA INDEX TO NEW RRS MAP OBJECT CONFIGURATION PROFILE.
        return self::$oCRNRSTN_RRS_MAP->config_init_channel_map();

    }

    public function config_channel_data_translate(){

        $this->destruct_output .= '<pre><code>[' . $this->return_micro_time() . '] [lnum ' . __LINE__ . '] [class ' . __CLASS__ . '] C<span style="color:#F90000;">R</span>NRSTN :: CONFIGURATION CALLING self::$oCRNRSTN_CONFIG_MGR->config_init_multi_channels().</code></pre>';
        self::$oCRNRSTN_CONFIG_MGR->config_channel_data_translate();

    }

    public function config_init_rrs_map_max_report_length(){

        return self::$oCRNRSTN_RRS_MAP->config_init_rrs_map_max_report_length();

    }

    public function config_data_authorization_profile($env_key, $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME){

        try{

            /*
            CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
            OBJECT (MC-DDO) SERVICES LAYER AUTHORIZATION
            PROFILES FOR DATA HANDLING.
            -----
            CRNRSTN_AUTHORIZE_ALL
            CRNRSTN_AUTHORIZE_GET
            CRNRSTN_AUTHORIZE_POST
            CRNRSTN_AUTHORIZE_COOKIE
            CRNRSTN_AUTHORIZE_SESSION
            CRNRSTN_AUTHORIZE_DATABASE
            CRNRSTN_AUTHORIZE_SSDTLA
            CRNRSTN_AUTHORIZE_PSSDTLA
            CRNRSTN_AUTHORIZE_RUNTIME
            CRNRSTN_AUTHORIZE_SOAP
            CRNRSTN_AUTHORIZE_ISEMAIL
            CRNRSTN_AUTHORIZE_ISUSERNAME
            CRNRSTN_AUTHORIZE_ISPASSWORD

            */

            //
            // A CATCH FOR THROWBACK (PRE-BITFLIP ERA) CONFIG DATA.
            if($env_key == '*'){

                $env_key = CRNRSTN_RESOURCE_ALL;

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            //if($this->config_is_valid_detected_env($env_key, false) == true){

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $data_authorization_profile, 'data_authorization_profile', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            //}

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function is_valid_hmac_algorithm($data, $data_key, $data_type_family){

        $tmp_is_valid = false;

        //
        // QUICK RUNTIME CHECK.
        if($this->oCRNRSTN_ENV->isset_hmac_algorithm_profile($data_key, $data_type_family) == true){

            return true;

        }

        $tmp_hmac_algorithm = strtolower(trim($data));

        //
        // PERSIST THE RESULTS OF THIS COSTLY DECISION IN SESSION.
        if(!$this->isset_resource('data_value', $data_key, $data_type_family, CRNRSTN_CHANNEL_SESSION) == true){

            //
            // DO WE NEED TO [RUNTIME] LOAD THE SERVER HMAC LIBRARY?
            if(self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER] == -1){

                //
                // LOAD AVAILABLE (ON THE SERVER)
                // HMAC HASH ALGORITHMS.
                self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'] = hash_algos();

            }

            //
            // UPDATE THE INTERNAL REFERENCE DATA STRUCTURE PER THE SERVER'S
            // AVAILABLE HMAC ALGORITHMS AND THE INPUT DATA.
            // # # C # R # N # R # S # T # N # : : # # # #
            // CRNRSTN :: UGC DATA VALIDATION [_hmac_lib]
            foreach((array)self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'] as $hash_index => $hash_name){
                // TODO :: IS IT A GUARANTEE THAT THE SERVER HASH NAME WILL ALWAYS BE LOWERCASE?

                $tmp_lower_hash = strtolower($hash_name);
                self::$hmac_hash_algorithm_ARRAY['OPTIONS']['ISACTIVE'][$tmp_lower_hash] = $hash_index;

                if($tmp_lower_hash == $tmp_hmac_algorithm){

                    //
                    // SET ENVIRONMENT OPENSSL HMAC ALGORITHM PROFILE.
                    $this->oCRNRSTN_ENV->set_hmac_algorithm_profile($hash_name, $data_key, $data_type_family);

                    //
                    // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                    // # # C # R # N # R # S # T # N # : : # # # #
                    // CRNRSTN :: UGC DATA INPUT [_hmac_lib]
                    $tmp_output = $this->add_resource($data_key, $tmp_hmac_algorithm, $data_type_family, CRNRSTN_AUTHORIZE_SESSION, 0);
                    $this->add_resource($data_key . '_index', $hash_index, $data_type_family, CRNRSTN_AUTHORIZE_SESSION, 0);

                    $tmp_is_valid = true;

                }

            }

        }else{

            //
            // SESSION IS SET FOR THIS CIPHER BY KEY AND FAMILY, SO WE ARE VALID.
            return true;

        }

        return $tmp_is_valid;

    }

    public function get_openssl_cipher_profile($data_key, $data_type_family, $graceful_degrade = true){

        return $this->oCRNRSTN_ENV->get_openssl_cipher_profile($data_key, $data_type_family, $graceful_degrade);

    }

    public function is_valid_openssl_cipher($data, $data_key, $data_type_family){

        $tmp_is_valid = false;

        //
        // QUICK RUNTIME CHECK.
        if($this->oCRNRSTN_ENV->isset_openssl_cipher_profile($data_key, $data_type_family) == true){

            return true;

        }

        $tmp_cipher = strtolower(trim($data));

        //
        // PERSIST THE RESULTS OF THIS COSTLY DECISION IN SESSION.
        if(!$this->isset_resource('data_value', $data_key, $data_type_family, CRNRSTN_CHANNEL_SESSION) == true){

            //
            // DO WE NEED TO [RUNTIME] LOAD THE SERVER OPENSSL CIPHERS?
            if(self::$openssl_ARRAY['CIPHER']['DEFAULT'][CRNRSTN_INTEGER] == -1){

                if(!isset($this->oCRNRSTN_ENV)){

                    //
                    // INITIALIZATION OF CRNRSTN :: ENVIRONMENT.
                    $this->oCRNRSTN_ENV = new crnrstn_environment($this);

                    //
                    // INITIALIZATION OF CRNRSTN :: USER.
                    $this->oCRNRSTN_USR = $this->oCRNRSTN_ENV->return_ENV_oCRNRSTN_USR();

                }

                //
                // LOAD AVAILABLE (ON THE SERVER)
                // OPENSSL CIPHERS.
                self::$openssl_ARRAY['CIPHER']['OPTIONS']['SERVER'] = $this->oCRNRSTN_ENV->openssl_get_cipher_methods(false, false);

            }

            //
            // UPDATE THE INTERNAL REFERENCE DATA STRUCTURE PER THE SERVER'S
            // AVAILABLE OPENSSL CIPHERS AND THE INPUT DATA.
            // # # C # R # N # R # S # T # N # : : # # # #
            // CRNRSTN :: UGC DATA VALIDATION [_openssl_cipher_lib]
            foreach((array)self::$openssl_ARRAY['CIPHER']['OPTIONS']['SERVER'] as $cipher_index => $cipher_name){
                // TODO :: IS IT A GUARANTEE THAT THE SERVER HASH NAME WILL ALWAYS BE LOWERCASE?

                $tmp_lower_hash = strtolower($cipher_name);
                self::$openssl_ARRAY['CIPHER']['OPTIONS']['ISACTIVE'][$tmp_lower_hash] = $cipher_index;

                if($tmp_lower_hash == $tmp_cipher){

                    //
                    // SET ENVIRONMENT OPENSSL CIPHER PROFILE.
                    $this->oCRNRSTN_ENV->set_openssl_cipher_profile($cipher_name, $data_key, $data_type_family);

                    //
                    // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                    // # # C # R # N # R # S # T # N # : : # # # #
                    // CRNRSTN :: UGC DATA INPUT [_openssl_cipher_lib]
                    $tmp_output = $this->add_resource($data_key, $cipher_name, $data_type_family, CRNRSTN_AUTHORIZE_SESSION, 0);
                    $this->add_resource($data_key . '_index', $cipher_index, $data_type_family, CRNRSTN_AUTHORIZE_SESSION, 0);

                    $tmp_is_valid = true;

                }

            }

        }else{

            //
            // SESSION IS SET FOR THIS CIPHER BY KEY AND FAMILY, SO WE ARE VALID.
            return true;

        }

        return $tmp_is_valid;

    }

    public function return_encryption_data_type_family($encryption_channel){

        switch($encryption_channel){
            case CRNRSTN_ENCRYPT_GET:

                $data_type_family = 'CRNRSTN::RESOURCE::GET_ENCRYPTION';

            break;
            case CRNRSTN_ENCRYPT_POST:

                $data_type_family = 'CRNRSTN::RESOURCE::POST_ENCRYPTION';

            break;
            case CRNRSTN_ENCRYPT_TUNNEL:

                $data_type_family = 'CRNRSTN::RESOURCE::TUNNEL_ENCRYPTION';

            break;
            case CRNRSTN_ENCRYPT_DATABASE:

                $data_type_family = 'CRNRSTN::RESOURCE::DATABASE_ENCRYPTION';

            break;
            case CRNRSTN_ENCRYPT_SESSION:

                $data_type_family = 'CRNRSTN::RESOURCE::SESSION_ENCRYPTION';

            break;
            case CRNRSTN_ENCRYPT_COOKIE:

                $data_type_family = 'CRNRSTN::RESOURCE::COOKIE_ENCRYPTION';

            break;
            case CRNRSTN_ENCRYPT_SOAP:

                $data_type_family = 'CRNRSTN::RESOURCE::SOAP_ENCRYPTION';

            break;
            case CRNRSTN_ENCRYPT_OERSL:

                $data_type_family = 'CRNRSTN::RESOURCE::OERSL_ENCRYPTION';

            break;
            default:

                //
                // IF DONE CONSISTENTLY, THIS SHOULD BE OK FOR GRACEFUL DEGREDATION.
                $data_type_family = 'CRNRSTN::RESOURCE::TUNNEL_ENCRYPTION';
                $this->error_log('An unknown encryption channel constant has been provided to ' . __METHOD__ . '. The tunnel encryption data type family has been returned.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            break;

        }

        return $data_type_family;

    }

    public function config_disk_byte_settings_overrides($env_key = CRNRSTN_RESOURCE_ALL, $os_bit_size = NULL, $max_write_file_size = NULL, $crnrstn_file_bytes_reserve = NULL, $max_write_volume_size = NULL, $crnrstn_volume_bytes_reserve = NULL){

        try{

            //
            // A CATCH FOR THROWBACK (PRE-BITFLIP ERA) CONFIG DATA.
            if($env_key == '*'){

                $env_key = CRNRSTN_RESOURCE_ALL;

            }

            if($env_key == CRNRSTN_RESOURCE_ALL && isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                //
                // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
                $this->env_key($env_key);

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key, false) == true){

                if(isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                    /*
                    SOURCE :: https://forum.red-gate.com/discussion/19287/filename-length-using-windows-xp-and-windows-7#:~:text=The%20fully%20qualified%20file%20name,limits%20in%20the%20error%20message.
                    AUTHOR :: Niall :: https://forum.red-gate.com/profile/niall_l
                    WINDOWS XP (XP VM IS WORSE)
                    The fully qualified file name must be less than 260 characters, and the directory
                    name must be less than 248 characters. The longest path for the VM is shorter at
                    175 chars, way below the limits in the error message.

                    Having done some investigation, i can use any path length on the XP VM as long as
                    the filename part does not exceed 114 characters. Is this a know issue when using
                    the product with Windows XP?

                    $tmp_system_file_max_ui_pageview_cnt_ARRAY = array(CRNRSTN_CHANNEL_DESKTOP => 75, CRNRSTN_CHANNEL_TABLET => 20 , CRNRSTN_CHANNEL_MOBILE => 20);
                    $this->config_add_resource(CRNRSTN_RESOURCE_ALL, 'system_file_max_ui_pageview_cnt', $tmp_system_file_max_ui_pageview_cnt_ARRAY, 'CRNRSTN::RESOURCE::INTERACT_UI::FILE_SYSTEM');

                    http://www.ntfs.com/ntfs_vs_fat.htm
                    https://answers.microsoft.com/en-us/windows/forum/all/how-many-files-can-a-folder-hold/25368d4b-83e3-47b3-b7a3-a0fb8c7286a7#:~:text=You%20can%20put%204%2C294%2C967%2C295%20files,was%20available%20whichever%20is%20less.
                    https://stackoverflow.com/a/466596

                    MYSQL_5.7
                    MYSQL_8.0
                    ----
                        MEMORY                          MYSQL 5.7           MYSQL 8.0
                            Storage limits	            RAM                 RAM
                            B-tree indexes              Yes                 Yes
                            Full-text search indexes	No                  No
                            Index caches	            N/A                 N/A
                            Transactions	            No                  No
                        INNODB                          MYSQL 5.7           MYSQL 8.0
                            Storage limits	            64TB                64TB
                            B-tree indexes              Yes                 Yes
                            Full-text search indexes	Yes                 Yes (Support for FULLTEXT indexes is available in MySQL 5.6 and later.)
                            Index caches	            Yes                 Yes
                            Transactions	            No                  Yes
                        ARCHIVE                         MYSQL 5.7           MYSQL 8.0
                            Storage limits	            None                None
                            B-tree indexes              No                  No
                            Full-text search indexes	No                  No
                            Index caches	            No                  No
                            Transactions	            No                  No
                        MYISAM                          MYSQL 5.7           MYSQL 8.0
                            Storage limits	            256TB               256TB
                            B-tree indexes              Yes                 Yes
                            Full-text search indexes	Yes                 Yes
                            Index caches	            Yes                 Yes
                            Transactions	            No                  No

                    Column Count Limits
                        MySQL has hard limit of 4096 columns per table, but the effective maximum may be less for a given table. The
                        exact column limit depends on several factors:
                            - The maximum row size for a table constrains the number (and possibly size) of columns because the
                              total length of all columns cannot exceed this size. See Row Size Limits.

                            - The storage requirements of individual columns constrain the number of columns that fit within a given
                              maximum row size. Storage requirements for some data types depend on factors such as storage engine,
                              storage format, and character set. See Section 11.7, “Data Type Storage Requirements”.

                            - Storage engines may impose additional restrictions that limit table column count. For example, InnoDB
                              has a limit of 1017 columns per table. See Section 15.22, “InnoDB Limits”. For information about other
                              storage engines, see Chapter 16, Alternative Storage Engines.

                            - Functional key parts (see Section 13.1.15, “CREATE INDEX Statement”) are implemented as hidden virtual
                              generated stored columns, so each functional key part in a table index counts against the table total
                              column limit.

                    Row Size Limits
                        The maximum row size for a given table is determined by several factors:
                            - The internal representation of a MySQL table has a maximum row size limit of 65,535 bytes, even if the
                              storage engine is capable of supporting larger rows. BLOB and TEXT columns only contribute 9 to 12
                              bytes toward the row size limit because their contents are stored separately from the rest of the row.

                            - The maximum row size for an InnoDB table, which applies to data stored locally within a database page,
                              is slightly less than half a page for 4KB, 8KB, 16KB, and 32KB innodb_page_size settings. For example,
                              the maximum row size is slightly less than 8KB for the default 16KB InnoDB page size. For 64KB pages,
                              the maximum row size is slightly less than 16KB. See Section 14.23, “InnoDB Limits”.

                            - If a row containing variable-length columns exceeds the InnoDB maximum row size, InnoDB selects
                              variable-length columns for external off-page storage until the row fits within the InnoDB row size
                              limit. The amount of data stored locally for variable-length columns that are stored off-page differs
                              by row format. For more information, see Section 14.11, “InnoDB Row Formats”.

                            - Different storage formats use different amounts of page header and trailer data, which affects the
                              amount of storage available for rows.
                                ~ For information about InnoDB row formats, see Section 14.11, “InnoDB Row Formats”.
                                ~ For information about MyISAM storage formats, see Section 15.2.3, “MyISAM Table Storage Formats”.

                    WINDOWS_FAT32
                        - MAX # DISK INDEXED ITEMS PER FOLDER = 65420;                      // 2^16 - 1 (65,535) files in a single folder
                        - MAX # DISK INDEXED ITEMS PER SYSTEM = 268100000;                  // Maximum number of files: 268,173,300
                        - MAX FILE SIZE = 2147414464;  // [(int)MAX-128 KiB]                 // 2 GiB (2,147,480,000 bytes) - 1 without LFS, 4 GiB - 1 with https://en.wikipedia.org/wiki/Large-file_support
                        - MAX VOLUME SIZE = -1;     // [{DISK CAPACITY}]                    // 2TB of total space or all of disk space
                                                                                               that was available or whichever is less
                    WINDOWS_NTFS
                        - MAX # DISK INDEXED ITEMS PER FOLDER = 4294892295; // 4294967295-75000     // 4,294,967,295 files into a single folder
                        - MAX # DISK INDEXED ITEMS PER SYSTEM = -1;                                 // as long as you do not exceed 256 terabytes
                                                                                                       (single file size and space) or all of
                                                                                                       disk space that was available whichever
                                                                                                       is less
                        - MAX FILE SIZE = 16 TiB - 128 KiB;                                  // WHERE OTHERS HAVE STOPPED, 2^44 - 2^6 bytes (16 TiB - 64 KiB).
                                                                                               BUT...IN THEORY, 2^64 - 2^6 bytes (16 EiB - 64 KiB)
                        - MAX VOLUME SIZE = 256 TiB(OR DISK); // [256 TiB-128 KiB]           // WHERE OTHERS HAVE STOPPED, 2^32 - 1 clusters (256 TiB - 64 KiB).
                                                                                               BUT...IN THEORY, 2^64 - 1 clusters (1 YiB - 64 KiB)
                    LINUX_EXT2
                        - MAX # DISK INDEXED ITEMS PER FOLDER = 10000;                      // Maximum number of files
                                                                                               per directory: ~1.3 × 10^20 (performance
                                                                                               issues past 10,000)
                        - MAX # DISK INDEXED ITEMS PER SYSTEM = 2147483647;                 // ASSUMING 32x.
                        - MAX FILE SIZE = [XX GiB-128 KiB]                                   // 16 GiB (block size of 1 KiB), 256 GiB
                                                                                               (block size of 2 KiB), 2 TiB (block size
                                                                                               of 4 KiB), 2 TiB (block size of 8 KiB)
                        - MAX VOLUME SIZE = NULL; // [{DISK CAPACITY}]                      // 4 TiB (block size of 1 KiB), 8 TiB (block
                                                                                               size of 2 KiB), 16 TiB (block size of
                                                                                               4 KiB), 32 TiB (block size of 8 KiB)
                    LINUX_EXT3
                        - MAX # DISK INDEXED ITEMS PER FOLDER = {MATHS};                    // Maximum number of files: min(volumeSize / 2^13, numberOfBlocks)
                            = 99999999999930000;    // WE CAN DEFAULT TO THIS [64x] 10^18 (100,000,000,000,000,000)
                            = 2147483647;           // [32x]
                        - MAX FILE SIZE = [XX GiB-128 KiB]                                   // 16 GiB (block size of 1 KiB), 256 GiB
                                                                                               (block size of 2 KiB), 2 TiB (block size
                                                                                               of 4 KiB), 2 TiB (block size of 8 KiB)
                        - MAX VOLUME SIZE = [XX TiB-128 KiB]; // [{DISK CAPACITY}]           // 4 TiB (block size of 1 KiB), 8 TiB (block
                                                                                               size of 2 KiB), 16 TiB (block size of
                                                                                               4 KiB), 32 TiB (block size of 8 KiB)
                    LINUX_EXT4
                        - MAX # DISK INDEXED ITEMS PER FOLDER = 10000000;                   // 10 million is approximately WHERE OTHERS
                                                                                               HAVE STOPPED, which can be extended with
                                                                                               large_dir feature
                        - MAX # DISK INDEXED ITEMS PER SYSTEM = 4294900000;                 // Maximum number of files: 2^32 - 1 (4,294,967,295)
                        - MAX FILE SIZE = 17592199997952;   // [16 TiB-128 KiB];             // Maximum file size: 2^44 - 1 bytes (16 TiB - 1 bytes)
                        - MAX VOLUME SIZE = 281474999934464; // [281475000000000-128 KiB];   // Maximum volume size: 2^48 - 1 bytes (256 TiB - 1 bytes)

                    https://answers.microsoft.com/en-us/windows/forum/all/how-many-files-can-a-folder-hold/25368d4b-83e3-47b3-b7a3-a0fb8c7286a7#:~:text=You%20can%20put%204%2C294%2C967%2C295%20files,was%20available%20whichever%20is%20less.
                    Hi Corny99, I am Rob, an independent and a 10 time and dual award MVP specializing in Windows troubleshooting
                    and Bluescreen analysis. Please remember as independents we are not responsible for the development of Windows
                    or the computer hardware and drivers.

                    You can put 4,294,967,295 files into a single folder if drive is formatted with NTFS (would be unusual if it
                    were not) as long as you do not exceed 256 terabytes (single file size and space) or all of disk space that was
                    available whichever is less.

                    For older FAT32 drives the limits are 65,534 files in a single folder and max file size of 4 Gigabytes and 2TB
                    of total space or all of disk space that was available or whichever is less.

                    Please let us know the results and if you need further assistance.

                    Rob Brown - past Microsoft MVP - Windows Insider MVP 2016 - 2021
                    Microsoft MVP Windows and Devices for IT 2009 - 2020

                        https://www.google.com/search?q=windows+system+directory+maximum+files&newwindow=1&sca_esv=567866750&sxsrf=AM9HkKlJae_J7JNyo-LMj3zl1gyfeWxQuw%3A1695622680062&ei=GCYRZdWzA_6awbkP5_mVuAM&ved=0ahUKEwjVn5LcjsWBAxV-TTABHed8BTcQ4dUDCBA&uact=5&oq=windows+system+directory+maximum+files&gs_lp=Egxnd3Mtd2l6LXNlcnAiJndpbmRvd3Mgc3lzdGVtIGRpcmVjdG9yeSBtYXhpbXVtIGZpbGVzMgUQIRigATIFECEYoAEyBRAhGKABMggQIRgWGB4YHUip8QFQ2wdY694BcBF4AZABAJgBjQGgAY4uqgEFMTguMzi4AQPIAQD4AQHCAgoQABhHGNYEGLADwgIEECMYJ8ICCBAAGIoFGJECwgILEAAYgAQYsQMYgwHCAhcQLhiABBixAxiDARjHARjRAxioAxjSA8ICERAuGIAEGLEDGIMBGKgDGJkDwgIIEAAYgAQYsQPCAgcQABiKBRhDwgIOEAAYgAQYsQMYgwEYyQPCAggQABiKBRiSA8ICFxAuGIAEGLEDGIMBGMcBGNEDGNIDGKgDwgINEAAYigUYsQMYgwEYQ8ICChAAGIoFGLEDGEPCAhQQLhiABBixAxjHARjRAxioAxjSA8ICCBAAGIAEGMkDwgIOEAAYigUYsQMYgwEYkQLCAgUQABiABMICBxAAGIAEGArCAgYQABgWGB7CAggQABiKBRiGA8ICBRAAGKIEwgIHECMYsAIYJ8ICExAuGA0YgAQYxwEYrwEYpgMYqAPCAgcQABgNGIAEwgITEC4YDRiABBjHARivARioAximA8ICERAuGIAEGMcBGK8BGKYDGKgDwgIKEAAYgAQYFBiHAsICERAuGIAEGMcBGK8BGKgDGKYDwgIIEAAYFhgeGA_CAggQABgIGB4YDcICBhAAGAgYHsICCBAAGIkFGKIE4gMEGAAgQYgGAZAGCA&sclient=gws-wiz-serp
                        https://www.urtech.ca/2013/02/solved-what-is-the-maximum-number-of-files-in-a-windows-folder/
                        Assuming you are asking about NTFS formatted Windows Disk the answers are below:
                        Maximum disk size: 256 terabytes
                        Maximum file size: 256 terabytes
                        Maximum number of files on disk: 4,294,967,295
                        Maximum number of files in a single folder: 4,294,967,295

                    https://www.google.com/search?q=linux+system+directory+maximum+files&newwindow=1&sca_esv=568110489&sxsrf=AM9HkKl-KHChclEVC86Ff0hB53C14yoVbw%3A1695622545166&ei=kSURZbPaCeuqqtsP9rmF0Ag&ved=0ahUKEwjz5uibjsWBAxVrlWoFHfZcAYoQ4dUDCBA&uact=5&oq=linux+system+directory+maximum+files&gs_lp=Egxnd3Mtd2l6LXNlcnAiJGxpbnV4IHN5c3RlbSBkaXJlY3RvcnkgbWF4aW11bSBmaWxlczIIEAAYiQUYogQyBRAAGKIESOwsUIQLWNApcAN4AZABAJgBdaABlQaqAQM0LjS4AQPIAQD4AQL4AQHCAgoQABhHGNYEGLADwgIEECMYJ-IDBBgAIEGIBgGQBgg&sclient=gws-wiz-serp
                    https://stackoverflow.com/a/466596
                    Maximum number of files: 2^32 - 1 (4,294,967,295)
                    Maximum number of files per directory: 10 million approximately, which can be extended with large_dir feature
                    Maximum file size: 2^44 - 1 bytes (16 TiB - 1 bytes)
                    Maximum volume size: 2^48 - 1 bytes (256 TiB - 1 bytes)
                    Jan 21, 2009

                    https://www.google.com/search?q=php+max+integer&oq=php+max+integer&aqs=chrome..69i57j0i512j0i15i22i30j0i22i30l7.8126j0j7&sourceid=chrome&ie=UTF-8
                    https://www.w3schools.com/php/php_numbers.asp
                    PHP Integers
                    2, 256, -256, 10358, -179567 are all integers.

                    An integer is a number without any decimal part.

                    An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and
                    between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this,
                    will be stored as float, because it exceeds the limit of an integer.

                    Note: Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one
                    of the operands is a float (2.5).

                    Here are some rules for integers:
                        An integer must have at least one digit
                        An integer must NOT have a decimal point
                        An integer can be either positive or negative

                    Integers can be specified in three formats:
                        decimal (10-based),
                        hexadecimal (16-based - prefixed with 0x) or
                        octal (8-based - prefixed with 0)

                    PHP has the following predefined constants for integers:
                        PHP_INT_MAX - The largest integer supported
                        PHP_INT_MIN - The smallest integer supported
                        PHP_INT_SIZE - The size of an integer in bytes

                    PHP has the following functions to check if the type of a variable is integer:
                        is_int()
                        is_integer() - alias of is_int()
                        is_long() - alias of is_int()

                    */

                    if(isset($os_bit_size)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('os_bit_size', $os_bit_size, 'os_bit_size_override', 'CRNRSTN::RESOURCE::INTEGER_LENGTH', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = DISK VOLUME (FREE SPACE) RESTRICTED FILE SIZE.
                    if(isset($max_write_file_size)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('bytes', $max_write_file_size, 'max_write_file_size_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = NO RESERVE FOR META HEADER BURN UPDATES (E.G.NEW FILE FORMAT) THAT
                    // MAY RESULT FROM FUTURE CRNRSTN :: ARCHITECTURAL DEVELOPMENT.
                    if(isset($crnrstn_file_bytes_reserve)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('bytes', $crnrstn_file_bytes_reserve, 'crnrstn_file_bytes_reserve_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = DISK VOLUME (FREE SPACE) RESTRICTED FILE SIZE.
                    if(isset($max_write_volume_size)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('bytes', $max_write_volume_size, 'max_write_volume_size_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = NO RESERVE FOR ADDITIONAL DATA (E.G. "BLOAT" RESULTING FROM NEW
                    // FILE FORMAT/STRUCTURE UPDATES DUE TO META ENRICHMENT) THAT MAY RESULT
                    // FROM FUTURE CRNRSTN :: ARCHITECTURAL DEVELOPMENT.
                    if(isset($crnrstn_volume_bytes_reserve)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('bytes', $crnrstn_volume_bytes_reserve, 'crnrstn_volume_bytes_reserve_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                }

            }else{

                //
                // IF *ANY* SYSTEM OVERRIDE IS PROVIDED, BUT NO
                // ENVIRONMENT COULD BE SELECTED TO RECEIVE THE
                // OVERRIDE FOR THAT SETTING.
                if(isset($os_bit_size) || isset($max_write_file_size) || isset($crnrstn_file_bytes_reserve) || isset($max_write_volume_size) || isset($crnrstn_volume_bytes_reserve)){

                    $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$os_bit_size', '$max_write_file_size', '$crnrstn_file_bytes_reserve', '$max_write_volume_size', '$crnrstn_volume_bytes_reserve');
                    $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('HAS_DATA_NOT_APPLIED', $tmp_stripe_key_ARRAY, $os_bit_size, $max_write_file_size, $crnrstn_file_bytes_reserve, $max_write_volume_size, $crnrstn_volume_bytes_reserve);

                    $tmp_param_data_str = $tmp_param_err_str_ARRAY['string'];
                    $tmp_param_data_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

                    if(count($tmp_param_data_ARRAY) > 0){

                        $this->error_log('CRNRSTN :: could not configure overrides for regulation of its use of volume resources due to environmental detection issues. ' . $tmp_param_data_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    }

                    $this->terminate_configuration_error_ARRAY['FAILED_ENVIRONMENTAL_DETECTION'] = 'CRNRSTN :: could not configure overrides for regulation of its use of volume resources due to environmental detection issues. ' . $tmp_param_data_str;
                    $this->auth_data_input('config_detection_error_help');

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    public function config_disk_max_item_count_overrides($env_key = CRNRSTN_RESOURCE_ALL, $max_count_folder_items = NULL, $crnrstn_folder_items_reserve = NULL, $max_count_volume_items = NULL, $crnrstn_volume_items_reserve = NULL, $crnrstn_max_length_filename = NULL, $crnrstn_max_length_filepath = NULL){

        try{

            //
            // A CATCH FOR THROWBACK (PRE-BITFLIP ERA) CONFIG DATA.
            if($env_key == '*'){

                $env_key = CRNRSTN_RESOURCE_ALL;

            }

            if($env_key == CRNRSTN_RESOURCE_ALL && isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                //
                // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
                $this->env_key($env_key);

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key, false) == true){

                if(isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                    //
                    // -1 = OPERATING SYSTEM RESTRICTED.
                    if(isset($max_count_folder_items)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('integer', $max_count_folder_items, 'max_count_folder_items_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = NO RESERVE FOR NEW FILES THAT MAY RESULT FROM
                    // FUTURE CRNRSTN :: ARCHITECTURAL DEVELOPMENT.
                    if(isset($crnrstn_folder_items_reserve)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('integer', $crnrstn_folder_items_reserve, 'crnrstn_folder_items_reserve_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = OPERATING SYSTEM RESTRICTED.
                    if(isset($max_count_volume_items)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('integer', $max_count_volume_items, 'max_count_volume_items_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = NO RESERVE FOR NEW FILES THAT MAY RESULT FROM
                    // FUTURE CRNRSTN :: ARCHITECTURAL DEVELOPMENT.
                    if(isset($crnrstn_volume_items_reserve)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('integer', $crnrstn_volume_items_reserve, 'crnrstn_volume_items_reserve_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = OPERATING SYSTEM RESTRICTED.
                    if(isset($crnrstn_max_length_filename)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('integer', $crnrstn_max_length_filename, 'crnrstn_max_length_filename_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = OPERATING SYSTEM RESTRICTED.
                    if(isset($crnrstn_max_length_filepath)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('integer', $crnrstn_max_length_filepath, 'crnrstn_max_length_filepath_override', 'CRNRSTN::RESOURCE::DISK_VOLUME_DIRECTORY_FILE', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                }

            }else{

                //
                // IF *ANY* SYSTEM OVERRIDE IS PROVIDED, BUT NO
                // ENVIRONMENT COULD BE SELECTED TO RECEIVE THE
                // OVERRIDE FOR THAT SETTING.
                if(isset($max_count_folder_items) || isset($crnrstn_folder_items_reserve) || isset($max_count_volume_items) || isset($crnrstn_volume_items_reserve) || isset($crnrstn_max_length_filename) || isset($crnrstn_max_length_filepath)){

                    $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$max_count_folder_items', '$crnrstn_folder_items_reserve', '$max_count_volume_items', '$crnrstn_volume_items_reserve', '$crnrstn_max_length_filename', '$crnrstn_max_length_filepath');
                    $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('HAS_DATA_NOT_APPLIED', $tmp_stripe_key_ARRAY, $max_count_folder_items, $crnrstn_folder_items_reserve, $max_count_volume_items, $crnrstn_volume_items_reserve, $crnrstn_max_length_filename, $crnrstn_max_length_filepath);

                    $tmp_param_data_str = $tmp_param_err_str_ARRAY['string'];
                    $tmp_param_data_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

                    if(count($tmp_param_data_ARRAY) > 0){

                        $this->error_log('CRNRSTN :: could not configure overrides for regulation of its use of file system resources due to environmental detection issues. ' . $tmp_param_data_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    }

                    $this->terminate_configuration_error_ARRAY['FAILED_ENVIRONMENTAL_DETECTION'] = 'CRNRSTN :: could not configure overrides for regulation of its use of file system resources due to environmental detection issues. ' . $tmp_param_data_str;
                    $this->auth_data_input('config_detection_error_help');

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    public function config_database_network_overrides($env_key = CRNRSTN_RESOURCE_ALL, $crnrstn_soap_services_enabled = NULL, $crnrstn_slow_queries_acceleration_enabled = NULL, $max_connections = NULL, $connection_keepalive = NULL, $connection_ttl = NULL){

        try{

            //
            // A CATCH FOR THROWBACK (PRE-BITFLIP ERA) CONFIG DATA.
            if($env_key == '*'){

                $env_key = CRNRSTN_RESOURCE_ALL;

            }

            if($env_key == CRNRSTN_RESOURCE_ALL && isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                //
                // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
                $this->env_key($env_key);

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key, false) == true){

                if(isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                    //
                    // CRNRSTN :: SOAP SERVICES LAYER IS ENABLED BY DEFAULT.
                    if(isset($crnrstn_soap_services_enabled)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('boolean', $crnrstn_soap_services_enabled, 'crnrstn_soap_services_enabled_override', 'CRNRSTN::RESOURCE::DATABASE_NETWORK', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // ENABLED BY DEFAULT.
                    if(isset($crnrstn_slow_queries_acceleration_enabled)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('boolean', $crnrstn_slow_queries_acceleration_enabled, 'crnrstn_slow_queries_acceleration_enabled_override', 'CRNRSTN::RESOURCE::DATABASE_NETWORK', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // THIS IS TO BE MANAGED BY THE APPLICATION
                    // AT A GLOBAL LEVEL.
                    if(isset($max_connections)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //              CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //              SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //              ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //              EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('integer', $max_connections, 'max_connections_override', 'CRNRSTN::RESOURCE::DATABASE_NETWORK', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    if(isset($connection_keepalive)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('boolean', $connection_keepalive, 'connection_keepalive_override', 'CRNRSTN::RESOURCE::DATABASE_NETWORK', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // SECONDS. -1 = NO EXPIRE.
                    if(isset($connection_ttl)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('integer', $connection_ttl, 'connection_ttl_override', 'CRNRSTN::RESOURCE::DATABASE_NETWORK', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                }

            }else{

                //
                // IF *ANY* SYSTEM OVERRIDE IS PROVIDED, BUT NO
                // ENVIRONMENT COULD BE SELECTED TO RECEIVE THE
                // OVERRIDE FOR THAT SETTING.
                if(isset($crnrstn_soap_services_enabled) || isset($crnrstn_slow_queries_acceleration_enabled) || isset($connection_keepalive) || isset($connection_ttl)){

                    $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$crnrstn_soap_services_enabled', '$crnrstn_slow_queries_acceleration_enabled', '$connection_keepalive', '$connection_ttl');
                    $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('HAS_DATA_NOT_APPLIED', $tmp_stripe_key_ARRAY, $crnrstn_soap_services_enabled, $crnrstn_slow_queries_acceleration_enabled, $connection_keepalive, $connection_ttl);

                    $tmp_param_data_str = $tmp_param_err_str_ARRAY['string'];
                    $tmp_param_data_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

                    if(count($tmp_param_data_ARRAY) > 0){

                        $this->error_log('CRNRSTN :: could not configure overrides for database networking performance due to environmental detection issues. ' . $tmp_param_data_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    }

                    $this->terminate_configuration_error_ARRAY['FAILED_ENVIRONMENTAL_DETECTION'] = 'CRNRSTN :: could not configure overrides for database networking performance due to environmental detection issues. ' . $tmp_param_data_str;
                    $this->auth_data_input('config_detection_error_help');

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    public function config_database_throughput_overrides($env_key = CRNRSTN_RESOURCE_ALL, $crnrstn_query_cache_enabled = NULL, $crnrstn_results_cache_enabled = NULL, $max_allowed_packet = NULL, $max_cache_packet_bytes = NULL, $cache_ttl_packet = NULL, $max_cache_results_bytes = NULL, $cache_ttl_results = NULL){

        try{

            //
            // A CATCH FOR THROWBACK (PRE-BITFLIP ERA) CONFIG DATA.
            if($env_key == '*'){

                $env_key = CRNRSTN_RESOURCE_ALL;

            }

            if($env_key == CRNRSTN_RESOURCE_ALL && isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                //
                // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
                $this->env_key($env_key);

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key, false) == true){

                if(isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                    //
                    // ENABLED BY DEFAULT.
                    if(isset($crnrstn_query_cache_enabled)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('boolean', $crnrstn_query_cache_enabled, 'crnrstn_query_cache_enabled_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    if(isset($crnrstn_results_cache_enabled)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('boolean', $crnrstn_results_cache_enabled, 'crnrstn_results_cache_enabled_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    if(isset($max_allowed_packet)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('bytes', $max_allowed_packet, 'max_allowed_packet_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    if(isset($max_cache_packet_bytes)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('bytes', $max_cache_packet_bytes, 'max_cache_packet_bytes_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // SECONDS. -1 = NO EXPIRE.
                    if(isset($cache_ttl_packet)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('integer', $cache_ttl_packet, 'cache_ttl_packet_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    if(isset($max_cache_results_bytes)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('bytes', $max_cache_results_bytes, 'max_cache_results_bytes_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // SECONDS. -1 = NO EXPIRE.
                    if(isset($cache_ttl_results)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('integer', $cache_ttl_results, 'cache_ttl_results_override', 'CRNRSTN::RESOURCE::DATABASE_THROUGHPUT', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                }

            }else{

                //
                // IF *ANY* SYSTEM OVERRIDE IS PROVIDED, BUT NO
                // ENVIRONMENT COULD BE SELECTED TO RECEIVE THE
                // OVERRIDE FOR THAT SETTING.
                if(isset($crnrstn_query_cache_enabled) || isset($crnrstn_results_cache_enabled) || isset($max_allowed_packet) || isset($max_cache_packet_bytes) || isset($cache_ttl_packet) || isset($max_cache_results_bytes) || isset($cache_ttl_results)){

                    $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$crnrstn_query_cache_enabled', '$crnrstn_results_cache_enabled', '$max_allowed_packet', '$max_cache_packet_bytes', '$cache_ttl_packet', '$max_cache_results_bytes', '$cache_ttl_results');
                    $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('HAS_DATA_NOT_APPLIED', $tmp_stripe_key_ARRAY, $crnrstn_query_cache_enabled, $crnrstn_results_cache_enabled, $max_allowed_packet, $max_cache_packet_bytes, $cache_ttl_packet, $max_cache_results_bytes, $cache_ttl_results);

                    $tmp_param_data_str = $tmp_param_err_str_ARRAY['string'];
                    $tmp_param_data_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

                    if(count($tmp_param_data_ARRAY) > 0){

                        $this->error_log('CRNRSTN :: could not configure overrides for database throughput and cache management due to environmental detection issues. ' . $tmp_param_data_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    }

                    $this->terminate_configuration_error_ARRAY['FAILED_ENVIRONMENTAL_DETECTION'] = 'CRNRSTN :: could not configure overrides for database throughput and cache management due to environmental detection issues. ' . $tmp_param_data_str;
                    $this->auth_data_input('config_detection_error_help');

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    public function config_database_shard_overrides($env_key = CRNRSTN_RESOURCE_ALL, $table_prefix = NULL, $max_table_record_count = NULL){

        try{

            /*
            https://stackoverflow.com/questions/30644671/mysql-universal-way-of-getting-approx-row-size-in-bytes

            mysql> SHOW TABLE STATUS WHERE name='ApiRequest'\G
            *************************** 1. row ***************************
                       Name: ApiRequest
                     Engine: InnoDB
                    Version: 10
                 Row_format: Compact
                       Rows: 105
             Avg_row_length: 1872
                Data_length: 196608
            Max_data_length: 0
               Index_length: 16384
                  Data_free: 2520776704
             Auto_increment: 114
                Create_time: 2015-05-29 13:00:13
                Update_time: NULL
                 Check_time: NULL
                  Collation: utf8_unicode_ci
                   Checksum: NULL
             Create_options:
                    Comment:
            1 row in set (0.00 sec)

            */

            //
            // A CATCH FOR THROWBACK (PRE-BITFLIP ERA) CONFIG DATA.
            if($env_key == '*'){

                $env_key = CRNRSTN_RESOURCE_ALL;

            }

            if($env_key == CRNRSTN_RESOURCE_ALL && isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                //
                // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
                $this->env_key($env_key);

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key, false) == true){

                if(isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                    if(isset($table_prefix)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('string', $table_prefix, 'table_prefix_override', 'CRNRSTN::RESOURCE::DATABASE_SHARD', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = NO MAX RECORD COUNT ON SYSTEM TABLES.
                    if(isset($max_table_record_count)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('integer', $max_table_record_count, 'max_table_record_count_override', 'CRNRSTN::RESOURCE::DATABASE_SHARD', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = NO EXPIRE. '1 MONTH', '1 YEAR', '5 WEEK', '100 SECOND' == (int) 100
                    // SEE DATABASE QUERY DATE SPAN HANDLES.
                    // TODO :: REMOVE THIS TODO WHEN INPUT VALIDATION IS SUPPORTED.
                    if(isset($shard_ttl)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('database_shard_sql_temporal_interval', $shard_ttl, 'shard_ttl_override', 'CRNRSTN::RESOURCE::DATABASE_SHARD', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                }

            }else{

                //
                // IF *ANY* SYSTEM OVERRIDE IS PROVIDED, BUT NO
                // ENVIRONMENT COULD BE SELECTED TO RECEIVE THE
                // OVERRIDE FOR THAT SETTING.
                if(isset($table_prefix) || isset($max_table_record_count) || isset($shard_ttl)){

                    $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$table_prefix', '$max_table_record_count', '$shard_ttl');
                    $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('HAS_DATA_NOT_APPLIED', $tmp_stripe_key_ARRAY, $table_prefix, $max_table_record_count, $shard_ttl);

                    $tmp_param_data_str = $tmp_param_err_str_ARRAY['string'];
                    $tmp_param_data_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

                    if(count($tmp_param_data_ARRAY) > 0){

                        $this->error_log('CRNRSTN :: could not configure overrides for database shard management due to environmental detection issues. ' . $tmp_param_data_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    }

                    $this->terminate_configuration_error_ARRAY['FAILED_ENVIRONMENTAL_DETECTION'] = 'CRNRSTN :: could not configure overrides for database shard management due to environmental detection issues. ' . $tmp_param_data_str;
                    $this->auth_data_input('config_detection_error_help');

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    //
    // CLASS :: wind_cloud_fire
    // AUTHOR :: Jonathan '5' Harris <jharris@eVifweb.com>
    // VERSION :: 1.0.0
    // DATE :: Nov 9, 2018 11:17AM
    // EZEKIEL 1:4 - AND I LOOKED, AND THERE CAME A STORM WIND FROM THE NORTH, A GREAT CLOUD AND A FIRE
    // FLASHING INCESSANTLY; AND THERE WAS A BRIGHTNESS AROUND IT, AND FROM THE MIDST OF IT
    // THERE WAS SOMETHING LIKE THE SIGHT OF ELECTRUM, FROM THE MIDST OF THE FIRE.
    //
    // CLASS :: fire_ftp_manager
    // AUTHOR :: Jonathan '5' Harris <jharris@evifweb.com>
    // VERSION :: 1.0.0
    // DATE :: November 10, 2018 @ 1718
    // Ezekiel 1:5a - AND FROM THE MIDST OF IT [FIRE] THERE CAME THE LIKENESS OF FOUR LIVING CREATURES.
    //
    // CLASS :: lightning_ftp_connection
    // AUTHOR :: Jonathan '5' Harris <jharris@evifweb.com>
    // VERSION :: 1.0.0
    // DATE :: November 10, 2018 @ 1730
    // Ezekiel 1:13b - AND THE FIRE WAS BRIGHT; AND OUT OF THE FIRE WENT FORTH LIGHTENING.
    public function config_electrum_overrides($env_key = CRNRSTN_RESOURCE_ALL, $max_bytes_throughput = NULL, $max_pid_threads = NULL, $max_conn_ftp = NULL, $ftp_conn_timeout = NULL, $max_cpu_load_percentage = NULL, $max_incoming_data_connections = NULL, $max_outgoing_data_connections = NULL, $ftp_graceful_degrade = NULL){

        try{

            //
            // CRNRSTN :: ELECTRUM OVERRIDES
            // Saturday, September 30, 2023 @ 1557 hrs.

            //
            // A CATCH FOR THROWBACK (PRE-BITFLIP ERA) CONFIG DATA.
            if($env_key == '*'){

                $env_key = CRNRSTN_RESOURCE_ALL;

            }

            if($env_key == CRNRSTN_RESOURCE_ALL && isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                //
                // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
                $this->env_key($env_key);

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key, false) == true){

                if(isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                    //
                    // -1 = CRNRSTN :: WIND CLOUD FIRE (ELECTRUM) IS AUTHORIZED TO
                    // USE ALL AVAILABLE BANDWIDTH IN SUPPORT OF DATA
                    // TRANSFER REQUESTS.
                    if(isset($max_bytes_throughput)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('electrum_bytes', $max_bytes_throughput, 'max_bytes_throughput_override', 'CRNRSTN::RESOURCE::ELECTRUM', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = UNLIMITED PROCESS IDS CAN BE SPOOLED UP
                    // BY CRNRSTN :: WIND CLOUD FIRE (ELECTRUM) IN
                    // SUPPORT OF DATA MOVEMENT OPERATIONS.
                    if(isset($max_pid_threads)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('electrum_integer', $max_pid_threads, 'max_pid_threads_override', 'CRNRSTN::RESOURCE::ELECTRUM', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = UNLIMITED CRNRSTN :: LIGHTENING FTP CONNECTIONS TO A SINGLE
                    // ENDPOINT CAN BE ATTEMPTED BY THE CRNRSTN :: FIRE FTP MANAGER OUT
                    // OF CRNRSTN :: WIND CLOUD FIRE (ELECTRUM)
                    if(isset($max_conn_ftp)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('electrum_integer', $max_conn_ftp, 'max_conn_ftp_override', 'CRNRSTN::RESOURCE::ELECTRUM', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = UNRESTRICTED PERFORMANCE.
                    if(isset($max_cpu_load_percentage)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('electrum_percentage', $max_cpu_load_percentage, 'max_cpu_load_percentage_override', 'CRNRSTN::RESOURCE::ELECTRUM', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = SYSTEM RESTRICTED MEMORY USE LIMITATIONS.
                    if(isset($max_memory_usage_bytes)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('electrum_bytes', $max_memory_usage_bytes, 'max_memory_usage_bytes_override', 'CRNRSTN::RESOURCE::ELECTRUM', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // SECONDS. -1 = SYSTEM RESTRICTED.
                    if(isset($ftp_conn_timeout)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('electrum_integer', $ftp_conn_timeout, 'ftp_conn_timeout_override', 'CRNRSTN::RESOURCE::ELECTRUM', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = UNLIMITED INCOMING (ELECTRUM) CONNECTIONS.
                    if(isset($max_incoming_data_connections)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('electrum_integer', $max_incoming_data_connections, 'max_incoming_data_connections_override', 'CRNRSTN::RESOURCE::ELECTRUM', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // -1 = UNLIMITED OUT GOING (ELECTRUM) CONNECTIONS.
                    if(isset($max_outgoing_data_connections)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('electrum_integer', $max_outgoing_data_connections, 'max_outgoing_data_connections_override', 'CRNRSTN::RESOURCE::ELECTRUM', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    if(isset($ftp_graceful_degrade)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('electrum_boolean', $ftp_graceful_degrade, 'ftp_graceful_degrade_override', 'CRNRSTN::RESOURCE::ELECTRUM', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                }

            }else{

                //
                // IF *ANY* SYSTEM OVERRIDE IS PROVIDED, BUT NO
                // ENVIRONMENT COULD BE SELECTED TO RECEIVE THE
                // OVERRIDE FOR THAT SETTING.
                if(isset($max_bytes_throughput) || isset($max_pid_threads) || isset($max_conn_ftp) || isset($max_cpu_load_percentage) || isset($max_memory_usage_bytes) || isset($ftp_conn_timeout) || isset($max_incoming_data_connections) || isset($max_outgoing_data_connections) || isset($ftp_graceful_degrade)){

                    $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$max_bytes_throughput', '$max_pid_threads', '$max_conn_ftp', '$max_cpu_load_percentage','$max_memory_usage_bytes', '$ftp_conn_timeout', '$max_incoming_data_connections', '$max_outgoing_data_connections', '$ftp_graceful_degrade');
                    $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('HAS_DATA_NOT_APPLIED', $tmp_stripe_key_ARRAY, $max_bytes_throughput, $max_pid_threads, $max_conn_ftp, $max_cpu_load_percentage, $max_memory_usage_bytes, $ftp_conn_timeout, $max_incoming_data_connections, $max_outgoing_data_connections, $ftp_graceful_degrade);

                    $tmp_param_data_str = $tmp_param_err_str_ARRAY['string'];
                    $tmp_param_data_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

                    if(count($tmp_param_data_ARRAY) > 0){

                        $this->error_log('CRNRSTN :: could not configure overrides for the performance of CRNRSTN :: ELECTRUM due to environmental detection issues. ' . $tmp_param_data_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    }

                    $this->terminate_configuration_error_ARRAY['FAILED_ENVIRONMENTAL_DETECTION'] = 'CRNRSTN :: could not configure overrides for the performance of CRNRSTN :: ELECTRUM due to environmental detection issues. ' . $tmp_param_data_str;
                    $this->auth_data_input('config_detection_error_help');

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    public function config_wethrbug_overrides($env_key = CRNRSTN_RESOURCE_ALL, $default_zipcode = NULL, $forecast_length = NULL, $default_units_celsius = NULL, $database_enabled = NULL){

        try{

            //
            // CRNRSTN :: WETHRBUG OVERRIDES
            // Tuesday, October 3, 2023 @ 1944 hrs.

            //
            // A CATCH FOR THROWBACK (PRE-BITFLIP ERA) CONFIG DATA.
            if($env_key == '*'){

                $env_key = CRNRSTN_RESOURCE_ALL;

            }

            if($env_key == CRNRSTN_RESOURCE_ALL && isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                //
                // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
                $this->env_key($env_key);

            }

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key, false) == true){

                if(isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                    //
                    // CRNRSTN :: WILL HONOR 5+4 DIGIT ZIP.
                    // THE NATIONAL WEATHER SERVICE WEB API BEHIND
                    // WETHRBUG ONLY TAKES 5 DIGITS.
                    if(isset($default_zipcode)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('wethrbug_zipcode', $default_zipcode, 'default_zipcode_override', 'CRNRSTN::RESOURCE::WETHRBUG', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    //
                    // DAYS.
                    if(isset($forecast_length)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('wethrbug_integer', $forecast_length, 'forecast_length_override', 'CRNRSTN::RESOURCE::WETHRBUG', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    if(isset($default_units_celsius)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('wethrbug_boolean', $default_units_celsius, 'default_units_celsius_override', 'CRNRSTN::RESOURCE::WETHRBUG', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                    if(isset($database_enabled)){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_result = $this->config_ugc_input_clean_data('wethrbug_boolean', $database_enabled, 'database_enabled_override', 'CRNRSTN::RESOURCE::WETHRBUG', 0))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                    }

                }

            }else{

                //
                // IF *ANY* SYSTEM OVERRIDE IS PROVIDED, BUT NO
                // ENVIRONMENT COULD BE SELECTED TO RECEIVE THE
                // OVERRIDE FOR THAT SETTING.
                if(isset($default_zipcode) || isset($forecast_length) || isset($default_units_celsius) || isset($database_enabled)){

                    $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$default_zipcode', '$forecast_length', '$default_units_celsius', '$database_enabled');
                    $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('HAS_DATA_NOT_APPLIED', $tmp_stripe_key_ARRAY, $default_zipcode, $forecast_length, $default_units_celsius, $database_enabled);

                    $tmp_param_data_str = $tmp_param_err_str_ARRAY['string'];
                    $tmp_param_data_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

                    if(count($tmp_param_data_ARRAY) > 0){

                        $this->error_log('CRNRSTN :: could not configure overrides for the performance of CRNRSTN :: ELECTRUM due to environmental detection issues. ' . $tmp_param_data_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    }

                    $this->terminate_configuration_error_ARRAY['FAILED_ENVIRONMENTAL_DETECTION'] = 'CRNRSTN :: could not configure overrides for the performance of CRNRSTN :: ELECTRUM due to environmental detection issues. ' . $tmp_param_data_str;
                    $this->auth_data_input('config_detection_error_help');

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    public function config_add_resource($env_key, $data_key, $data_value = NULL, $data_type_family = 'CRNRSTN::RESOURCE', $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME, $index = NULL, $ttl = 60){

        try{

            $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$env_key', '$data_key');
            $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('MISSING_STRING_DATA', $tmp_stripe_key_ARRAY, $env_key, $data_key);

            $tmp_param_missing_str = $tmp_param_err_str_ARRAY['string'];
            $tmp_param_missing_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

            if(count($tmp_param_missing_ARRAY) > 0){

                $this->error_log('Attempted ' . __METHOD__ . '(' . $data_key . ') but missing required parameters. ' . $tmp_param_missing_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                throw new Exception('CRNRSTN :: initialization ERROR :: define_env_resource was called but was missing parameter information and so was not able to be initialized. env_key and resourceKey are required. env_key[' . $env_key . '] resourceKey[' . $data_key . ']');

            }else{

                //
                // A CATCH FOR THROWBACK (PRE-BITFLIP ERA) CONFIG DATA.
                if($env_key == '*'){

                    $env_key = CRNRSTN_RESOURCE_ALL;

                }

                if($env_key == CRNRSTN_RESOURCE_ALL && isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                    //
                    // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
                    $this->env_key($env_key);

                }

                //
                // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
                // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
                // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
                // PERFORMANCE ACCELERATION BOOST.
                if($this->config_is_valid_detected_env($env_key, false) == true){

                    if(!isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                        $this->terminate_configuration_error_ARRAY['FAILED_ENVIRONMENTAL_DETECTION'] = 'CRNRSTN :: could not add resource, ' . print_r($data_key, true) . '. Unable to detect running environment.';

                    }

                    $this->auth_data_input('config_detection_error_help');

                    if(isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                        //
                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                        //
                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                        //
                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                        // - $oCRNRSTN->err_message_queue_push(),
                        // - $oCRNRSTN->err_message_queue_retrieve(),
                        // - $oCRNRSTN->err_message_queue_clear(), AND
                        // - $oCRNRSTN->get_err_message_count().
                        //
                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                        //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                        //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                        //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                        //		        EXPIRATION TTL.
                        //
                        //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                        if(!($tmp_output = $this->config_ugc_input_clean_data(__FUNCTION__ . '_mixed', $data_value, $data_key, $data_type_family, $index, $data_authorization_profile, $env_key, $ttl))){

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            throw new Exception($this->err_message_queue_retrieve());

                        }

                        //
                        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                        //$tmp_output = $this->input_data_value($data_value, $data_key, $data_type_family, $index, $data_authorization_profile, $ttl, $spool_resource, $env_key);

                        return $tmp_output;

                    }

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    public function add_resource($data_key, $data_value = NULL, $data_type_family = 'CRNRSTN::RESOURCE', $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME, $index = NULL, $ttl = 60, $spool_resource = false, $env_key = NULL){

        try{

            //error_log(__LINE__ . ' crnrstn add_resource $data_key[' . $data_key . '].');

            if(!isset($env_key)){

                $env_key = $this->return_env_key();

            }

            $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$env_key', '$data_key');
            $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('MISSING_STRING_DATA', $tmp_stripe_key_ARRAY, $env_key, $data_key);

            $tmp_param_missing_str = $tmp_param_err_str_ARRAY['string'];
            $tmp_param_missing_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

            if(count($tmp_param_missing_ARRAY) > 0){

                $this->error_log('Attempted ' . __METHOD__ . '(' . $data_key . ') but missing required parameters. ' . $tmp_param_missing_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                throw new Exception('CRNRSTN :: initialization ERROR :: define_env_resource was called but was missing parameter information and so was not able to be initialized. env_key and resourceKey are required. env_key[' . $env_key . '] resourceKey[' . $data_key . ']');

            }else{

                //
                // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
                // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
                // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
                // PERFORMANCE ACCELERATION BOOST.
                if($this->config_is_valid_detected_env($env_key, false) == true){

                    if(!isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                        error_log(__LINE__ . ' crnrstn FAILED_ENVIRONMENTAL_DETECTION.');
                        $this->terminate_configuration_error_ARRAY['FAILED_ENVIRONMENTAL_DETECTION'] = 'CRNRSTN :: could not add resource, ' . print_r($data_key, true) . '. Unable to detect running environment.';

                    }

                    $this->auth_data_input('config_detection_error_help');

                    if(isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){

                        //
                        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                        return $this->input_data_value($data_value, $data_key, $data_type_family, $index, $data_authorization_profile, $ttl, $spool_resource, self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]]);

                    }

                }

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

        return true;

    }

    public function is_system_terminate_enabled(){

        foreach(self::$system_termination_flag_ARRAY as $key => $val){

            if($val == 1){

                return true;

            }

        }

        return false;

    }

    public function output_ssdtla_data_object($type){

        switch($type){
            case 'theme_profile_data':

                $tmp_str = '';
                $tmp_cnt = 0;
                $tmp_min_mode_active = $this->is_bit_set(CRNRSTN_JS_CSS_PROD_MIN);

                //
                // FOR ARRAY DATA AND STRUCTURE, SEE:
                // ./_crnrstn/_config/_config.defaults/_crnrstn.themes.inc.php
                foreach($this->theme_attributes_ARRAY as $theme_constant => $theme_const_ARRAY){

                    foreach($theme_const_ARRAY as $param_name => $param_value){

                        $tmp_value = $param_value;

                        if(is_array($param_value)){

                            $tmp_value = $param_value[0];

                        }

                        if($tmp_min_mode_active == true){

                            $tmp_str .= '<theme_profile_attribute><theme_position>' . $tmp_cnt . '</theme_position><theme_nom is_active="' . $theme_const_ARRAY['IS_ACTIVE'] . '" display_position="' . $theme_const_ARRAY['DISPLAY_POSITION'] . '" const_str="' . $theme_const_ARRAY['NOM_STRING'] . '">' . $theme_const_ARRAY['NOM_STRING'] . '</theme_nom><theme_integer>' . $theme_constant . '</theme_integer><attribute_name><![CDATA[' . $param_name . ']]></attribute_name><attribute_value><![CDATA[' . $tmp_value . ']]></attribute_value><description><![CDATA[' . $theme_const_ARRAY['DESCRIPTION'] . ']]></description></theme_profile_attribute>';

                        }else{

                            //
                            // DON'T FORGET TO REPLICATE ANY UPDATES TO THE ABOVE.
                            // IF I GET BURNED BY THIS AGAIN, WE CAN IMPLEMENT A (DEV MODE ONLY)
                            // STRING COMPARISON CHECK TO APPLY TO ALL OF THESE DEV/MIN VERSIONS
                            $tmp_str .= '<theme_profile_attribute>
                    <theme_position>' . $tmp_cnt . '</theme_position>
                    <theme_nom is_active="' . $theme_const_ARRAY['IS_ACTIVE'] . '" display_position="' . $theme_const_ARRAY['DISPLAY_POSITION'] . '" const_str="' . $theme_const_ARRAY['NOM_STRING'] . '">' . $theme_const_ARRAY['TITLE'] . '</theme_nom>
                    <theme_integer>' . $theme_constant . '</theme_integer>
                    <attribute_name><![CDATA[' . $param_name . ']]></attribute_name>
                    <attribute_value><![CDATA[' . $tmp_value . ']]></attribute_value>
                    <description><![CDATA[' . $theme_const_ARRAY['DESCRIPTION'] . ']]></description>
                </theme_profile_attribute>
                ';

                        }

                        //$this->print_r($val, NULL, NULL, __LINE__, __METHOD__, __FILE__);
                        //die();

                    }

                    $tmp_cnt++;

                }

                return $tmp_str;

            break;

        }

        return true;

    }

    public function system_terminate($interstitial_mode = 'config_enter_config_serial_help'){

        $tmp_html_str_ARRAY = array();

        //
        // INITIALIZE SYSTEM DEFAULTS
        if(!isset($this->theme_attributes_ARRAY[CRNRSTN_UI_DARKNIGHT])){

            $this->config_load_defaults_terminal(CRNRSTN_RESOURCE_ALL, CRNRSTN_ROOT . '/_crnrstn/_config/_config.defaults/_crnrstn.load.inc.php');

        }

        if(!isset(self::$system_termination_flag_ARRAY[$interstitial_mode])){

            error_log(__LINE__ . ' crnrstn $interstitial_mode[' . $interstitial_mode . ']. terminate_configuration_error_ARRAY[' . print_r($this->terminate_configuration_error_ARRAY, true) . '].');

            self::$system_termination_flag_ARRAY[$interstitial_mode] = 1;

            if(isset($this->terminate_configuration_error_ARRAY)){

                foreach($this->terminate_configuration_error_ARRAY as $key => $msg){

                    switch($key){
                        case 'EMPTY_CONFIG_SERIAL':

                            $interstitial_mode = 'config_enter_config_serial_help';

                            //
                            // $CRNRSTN_config_salt = '[n2X0@F2=?C8[-8ij5X6k*4k8XT}uuDQ{ZHkCr*KK5!sT%Z~cdGylAx(8WVYPb@N';
                            $tmp_serial = $this->salt(NULL, -2);
                            $tmp_str_in = '$CRNRSTN_config_salt = \'' . $tmp_serial . '\';';

                            $tmp_html_str_ARRAY[] = $this->print_r_str($tmp_str_in, NULL, CRNRSTN_UI_RANDOM, __LINE__, __METHOD__, __FILE__);
                            $theme_profile = $this->random_theme_constant;

                            $this->error_log('Please specify a configuration serial (such as [$CRNRSTN_config_salt=\'' . $tmp_serial . '\']) in the CRNRSTN :: config file. For reference, please see: [lnum 142].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
                            //error_log('Please specify a configuration serial (such as [$CRNRSTN_config_salt=\'' . $tmp_serial . '\']) in the CRNRSTN :: config file. For reference, please see: [lnum 142].');

                        break 2;
                        case 'FAILED_ENVIRONMENTAL_DETECTION':

                            $interstitial_mode = 'config_detection_error_help';

                            $tmp_str_in = '$oCRNRSTN->config_add_environment(\'APACHE_WOLF_PUP\', E_ALL & ~E_NOTICE & ~E_STRICT);
$oCRNRSTN->config_detect_environment(\'APACHE_WOLF_PUP\', \'SERVER_NAME\', \'' . $_SERVER['SERVER_NAME'] . '\');';

                            $tmp_html_str_ARRAY[] = $this->print_r_str($tmp_str_in, NULL, CRNRSTN_UI_RANDOM, __LINE__, __METHOD__, __FILE__);
                            $theme_profile = $this->random_theme_constant;

                            $this->error_log('To enable server detection, please configure CRNRSTN :: for this environment within the configuration file. For reference, please see: [lnum 244] in the CRNRSTN :: config file.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
                            //error_log('To enable server detection, please configure CRNRSTN :: for this environment within the configuration file. For reference, please see: [lnum 244] in the CRNRSTN :: config file.');

                        break 2;

                    }

                }

            }

            $INTERSTITIAL_PAGE_HTML_OUTPUT = $this->return_interstitial_page_html($interstitial_mode, $tmp_html_str_ARRAY, $theme_profile);
            if(strlen($INTERSTITIAL_PAGE_HTML_OUTPUT) > 0){

                echo $INTERSTITIAL_PAGE_HTML_OUTPUT;

                if(ob_get_level() > 0){ob_flush();}
                flush();
                exit();

            }

            //
            // THROW APPLICATION ERROR.
            $this->return_server_response_code(503, $this->return_CRNRSTN_ASCII_ART());

        }

    }

    private function return_interstitial_page_html($interstitial_mode, $html_str_ARRAY = NULL, $theme_profile = CRNRSTN_UI_DARKNIGHT){

        $tmp_str_out = '';

        //
        // LOAD INTERSTITIAL HTML PAGE STRING CONTENT.
        switch($interstitial_mode){
            case 'config_enter_config_serial_help':

                $this->initialize_asset_management();

                include_once(CRNRSTN_ROOT . '/_crnrstn/ui/docs/interstitials/_config_config_enter_configuration_serial_help.php');

            break;
            case 'config_detection_error_help':

                $this->initialize_asset_management();

                include_once(CRNRSTN_ROOT . '/_crnrstn/ui/docs/interstitials/_config_config_detection_error_help.php');

            break;

        }

        return $tmp_str_out;

    }

    public function isset_encryption($encryption_channel){

        return $this->is_bit_set($encryption_channel);

    }

    public function data_encrypt($data = NULL, $encryption_channel = CRNRSTN_ENCRYPT_TUNNEL, $cipher_override = NULL, $secret_key_override = NULL, $hmac_algorithm_override = NULL, $options_bitwise_override = NULL){

        if(isset(self::$encryptable_data_types_ARRAY[gettype($data)])){

            $this->total_bytes_encrypted += strlen((string) $data);

        }

        return $this->oCRNRSTN_ENV->data_encrypt($data, $encryption_channel, $cipher_override, $secret_key_override, $hmac_algorithm_override, $options_bitwise_override);

    }

    public function data_decrypt($data = NULL, $encryption_channel = CRNRSTN_ENCRYPT_TUNNEL, $cipher_override = NULL, $secret_key_override = NULL, $hmac_algorithm_override = NULL, $options_bitwise_override = NULL){

        $tmp_data_decrypted = $this->oCRNRSTN_ENV->data_decrypt($data, $encryption_channel, $cipher_override, $secret_key_override, $hmac_algorithm_override, $options_bitwise_override);

        if(isset(self::$encryptable_data_types_ARRAY[gettype($tmp_data_decrypted)])){

            $this->total_bytes_decrypted += strlen((string) $tmp_data_decrypted);

        }

        return $tmp_data_decrypted;

    }

    public function multi_lang_content_return($data_key){

        return $this->oCRNRSTN_LANG_MGR->multi_lang_content_return($data_key);

    }

//    public function get_lang_copy($data_key){
//
//        return $this->oCRNRSTN_ENV->get_lang_copy($data_key);
//
//    }

    public function get_resource_wp($data_key, $index = 0, $data_type_family = 'CRNRSTN::WP::INTEGRATIONS', $soap_tunnel = false){

        return $this->oMYSQLI_CONN_MGR->get_resource_wp($data_key, $index, $data_type_family, $soap_tunnel);

    }

    public function get_resource_submitted($input_field_name, $http_transport_protocol = 'POST'){

        if(is_array($http_transport_protocol)){

            return '';

        }

        $http_channel_upper = strtoupper($http_transport_protocol);

        if($http_transport_protocol != 'POST'){

            $http_transport_protocol = $this->str_sanitize($http_channel_upper, 'http_protocol_simple');

            if($http_transport_protocol != 'GET' && $http_transport_protocol != 'POST'){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception('CRNRSTN :: Form handling configuration error :: unable to detect transport_protocol[POST/GET] from the provided value of ' . $http_transport_protocol . '.');

            }

        }

    }

    //
    // CRNRSTN :: INTERNAL PAGE RETURN
    public function ui_module_out($module, $module_permissions_profile = CRNRSTN_AUTHORIZE_RUNTIME){

        return $this->oCRNRSTN_USR->ui_module_out($module, $module_permissions_profile);

    }

    /**
     * Retrieve the User-Agent.
     *
     * @return string|null The user agent if it's set.
     */
    public function get_user_agent(){

        return $this->oCRNRSTN_ENV->get_user_agent();

    }

    /**
     * Retrieve the list of known phone devices.
     *
     * @return array List of phone devices.
     */
    public function get_mobile_devices(){

        return $this->oCRNRSTN_ENV->get_mobile_devices();

    }

    /**
     * Retrieve the list of known tablet devices.
     *
     * @return array List of tablet devices.
     */
    public function get_tablet_devices(){

        return $this->oCRNRSTN_ENV->get_tablet_devices();

    }

    /**
     * Retrieve the list of known browsers. Specifically, the user agents.
     *
     * @return array List of browsers / user agents.
     */
    public function get_mobile_browsers(){

        return $this->oCRNRSTN_ENV->get_browsers();

    }

    /**
     * Retrieve the list of mobile operating systems.
     *
     * @return array The list of mobile operating systems.
     */
    public function get_mobile_os(){

        return $this->oCRNRSTN_ENV->get_mobile_os();

    }

    /**
     * Check if the device is mobile.
     * Returns true if any type of mobile device detected, including special ones
     *
     * @return bool
     */
    public function is_mobile($tablet_is_mobile = false, $magic_method = NULL){

        return $this->oCRNRSTN_ENV->oHTTP_MGR->is_mobile($tablet_is_mobile, $magic_method);

    }

    /**
     * Check if the device is a tablet.
     * Return true if any type of tablet device is detected.
     *
     * @return bool
     */
    public function is_tablet($mobile_is_tablet = false, $magic_method = NULL){

        return $this->oCRNRSTN_ENV->oHTTP_MGR->is_tablet($mobile_is_tablet, $magic_method);

    }

    public function set_desktop(){

        return $this->oCRNRSTN_ENV->oHTTP_MGR->set_desktop();

    }

    public function set_mobile($magic_method = NULL){

        return $this->oCRNRSTN_ENV->oHTTP_MGR->set_mobile($magic_method);

    }

    public function set_tablet($magic_method = NULL){

        return $this->oCRNRSTN_ENV->oHTTP_MGR->set_tablet($magic_method);

    }

    public function set_mobile_custom($magic_method = 'isMobile()'){

        return $this->oCRNRSTN_ENV->oHTTP_MGR->set_mobile_custom($magic_method);

    }

    public function add_cookie($name, $value = "", $expires_or_options = 0, $path = "", $domain = "", $secure = false, $httponly = false){

        return $this->oCRNRSTN_ENV->add_cookie($name, $value, $expires_or_options, $path, $domain, $secure, $httponly);

    }

    public function add_raw_cookie($name, $value = "", $expires_or_options = 0, $path = "", $domain = "", $secure = false, $httponly = false){

        return $this->oCRNRSTN_ENV->add_raw_cookie($name, $value, $expires_or_options, $path, $domain, $secure, $httponly);

    }

    public function delete_all_cookies($path = ""){

        return $this->oCRNRSTN_ENV->delete_all_cookies($path);

    }

    public function delete_cookie($name, $path = ""){

        return $this->oCRNRSTN_ENV->delete_cookie($name, $path);

    }

    public function get_cookie($name){

        return $this->oCRNRSTN_ENV->get_cookie($name);

    }

    public function spool_head_html_asset_array($resource_ARRAY, $asset_nom_hash){

        error_log(__LINE__ . ' crnrstn ' . __METHOD__ . ' $asset_nom_hash[' . $asset_nom_hash . ']. $resource_ARRAY[' . print_r($resource_ARRAY, true) . '].');
        die();

        $resource_ARRAY['footer_delay_crumb_path_hash'] = $asset_nom_hash;
        $this->system_head_html_asset_array_spool_ARRAY[] = $resource_ARRAY;

        return true;

    }

    public function system_output_head_html($resource_constant = NULL, $spool_for_output = false, $footer_html_output = false, $is_dev_mode = NULL){

        try{

            $tmp_head_html_output = '';
            $tmp_footer_acceleration_head_output = false;

            $env_key = NULL;

            //
            // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
            $this->env_key($env_key);

            if(!isset($is_dev_mode)){

                $is_dev_mode = false;
                if($this->is_bit_set(CRNRSTN_JS_CSS_PROD_MIN) == true){

                    $is_dev_mode = true;

                }

            }else{

                if(!is_bool($is_dev_mode)){

                    $is_dev_mode = $this->tidy_boolean($is_dev_mode);

                }

            }

            //
            // CHECK FOR SPOOL REQUEST...NO OUTPUT. NO FLAG.
            if(($spool_for_output == true) || ($footer_html_output == true)){

                if($footer_html_output == true){

                    //
                    // SPOOL FRAMEWORK RESOURCE AND ITS DEVELOPER MODE FOR <HTML> OUTPUT TO THE FOOTER.
                    // $resource_constant=CRNRSTN_CLIENT_SSDTLA_DEBUG IS 100% FOOTER OUTPUT APPEND.
                    // SEE, $oCRNRSTN->system_output_footer_html() FOR RESPONSE RETURN.
                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value($is_dev_mode, 'crnrstn_footer_resource_html_output_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                    //
                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                    //
                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                    //
                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                    // - $oCRNRSTN->err_message_queue_push(),
                    // - $oCRNRSTN->err_message_queue_retrieve(),
                    // - $oCRNRSTN->err_message_queue_clear(), AND
                    // - $oCRNRSTN->get_err_message_count().
                    //
                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                    //		        EXPIRATION TTL.
                    //
                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $is_dev_mode, 'crnrstn_footer_resource_html_output_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        throw new Exception($this->err_message_queue_retrieve());

                    }

                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value($resource_constant, 'crnrstn_footer_resource_html_output_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                    //
                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                    //
                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                    //
                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                    // - $oCRNRSTN->err_message_queue_push(),
                    // - $oCRNRSTN->err_message_queue_retrieve(),
                    // - $oCRNRSTN->err_message_queue_clear(), AND
                    // - $oCRNRSTN->get_err_message_count().
                    //
                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                    //		        EXPIRATION TTL.
                    //
                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $resource_constant, 'crnrstn_footer_resource_html_output_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        throw new Exception($this->err_message_queue_retrieve());

                    }

                    return true;

                }

                //
                // SPOOL HEAD <HTML> CONTENT FOR OUTPUT.
                if(isset($resource_constant)){

                    //
                    // SPOOL FRAMEWORK RESOURCE AND ITS DEVELOPER MODE FOR <HTML> OUTPUT TO THE HEAD.
                    // $resource_constant=CRNRSTN_CLIENT_SSDTLA_DEBUG IS 100% FOOTER OUTPUT APPEND.
                    // SEE, $oCRNRSTN->system_output_footer_html() FOR RESPONSE RETURN.
                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value($is_dev_mode, 'crnrstn_head_resource_html_output_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                    //
                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                    //
                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                    //
                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                    // - $oCRNRSTN->err_message_queue_push(),
                    // - $oCRNRSTN->err_message_queue_retrieve(),
                    // - $oCRNRSTN->err_message_queue_clear(), AND
                    // - $oCRNRSTN->get_err_message_count().
                    //
                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                    //		        EXPIRATION TTL.
                    //
                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $is_dev_mode, 'crnrstn_head_resource_html_output_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        throw new Exception($this->err_message_queue_retrieve());

                    }

                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value($resource_constant, 'crnrstn_head_resource_html_output_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                    //
                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                    //
                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                    //
                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                    // - $oCRNRSTN->err_message_queue_push(),
                    // - $oCRNRSTN->err_message_queue_retrieve(),
                    // - $oCRNRSTN->err_message_queue_clear(), AND
                    // - $oCRNRSTN->get_err_message_count().
                    //
                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                    //		        EXPIRATION TTL.
                    //
                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $resource_constant, 'crnrstn_head_resource_html_output_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        throw new Exception($this->err_message_queue_retrieve());

                    }

                    //error_log(__LINE__ .  ' crnrstn SPOOL $resource_constant[' . $this->return_int_const_profile($resource_constant, CRNRSTN_STRING) . '].');

                }

                return true;

            }

            //
            // IF A VALUE IS PROVIDED TO THIS METHOD CALL, SPOOL PROVIDED
            // RESOURCE FOR IMMEDIATE OUTPUT TO HEAD <HTML>.
            if(isset($resource_constant)){

                //
                // SPOOL FRAMEWORK RESOURCE AND ITS DEVELOPER MODE FOR <HTML> OUTPUT TO THE HEAD.
                // $resource_constant=CRNRSTN_CLIENT_SSDTLA_DEBUG IS 100% FOOTER OUTPUT APPEND.
                // SEE, $oCRNRSTN->system_output_footer_html() FOR RESPONSE RETURN.
                // self::$oCRNRSTN_CONFIG_MGR->input_data_value($is_dev_mode, 'crnrstn_head_resource_html_output_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $is_dev_mode, 'crnrstn_head_resource_html_output_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                // self::$oCRNRSTN_CONFIG_MGR->input_data_value($resource_constant, 'crnrstn_head_resource_html_output_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $resource_constant, 'crnrstn_head_resource_html_output_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                error_log(__LINE__ .  ' crnrstn SPOOL $resource_constant[' . $this->return_int_const_profile($resource_constant, CRNRSTN_STRING) . '].');

            }

            //
            // BEGIN ASSEMBLY OF HTML OUTPUT FOR CRNRSTN :: DOM INTEGRATIONS IN
            // THE HTML DOCUMENT HEAD.
            //
            // ASSEMBLE HTML <META> TAGS FOR OUTPUT TO HTML DOCUMENT HEAD.
            $tmp_head_html_output .= $this->return_html_meta();

            //
            // ASSEMBLE FRAMEWORK INTEGRATIONS FOR OUTPUT TO HTML DOCUMENT HEAD.
            $data_type_family = 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS';
            $tmp_head_spool_cnt = $this->get_resource_count('crnrstn_head_resource_html_output_spool', $data_type_family);
            $tmp_footer_spool_cnt = $this->get_resource_count('crnrstn_footer_resource_html_output_spool', $data_type_family);

            //error_log(__LINE__ . ' crnrstn SPOOL $tmp_head_spool_cnt[' . $tmp_head_spool_cnt . '].');
            //error_log(__LINE__ . ' crnrstn SPOOL $tmp_footer_spool_cnt[' . $tmp_footer_spool_cnt . '].');

            //
            // DELAY ASSEMBLY AND OUTPUT OF THE FOLLOWING FRAMEWORK RESOURCE HTML TO THE FOOTER.
            $tmp_resource_footer_append_spool_override_ARRAY = $this->get_resource('resource_footer_append_spool_override', 0, $data_type_family);

            //
            // PROMOTE ASSEMBLY AND OUTPUT OF THE FOLLOWING FRAMEWORK RESOURCE HTML TO THE DOM HEAD.
            $tmp_resource_head_append_spool_override_ARRAY = $this->get_resource('resource_head_append_spool_override', 0, $data_type_family);

            //
            // LOOP THROUGH ALL SPOOLED FOOTER RESOURCES FOR ANY FLAGGED RESOURCES THAT HAVE <HTML>
            // HEAD DEPENDENCIES FOR WHICH IT WOULD BE PREFERRED TO ASSEMBLE THE HTML HERE IN THE
            // DOM HEAD..BEFORE GETTING TO THE FOOTER HTML OUTPUT METHOD CALL...WHERE IT IS
            // GUARANTEED THAT THIS RESOURCE WILL HAVE TO FIRE AND LOAD IN THE FOOTER...ALONG WITH
            // ANY UNCALLED HEAD DEPENDENCIES. SPOOL ANY MATCHED RESOURCE DEPENDENCIES FOR
            // IMMEDIATE OUTPUT.

            //error_log(__LINE__ . ' crnrstn CHECKING INTO <HEAD> DEPENDENCIES $tmp_framework_resource[' . print_r($tmp_resource_head_append_spool_override_ARRAY, true) . '].');
            for($i = 0; $i < $tmp_footer_spool_cnt; $i++){

                $tmp_framework_resource = $this->get_resource('crnrstn_footer_resource_html_output_spool', $i, $data_type_family);
                //error_log(__LINE__ . ' crnrstn CHECKING INTO <HEAD> DEPENDENCIES $tmp_framework_resource[' . $this->return_int_const_profile($tmp_framework_resource, CRNRSTN_STRING) . '][' . $tmp_framework_resource . '].');

                if(isset($tmp_resource_head_append_spool_override_ARRAY[$tmp_framework_resource])){

                    //error_log(__LINE__ . ' crnrstn FOOTER HTML RESOURCE WITH <HEAD> OUTPUT. $tmp_framework_resource[' . $this->return_int_const_profile($tmp_framework_resource, CRNRSTN_STRING) . '].');

                    //
                    // FOOTER CONTENT AUTHORIZED TO BE ASSEMBLED FOR DOM HEAD <HTML> OUTPUT NOW.
                    if(!isset($this->html_head_build_flag_ARRAY[$tmp_framework_resource])){

                        switch($tmp_framework_resource){
//                            case CRNRSTN_CLIENT_SSDTLA_DEBUG:
//                                // ?
//                            break;
                            case CRNRSTN_RESOURCE_DOCUMENTATION:

                                //
                                // CRNRSTN :: CSS
                                if(!isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_DESKTOP])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_TABLET])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_MOBILE])){

                                    $tmp_footer_acceleration_head_output = true;
                                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value($is_dev_mode, 'crnrstn_head_resource_html_output_build_acceleration_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL NULL, false, $env_key);

                                    //
                                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                                    //
                                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                                    //
                                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                                    // - $oCRNRSTN->err_message_queue_push(),
                                    // - $oCRNRSTN->err_message_queue_retrieve(),
                                    // - $oCRNRSTN->err_message_queue_clear(), AND
                                    // - $oCRNRSTN->get_err_message_count().
                                    //
                                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                                    //		        EXPIRATION TTL.
                                    //
                                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $is_dev_mode, 'crnrstn_head_resource_html_output_build_acceleration_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                                        //
                                        // HOOOSTON...VE HAF PROBLEM!
                                        throw new Exception($this->err_message_queue_retrieve());

                                    }

                                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value($this->device_type_bit(), 'crnrstn_head_resource_html_output_build_acceleration_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                                    //
                                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                                    //
                                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                                    //
                                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                                    // - $oCRNRSTN->err_message_queue_push(),
                                    // - $oCRNRSTN->err_message_queue_retrieve(),
                                    // - $oCRNRSTN->err_message_queue_clear(), AND
                                    // - $oCRNRSTN->get_err_message_count().
                                    //
                                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                                    //		        EXPIRATION TTL.
                                    //
                                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $this->device_type_bit(), 'crnrstn_head_resource_html_output_build_acceleration_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                                        //
                                        // HOOOSTON...VE HAF PROBLEM!
                                        throw new Exception($this->err_message_queue_retrieve());

                                    }

                                }

                                //
                                // JQUERY.
                                if(!isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_FRAMEWORK_JQUERY_1_11_1])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_FRAMEWORK_JQUERY_1_12_4])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_FRAMEWORK_JQUERY_2_2_4])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_FRAMEWORK_JQUERY_3_6_1])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_FRAMEWORK_JQUERY_3_7_0])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_FRAMEWORK_LIGHTBOX_DOT_JS_PLUS_JQUERY])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_FRAMEWORK_JQUERY])){

                                    $tmp_footer_acceleration_head_output = true;
                                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value($is_dev_mode, 'crnrstn_head_resource_html_output_build_acceleration_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                                    //
                                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                                    //
                                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                                    //
                                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                                    // - $oCRNRSTN->err_message_queue_push(),
                                    // - $oCRNRSTN->err_message_queue_retrieve(),
                                    // - $oCRNRSTN->err_message_queue_clear(), AND
                                    // - $oCRNRSTN->get_err_message_count().
                                    //
                                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                                    //		        EXPIRATION TTL.
                                    //
                                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $is_dev_mode, 'crnrstn_head_resource_html_output_build_acceleration_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                                        //
                                        // HOOOSTON...VE HAF PROBLEM!
                                        throw new Exception($this->err_message_queue_retrieve());

                                    }

                                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value(CRNRSTN_JS_FRAMEWORK_JQUERY, 'crnrstn_head_resource_html_output_build_acceleration_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                                    //
                                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                                    //
                                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                                    //
                                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                                    // - $oCRNRSTN->err_message_queue_push(),
                                    // - $oCRNRSTN->err_message_queue_retrieve(),
                                    // - $oCRNRSTN->err_message_queue_clear(), AND
                                    // - $oCRNRSTN->get_err_message_count().
                                    //
                                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                                    //		        EXPIRATION TTL.
                                    //
                                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', CRNRSTN_JS_FRAMEWORK_JQUERY, 'crnrstn_head_resource_html_output_build_acceleration_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                                        //
                                        // HOOOSTON...VE HAF PROBLEM!
                                        throw new Exception($this->err_message_queue_retrieve());

                                    }

                                }

                                //
                                // CRNRSTN :: JS
                                if(!isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_MAIN])){

                                    $tmp_footer_acceleration_head_output = true;
                                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value($is_dev_mode, 'crnrstn_head_resource_html_output_build_acceleration_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                                    //
                                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                                    //
                                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                                    //
                                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                                    // - $oCRNRSTN->err_message_queue_push(),
                                    // - $oCRNRSTN->err_message_queue_retrieve(),
                                    // - $oCRNRSTN->err_message_queue_clear(), AND
                                    // - $oCRNRSTN->get_err_message_count().
                                    //
                                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                                    //		        EXPIRATION TTL.
                                    //
                                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $is_dev_mode, 'crnrstn_head_resource_html_output_build_acceleration_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                                        //
                                        // HOOOSTON...VE HAF PROBLEM!
                                        throw new Exception($this->err_message_queue_retrieve());

                                    }

                                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value(CRNRSTN_JS_MAIN, 'crnrstn_head_resource_html_output_build_acceleration_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                                    //
                                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                                    //
                                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                                    //
                                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                                    // - $oCRNRSTN->err_message_queue_push(),
                                    // - $oCRNRSTN->err_message_queue_retrieve(),
                                    // - $oCRNRSTN->err_message_queue_clear(), AND
                                    // - $oCRNRSTN->get_err_message_count().
                                    //
                                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                                    //		        EXPIRATION TTL.
                                    //
                                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', CRNRSTN_JS_MAIN, 'crnrstn_head_resource_html_output_build_acceleration_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                                        //
                                        // HOOOSTON...VE HAF PROBLEM!
                                        throw new Exception($this->err_message_queue_retrieve());

                                    }

                                }

                                //
                                // JQUERY UI
                                if(!isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_FRAMEWORK_JQUERY_UI])){

                                    $tmp_footer_acceleration_head_output = true;
                                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value($is_dev_mode, 'crnrstn_head_resource_html_output_build_acceleration_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                                    //
                                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                                    //
                                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                                    //
                                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                                    // - $oCRNRSTN->err_message_queue_push(),
                                    // - $oCRNRSTN->err_message_queue_retrieve(),
                                    // - $oCRNRSTN->err_message_queue_clear(), AND
                                    // - $oCRNRSTN->get_err_message_count().
                                    //
                                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                                    //		        EXPIRATION TTL.
                                    //
                                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $is_dev_mode, 'crnrstn_head_resource_html_output_build_acceleration_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                                        //
                                        // HOOOSTON...VE HAF PROBLEM!
                                        throw new Exception($this->err_message_queue_retrieve());

                                    }

                                    // self::$oCRNRSTN_CONFIG_MGR->input_data_value(CRNRSTN_JS_FRAMEWORK_JQUERY_UI, 'crnrstn_head_resource_html_output_build_acceleration_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                                    //
                                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                                    //
                                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                                    //
                                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                                    // - $oCRNRSTN->err_message_queue_push(),
                                    // - $oCRNRSTN->err_message_queue_retrieve(),
                                    // - $oCRNRSTN->err_message_queue_clear(), AND
                                    // - $oCRNRSTN->get_err_message_count().
                                    //
                                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                                    //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                                    //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                                    //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                                    //		        EXPIRATION TTL.
                                    //
                                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', CRNRSTN_JS_FRAMEWORK_JQUERY_UI, 'crnrstn_head_resource_html_output_build_acceleration_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                                        //
                                        // HOOOSTON...VE HAF PROBLEM!
                                        throw new Exception($this->err_message_queue_retrieve());

                                    }

                                }

                            break;

                        }

                    }

                }

            }

            //
            // Lion-O summons the ThunderCats
            // https://www.youtube.com/watch?v=nViUC_yH-Q4
            // HO!...ASSEMBLE!...ALL SPOOLED HEAD RESOURCES.
            for($i = 0; $i < $tmp_head_spool_cnt; $i++){

                $tmp_framework_resource = $this->get_resource('crnrstn_head_resource_html_output_spool', $i, $data_type_family);
                $tmp_framework_is_dev_mode = $this->get_resource('crnrstn_head_resource_html_output_spool_is_dev_mode', $i, $data_type_family);

                //
                // IF THE RESOURCE OUTPUT IS NOT TO BE DELAYED.
                // I.E., IF THE DOM HEAD RESOURCE FOR OUTPUT IS NOT CRNRSTN_CLIENT_SSDTLA_DEBUG.
                if(!in_array($tmp_framework_resource, $tmp_resource_footer_append_spool_override_ARRAY)){

                    if(!isset($this->html_head_build_flag_ARRAY[$tmp_framework_resource])){

                        $this->html_head_build_flag_ARRAY[$tmp_framework_resource] = 1;
                        $tmp_head_html_output .= $this->oCRNRSTN_ASSET_MGR->return_html_head_asset($tmp_framework_resource, false, $tmp_framework_is_dev_mode);

                    }

                }else{

                    self::$footer_resource_index_spool_ARRAY[] = $i;

                }

            }

            //
            // APPEND FOOTER DEPENDENCY HTML OUTPUT TO ANY EXISTING DOM HEAD OUTPUT.
            if($tmp_footer_acceleration_head_output == true){

                $tmp_head_spool_cnt = $this->get_resource_count('crnrstn_head_resource_html_output_build_acceleration_spool', $data_type_family);

                //
                // HO!...ASSEMBLE!...ALL ACCELERATED RESOURCE DEPENDENCIES FOR HTML HEAD OUTPUT.
                for($i = 0; $i < $tmp_head_spool_cnt; $i++){

                    $tmp_framework_resource = $this->get_resource('crnrstn_head_resource_html_output_build_acceleration_spool', $i, $data_type_family);

                    if(!isset($this->html_head_build_flag_ARRAY[$tmp_framework_resource])){

                        $tmp_framework_is_dev_mode = $this->get_resource('crnrstn_head_resource_html_output_build_acceleration_spool_is_dev_mode', $i, $data_type_family);

                        $this->html_head_build_flag_ARRAY[$tmp_framework_resource] = 1;
                        $tmp_head_html_output .= $this->oCRNRSTN_ASSET_MGR->return_html_head_asset($tmp_framework_resource, false, $tmp_framework_is_dev_mode);

                    }

                }

            }

            return $tmp_head_html_output;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function system_output_footer_html($resource_constant = NULL, $spool_for_output = false, $is_dev_mode = NULL){

        try{

            $env_key = NULL;

            //
            // EVALUATE AND UPDATE ENV_KEY IF NECESSARY.
            $this->env_key($env_key);

            if(!isset($is_dev_mode)){

                $is_dev_mode = false;
                if($this->is_bit_set(CRNRSTN_JS_CSS_PROD_MIN) == true){

                    $is_dev_mode = true;

                }

            }else{

                if(!is_bool($is_dev_mode)){

                    $is_dev_mode = $this->tidy_boolean($is_dev_mode);

                }

            }

            //
            // CHECK FOR SPOOL REQUEST...NO OUTPUT. NO FLAG.
            if($spool_for_output == true){

                //
                // SPOOL FRAMEWORK RESOURCE AND ITS DEVELOPER MODE FOR <HTML> OUTPUT TO THE FOOTER.
                // $resource_constant=CRNRSTN_CLIENT_SSDTLA_DEBUG IS 100% FOOTER OUTPUT APPEND.
                // SEE, $oCRNRSTN->system_output_footer_html() FOR RESPONSE RETURN.
                // self::$oCRNRSTN_CONFIG_MGR->input_data_value($is_dev_mode, 'crnrstn_footer_resource_html_output_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $is_dev_mode, 'crnrstn_footer_resource_html_output_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                // self::$oCRNRSTN_CONFIG_MGR->input_data_value($resource_constant, 'crnrstn_footer_resource_html_output_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $resource_constant, 'crnrstn_footer_resource_html_output_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                return true;

            }

            //
            // PREPARE FOR <HTML> OUTPUT FOR THE CURRENT AND ANY SPOOLED RESOURCES.
            $tmp_footer_html_output = '';

            //
            // IF A VALUE IS PROVIDED TO THIS METHOD CALL, SPOOL PROVIDED
            // RESOURCE FOR IMMEDIATE OUTPUT TO FOOTER <HTML>.
            if(isset($resource_constant)){

                //
                // SPOOL FRAMEWORK RESOURCE AND ITS DEVELOPER MODE FOR <HTML> OUTPUT TO THE FOOTER.
                // $resource_constant=CRNRSTN_CLIENT_SSDTLA_DEBUG IS 100% FOOTER OUTPUT APPEND.
                // SEE, $oCRNRSTN->system_output_footer_html() FOR RESPONSE RETURN.
                // self::$oCRNRSTN_CONFIG_MGR->input_data_value($is_dev_mode, 'crnrstn_footer_resource_html_output_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_boolean', $is_dev_mode, 'crnrstn_footer_resource_html_output_spool_is_dev_mode', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                // self::$oCRNRSTN_CONFIG_MGR->input_data_value($resource_constant, 'crnrstn_footer_resource_html_output_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS', NULL, NULL, NULL, false, $env_key);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_integer', $resource_constant, 'crnrstn_footer_resource_html_output_spool', 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS'))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            //
            // ASSEMBLE FRAMEWORK INTEGRATIONS FOR OUTPUT TO HTML DOCUMENT FOOTER.
            $data_type_family = 'CRNRSTN::RESOURCE::ASSET_INTEGRATIONS';
            $tmp_footer_spool_cnt = $this->get_resource_count('crnrstn_footer_resource_html_output_spool', $data_type_family);

            //
            // Lion-O summons the ThunderCats
            // https://www.youtube.com/watch?v=nViUC_yH-Q4
            // HO!...ASSEMBLE!...ALL SPOOLED FOOTER RESOURCES.
            for($i = 0; $i < $tmp_footer_spool_cnt; $i++){

                $tmp_framework_resource = $this->get_resource('crnrstn_footer_resource_html_output_spool', $i, $data_type_family);
                $tmp_framework_is_dev_mode = $this->get_resource('crnrstn_footer_resource_html_output_spool_is_dev_mode', $i, $data_type_family);

                if(!isset($this->html_head_build_flag_ARRAY[$tmp_framework_resource]) && !isset($this->html_footer_build_flag_ARRAY[$tmp_framework_resource])){

                    $this->html_footer_build_flag_ARRAY[$tmp_framework_resource] = 1;
                    $tmp_footer_html_output .= $this->oCRNRSTN_ASSET_MGR->return_html_head_asset($tmp_framework_resource, false, $tmp_framework_is_dev_mode);

                }

            }

            //
            // ACCESS THE FOLLOWING FRAMEWORK RESOURCES WITH DELAYED ASSEMBLY FOR THE FOOTER.
            // ASSEMBLE THE FOOTER HTML OUTPUT.
            if(count(self::$footer_resource_index_spool_ARRAY) > 0){

                foreach(self::$footer_resource_index_spool_ARRAY  as $res_loc_index => $res_loc){

                    $tmp_framework_resource = $this->get_resource('crnrstn_head_resource_html_output_spool', $res_loc, $data_type_family);
                    $tmp_framework_is_dev_mode = $this->get_resource('crnrstn_head_resource_html_output_spool_is_dev_mode', $res_loc, $data_type_family);

                    if(!isset($this->html_footer_build_flag_ARRAY[$tmp_framework_resource])){

                        $this->html_footer_build_flag_ARRAY[$tmp_framework_resource] = 1;
                        switch($tmp_framework_resource){
                            case CRNRSTN_CLIENT_SSDTLA_DEBUG:

                                //
                                // CRNRSTN :: INTERACT UI :: CSS
                                if(!isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_DESKTOP])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_TABLET])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_MOBILE])){

                                    $tmp_device_bit = $this->device_type_bit();
                                    $this->html_head_build_flag_ARRAY[$tmp_device_bit] = 1;
                                    $tmp_footer_html_output .= $this->oCRNRSTN_ASSET_MGR->return_html_head_asset($tmp_device_bit, false, $tmp_framework_is_dev_mode);

                                }

                                //
                                // CRNRSTN :: INTERACT UI :: JS
                                if(!isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_MAIN]) && !isset($this->html_footer_build_flag_ARRAY[CRNRSTN_JS_MAIN])){

                                    $this->html_head_build_flag_ARRAY[CRNRSTN_JS_MAIN] = 1;
                                    $tmp_footer_html_output .= $this->oCRNRSTN_ASSET_MGR->return_html_head_asset(CRNRSTN_JS_MAIN, false, $tmp_framework_is_dev_mode);

                                }

                                //
                                // RESOURCE DEPENDENCIES :: SYSTEM FOOTER
                                if(!isset($this->html_footer_build_flag_ARRAY[CRNRSTN_CLIENT_SSDTLA_DEBUG])){

                                    $this->html_footer_build_flag_ARRAY[CRNRSTN_CLIENT_SSDTLA_DEBUG] = 1;
                                    $tmp_footer_html_output .= $this->ui_content_module_out(CRNRSTN_CLIENT_SSDTLA_DEBUG);

                                }

                                //
                                // CRNRSTN :: SOAP-SERVICES DATA TUNNEL LAYER ARCHITECTURE (SSDTLA)
                                if(!isset($this->html_footer_build_flag_ARRAY[CRNRSTN_SOAP_DATA_TUNNEL]) ){

                                    $this->html_footer_build_flag_ARRAY[CRNRSTN_SOAP_DATA_TUNNEL] = 1;
                                    $tmp_footer_html_output .= $this->ui_content_module_out(CRNRSTN_SOAP_DATA_TUNNEL);

                                }

                            break;
                            case CRNRSTN_RESOURCE_DOCUMENTATION:

                                //
                                // CRNRSTN :: INTERACT UI :: CSS
                                if(!isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_DESKTOP])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_TABLET])
                                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_MOBILE])){

                                    $tmp_device_bit = $this->device_type_bit();
                                    $this->html_head_build_flag_ARRAY[$tmp_device_bit] = 1;
                                    $tmp_footer_html_output .= $this->oCRNRSTN_ASSET_MGR->return_html_head_asset($tmp_device_bit, false, $tmp_framework_is_dev_mode);

                                }

                                //
                                // CRNRSTN :: INTERACT UI :: JS
                                if(!isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_MAIN])){
                                    error_log(__LINE__ . ' crnrstn HTML OUT CRNRSTN_RESOURCE_DOCUMENTATION.');

                                    $this->html_head_build_flag_ARRAY[CRNRSTN_JS_MAIN] = 1;
                                    $tmp_footer_html_output .= $this->oCRNRSTN_ASSET_MGR->return_html_head_asset(CRNRSTN_JS_MAIN, false, $tmp_framework_is_dev_mode);

                                }

                                //
                                // RESOURCE DEPENDENCIES :: SYSTEM FOOTER
                                if(!isset($this->html_footer_build_flag_ARRAY[CRNRSTN_RESOURCE_FOOTER])){

                                    $this->html_footer_build_flag_ARRAY[CRNRSTN_RESOURCE_FOOTER] = 1;
                                    $tmp_footer_html_output .= $this->ui_content_module_out(CRNRSTN_RESOURCE_FOOTER);


                                }

                                $tmp_footer_html_output .= $this->ui_content_module_out($tmp_framework_resource);

                                //
                                // CRNRSTN :: SOAP-SERVICES DATA TUNNEL LAYER ARCHITECTURE (SSDTLA)
                                if(!isset($this->html_footer_build_flag_ARRAY[CRNRSTN_SOAP_DATA_TUNNEL])){

                                    $this->html_footer_build_flag_ARRAY[CRNRSTN_SOAP_DATA_TUNNEL] = 1;
                                    $tmp_footer_html_output .= $this->ui_content_module_out(CRNRSTN_SOAP_DATA_TUNNEL);

                                }

                            break;
                            case CRNRSTN_RESPONSE_REPORT:

                                if(!isset($this->html_footer_build_flag_ARRAY[CRNRSTN_RESPONSE_REPORT])){

                                    $this->html_footer_build_flag_ARRAY[CRNRSTN_RESPONSE_REPORT] = 1;
                                    //$tmp_footer_html_output .= $this->ui_content_module_out(CRNRSTN_RESPONSE_REPORT);

                                }

                            break;
                            default:
                                // SILENCE IS GOLDEN.
                            break;

                        }

                    }

                }

            }

    //        //
    //        // CHECK FOR RETURN RESOURCE FROM METHOD PARAMETER
    //        if(isset($resource_constant)){
    //
    //            //
    //            // CONSIDERING SETTING UP INTEGER CONSTANT CRNRSTN_DESTRUCT_OUTPUT IN LEU OF -1
    //            if($resource_constant == -1){
    //
    //                if($this->destruct_output != ''){
    //
    //                    $tmp_footer_html_output .= $this->destruct_output;
    //
    //                    $this->destruct_output = '';
    //
    //                }
    //
    //            }
    //
    //        }

    //        // TODO :: REARCH THIS ONTO THE DDO.
    //        // CHECK FOR RESOURCES WITH FLIPPED BITS FOR FOOTER.
    //        // THIS IS A CLEANUP SCRIPT FOR ANY TRAILING FRAMEWORK HTML OUTPUT REQUIREMENTS.
    //        $tmp_flipped_bit_constants_ARRAY = $this->return_set_bits($this->system_ui_module_constants_ARRAY);
    //
    //        foreach($tmp_flipped_bit_constants_ARRAY as $index => $resource_constant){
    //
    //            if(!isset($this->html_footer_build_flag_ARRAY[$resource_constant])){
    //
    //                //error_log(__LINE__ . ' crnrstn LOAD FOOTER HTML -> $resource_constant[' . $this->return_int_const_profile($resource_constant, CRNRSTN_STRING) . '].');
    //
    //                $this->html_footer_build_flag_ARRAY[$resource_constant] = 1;
    //                $tmp_footer_html_output .= $this->ui_content_module_out($resource_constant);
    //
    //            }
    //
    //        }

            //
            // PROCESS ANY 3RD PARTY JS/CSS FRAMEWORK FOOTER ASSETS EXCLUDED FROM <HEAD> OUTPUT.
            //foreach($this->system_head_html_asset_array_spool_ARRAY as $asset_hash => $resource_ARRAY){

            //    $tmp_footer_html_output .= $this->mapped_resource_html_output($resource_ARRAY, $asset_hash, true);

            //}

            //
            // CRNRSTN :: 3RD PARTY ANALYTICS INTEGRATIONS.
            // LOAD ANY DOM <HTML> CONTENT INJECTIONS FROM CRNRSTN :: CONFIGURATION.
            // SEE _crnrstn/_config/config.seo_analytics.secure/_crnrstn.analytics.inc.php
            //if($this->is_bit_set(CRNRSTN_UI_TAG_ANALYTICS)){

            $tmp_footer_html_output .= $this->ui_content_module_out(CRNRSTN_UI_TAG_ANALYTICS);
            //error_log(__LINE__ . ' crnrstn LOAD FOOTER CRNRSTN_UI_TAG_ANALYTICS[' . $tmp_footer_html_output . '].');

            //}

            //
            // CRNRSTN :: 3RD PARTY ENGAGEMENT INTEGRATIONS.
            // LOAD ANY DOM <HTML> CONTENT INJECTIONS FROM CRNRSTN :: CONFIGURATION.
            // SEE _crnrstn/_config/config.seo_engagement.secure/_crnrstn.engagement.inc.php
            //if($this->is_bit_set(CRNRSTN_UI_TAG_ENGAGEMENT)){

            //error_log(__LINE__ . ' crnrstn LOAD FOOTER CRNRSTN_UI_TAG_ENGAGEMENT.');
            $tmp_footer_html_output .= $this->ui_content_module_out(CRNRSTN_UI_TAG_ENGAGEMENT);

            //}

            //
            // PROCESS CRNRSTN_JS_MAIN DEPENDENCIES
            // CRNRSTN :: INTERACT UI :: JS
            if(isset($this->html_head_build_flag_ARRAY[CRNRSTN_JS_MAIN])){

                //
                // CRNRSTN :: INTERACT UI :: CSS
                if(!isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_DESKTOP])
                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_TABLET])
                    && !isset($this->html_head_build_flag_ARRAY[CRNRSTN_CSS_MAIN_MOBILE])){

                    $tmp_device_bit = $this->device_type_bit();
                    $this->html_head_build_flag_ARRAY[$tmp_device_bit] = 1;
                    $tmp_footer_html_output .= $this->oCRNRSTN_ASSET_MGR->return_html_head_asset($tmp_device_bit, false, $tmp_framework_is_dev_mode);

                }

                if(!isset($this->html_footer_build_flag_ARRAY[CRNRSTN_SOAP_DATA_TUNNEL])){

                    $this->html_footer_build_flag_ARRAY[CRNRSTN_SOAP_DATA_TUNNEL] = 1;
                    $tmp_footer_html_output .= $this->ui_content_module_out(CRNRSTN_SOAP_DATA_TUNNEL);

                }

            }

            //
            // DEEP LINK SUPPORT.
            if($this->is_bit_set(CRNRSTN_RESOURCE_DEEP_LINK) == true){

                $tmp_footer_html_output .= $this->ui_content_module_out(CRNRSTN_RESOURCE_DEEP_LINK);

            }

            if(isset($this->html_footer_build_flag_ARRAY[CRNRSTN_RESPONSE_REPORT])){

                $tmp_footer_html_output .= '
<!-- ' . $this->ui_content_module_out(CRNRSTN_RESPONSE_REPORT, 'TEXT') . '-->
';

            }

            return $tmp_footer_html_output;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    private function return_html_meta(){

        //
        // TODO :: MAKE THIS WEAK <META> "USE-CASE TOGGLE" BETWEEN HTML_HEAD_META & HTML_HEAD_CRNRSTN_META STRONGER.
        $tmp_str = '';
        $tmp_source = 'CRNRSTN';


        //
        // GET SYSTEM DEFAULT DATA AUTH PROFILE. PRIORITY #1.
        $index = 0;
        $tmp_meta_cnt = $this->get_resource_count('HTML_HEAD_META','CRNRSTN::RESOURCE::GENERAL_SETTINGS::META');

        //
        // CHECK FOR NON-CRNRSTN :: META. [HTML_HEAD_META]
        if($tmp_meta_cnt > 0){

            $tmp_source = 'CUSTOM';

        }

        $tmp_str = '
    ' . $this->html_version_burn('HTML META MODULE');

        //$tmp_module_page_key = $this->oDATA_TUNNEL_SERVICES_MGR->return_received_data('crnrstn_interact_ui_link_text_click');

        //
        // ONLY LOAD CRNRSTN META FOR CRNRSTN.
        //if(strlen($tmp_module_page_key) > 0 || $this->crnrstn_asset_family == 'module_key'){
        $tmp_request_family = $this->return_crnrstn_asset_family();

        if($tmp_request_family == 'module_key' || $tmp_request_family == 'meta'){

            $tmp_source = 'CRNRSTN';

        }

        //error_log(__LINE__ . ' crnrstn crnrstn_asset_family[' . $this->crnrstn_asset_family . ']. $tmp_source[' . $tmp_source . ']. ssdtla_enabled[' . print_r($this->ssdtla_enabled,true) . '].');

        switch($tmp_source){
            case 'CRNRSTN':

                $tmp_meta_cnt = $this->get_resource_count('HTML_HEAD_CRNRSTN_META', 'CRNRSTN::RESOURCE::GENERAL_SETTINGS::META');
                $tmp_meta_cnt_last = $tmp_meta_cnt - 1;

                //error_log(__LINE__ . ' crnrstn $tmp_meta_cnt[' . $tmp_meta_cnt . ']. crnrstn_request_ugc_val[' . $this->crnrstn_request_ugc_val . ']. crnrstn_asset_meta_key[' . $this->crnrstn_asset_meta_key . '].');
                $tmp_str .= '
    ';
                for($i = 0; $i < $tmp_meta_cnt; $i++){

                    $tmp_data = $this->get_resource('HTML_HEAD_CRNRSTN_META', $i, 'CRNRSTN::RESOURCE::GENERAL_SETTINGS::META');
                    if(is_array($tmp_data)){

                        $tmp_cnt = sizeof($tmp_data);
                        for($ii = 0; $ii < $tmp_cnt; $ii++){

                            if($ii == 0){

                                $tmp_str .= $tmp_data[$ii] . '
    ';

                            }else{

                                $tmp_str .= $tmp_data[$ii] . '
    ';

                            }

                        }

                    }else{

                        if($i == 0){

                            $tmp_str .= $tmp_data . '
    ';

                        }else{

                            if($i == $tmp_meta_cnt_last){

                                $tmp_str .= $tmp_data;

                            }else{

                                $tmp_str .= $tmp_data . '
    ';

                            }

                        }

                    }

                }

                $tmp_str .= $this->html_version_burn('HTML META MODULE', 'END') . '
';

            break;
            default:

                //$tmp_meta_cnt = $this->get_resource_count('HTML_HEAD_META', 'CRNRSTN::RESOURCE::GENERAL_SETTINGS::META');
                //error_log(__LINE__ . ' crnrstn $tmp_meta_cnt[' . $tmp_meta_cnt . '].');
                $tmp_str .= '
    ';
                for($i = 0; $i < $tmp_meta_cnt; $i++){

                    //error_log(__LINE__ . ' crnrstn $i[' . $i . ']. $tmp_meta_cnt[' . $tmp_meta_cnt . '].');

                    $tmp_data = $this->get_resource('HTML_HEAD_META', $i, 'CRNRSTN::RESOURCE::GENERAL_SETTINGS::META');
                    if(is_array($tmp_data)){

                        $tmp_cnt = sizeof($tmp_data);
                        for($ii = 0; $ii < $tmp_cnt; $ii++){

                            //error_log(__LINE__ . ' crnrstn ii[' . $ii . ']. $tmp_cnt[' . $tmp_cnt . ']. $tmp_data[' . $tmp_data[$ii] . ']');

                            $tmp_str .= $tmp_data[$ii] . '
    ';

                        }

                    }else{

                        //error_log(__LINE__ . ' crnrstn HTML_HEAD_META i[' . $i . ']. $tmp_meta_cnt[' . $tmp_meta_cnt . ']. $tmp_data[' . $tmp_data . ']');
                        $tmp_str .= $tmp_data . '
    ';

                    }

                }

//                    $tmp_str .= $this->html_version_burn('HTML META MODULE', 'END') . '
//';

            break;

        }

        $tmp_str .= $this->html_version_burn('HTML META MODULE', 'END') . '
';
        $this->add_resource('HTML_OUTPUT', $tmp_str, 'CRNRSTN::RESOURCE::GENERAL_SETTINGS::META');

        return $tmp_str;

    }

    private function mapped_resource_html_output($resource_ARRAY, $asset_hash, $footer_html_output = false){

        return $this->oCRNRSTN_ASSET_MGR->mapped_resource_html_output($resource_ARRAY, $asset_hash, $footer_html_output);

    }

    public function return_crnrstn_data_packet($packet_type = CRNRSTN_CHANNEL_RUNTIME){

        switch($packet_type){
            case CRNRSTN_CHANNEL_SSDTLA:

                //
                // SOAP ENCAPSULATION OF THE PSSDTLP HAS NOT YET BEEN IMPLEMENTED.
                return $this->session_salt();

            break;
            case CRNRSTN_CHANNEL_PSSDTLA:
            default:

                return $this->data_encrypt($this->oCRNRSTN_TRM->return_crnrstn_data_packet_json($packet_type));

            break;

        }

    }

    public function return_report_module_out($resource_constant, $output_format = 'HTML'){

        return $this->oCRNRSTN_USR->ui_content_module_out($resource_constant, $output_format);

    }

    public function ui_content_module_out($resource_constant, $crnrstn_form_handle = NULL){

        return $this->oCRNRSTN_USR->ui_content_module_out($resource_constant, $crnrstn_form_handle);

    }

    public function form_integration_html_packet_output($crnrstn_form_handle){

        return $this->oCRNRSTN_USR->ui_content_module_out(CRNRSTN_UI_FORM_INTEGRATION_PACKET, $crnrstn_form_handle);

    }

    public function output_regression_stripe_ARRAY($result_str, $result_array, $output_format = 'array'){

        $tmp_ARRAY = array();
        $tmp_ARRAY['string'] = $this->hash($result_str);
        $tmp_ARRAY['index_array'] = $result_array;

        if($output_format != 'array'){

            return $tmp_ARRAY['string'];

        }

        return $tmp_ARRAY;

    }

    public function return_dataset_nomination_prefix($output_format = NULL, $var0 = NULL, $var1 = NULL, $var2 = NULL, $var3 = NULL, $var4 = NULL, $var5 = NULL, $var6 = NULL, $var7 = NULL, $var8 = NULL, $var9 = NULL, $var10 = NULL, $var11 = NULL){

        $tmp_var_index_pos = 0;
        $tmp_total_index = 0;

        if(!isset($output_format)){

            $output_format = 'array';

        }

        $tmp_str_out = '';
        $tmp_array_str_unit_ARRAY = array();
        $tmp_array_out_ARRAY = array();

        if(isset($var0)){

            $tmp_total_index++;
            $tmp_str_out .= $var0 . '::';
            $tmp_array_str_unit_ARRAY[] = $var0;

        }

        $tmp_var_index_pos++;
        if($tmp_var_index_pos > $tmp_total_index) return $this->output_regression_stripe_ARRAY($tmp_str_out, $tmp_array_str_unit_ARRAY, $output_format);

        if(isset($var1)){

            $tmp_total_index++;
            $tmp_str_out .= $var1 . '::';
            $tmp_array_str_unit_ARRAY[] = $var1;

        }

        $tmp_var_index_pos++;
        if($tmp_var_index_pos > $tmp_total_index) return $this->output_regression_stripe_ARRAY($tmp_str_out, $tmp_array_str_unit_ARRAY, $output_format);

        if(isset($var2)){

            $tmp_total_index++;
            $tmp_str_out .= $var2 . '::';
            $tmp_array_str_unit_ARRAY[] = $var2;

        }

        $tmp_var_index_pos++;
        if($tmp_var_index_pos > $tmp_total_index) return $this->output_regression_stripe_ARRAY($tmp_str_out, $tmp_array_str_unit_ARRAY, $output_format);

        if(isset($var3)){

            $tmp_total_index++;
            $tmp_str_out .= $var3 . '::';
            $tmp_array_str_unit_ARRAY[] = $var3;

        }

        $tmp_var_index_pos++;
        if($tmp_var_index_pos > $tmp_total_index) return $this->output_regression_stripe_ARRAY($tmp_str_out, $tmp_array_str_unit_ARRAY, $output_format);

        if(isset($var4)){

            $tmp_total_index++;
            $tmp_str_out .= $var4 . '::';
            $tmp_array_str_unit_ARRAY[] = $var4;

        }

        $tmp_var_index_pos++;
        if($tmp_var_index_pos > $tmp_total_index) return $this->output_regression_stripe_ARRAY($tmp_str_out, $tmp_array_str_unit_ARRAY, $output_format);

        if(isset($var5)){

            $tmp_total_index++;
            $tmp_str_out .= $var5 . '::';
            $tmp_array_str_unit_ARRAY[] = $var5;

        }

        $tmp_var_index_pos++;
        if($tmp_var_index_pos > $tmp_total_index) return $this->output_regression_stripe_ARRAY($tmp_str_out, $tmp_array_str_unit_ARRAY, $output_format);

        if(isset($var6)){

            $tmp_total_index++;
            $tmp_str_out .= $var6 . '::';
            $tmp_array_str_unit_ARRAY[] = $var6;

        }

        $tmp_var_index_pos++;
        if($tmp_var_index_pos > $tmp_total_index) return $this->output_regression_stripe_ARRAY($tmp_str_out, $tmp_array_str_unit_ARRAY, $output_format);

        if(isset($var7)){

            $tmp_total_index++;
            $tmp_str_out .= $var7 . '::';
            $tmp_array_str_unit_ARRAY[] = $var7;

        }

        $tmp_var_index_pos++;
        if($tmp_var_index_pos > $tmp_total_index) return $this->output_regression_stripe_ARRAY($tmp_str_out, $tmp_array_str_unit_ARRAY, $output_format);

        if(isset($var8)){

            $tmp_total_index++;
            $tmp_str_out .= $var8 . '::';
            $tmp_array_str_unit_ARRAY[] = $var8;

        }

        $tmp_var_index_pos++;
        if($tmp_var_index_pos > $tmp_total_index) return $this->output_regression_stripe_ARRAY($tmp_str_out, $tmp_array_str_unit_ARRAY, $output_format);

        if(isset($var9)){

            $tmp_total_index++;
            $tmp_str_out .= $var9 . '::';
            $tmp_array_str_unit_ARRAY[] = $var9;

        }

        $tmp_var_index_pos++;
        if($tmp_var_index_pos > $tmp_total_index) return $this->output_regression_stripe_ARRAY($tmp_str_out, $tmp_array_str_unit_ARRAY, $output_format);

        if(isset($var10)){

            $tmp_total_index++;
            $tmp_str_out .= $var10 . '::';
            $tmp_array_str_unit_ARRAY[] = $var10;

        }

        $tmp_var_index_pos++;
        if($tmp_var_index_pos > $tmp_total_index) return $this->output_regression_stripe_ARRAY($tmp_str_out, $tmp_array_str_unit_ARRAY, $output_format);

        if(isset($var11)){

            $tmp_str_out .= $var11 . '::';
            $tmp_array_str_unit_ARRAY[] = $var11;

        }

        $tmp_array_out_ARRAY['string'] = $this->hash($tmp_str_out);
        $tmp_array_out_ARRAY['index_array'] = $tmp_array_str_unit_ARRAY;

        if($output_format == 'array'){

            return $tmp_array_out_ARRAY;

        }

        //
        // $output_format = 'string'
        return $tmp_array_out_ARRAY['string'];

    }

    public function input_data_value($data_value, $data_key, $data_type_family = 'CRNRSTN::RESOURCE', $index = NULL, $data_authorization_profile = NULL, $ttl = 60, $spool_resource = false, $env_key = NULL){

        //error_log(__LINE__ . ' crnrstn input_data_value() --> $data_key[' . $data_key . ']. $data_value[' . strval($data_value) . ']. $data_type_family[' . $data_type_family . ']. $data_authorization_profile[' . $data_authorization_profile . '].');
        //die();
        return self::$oCRNRSTN_CONFIG_MGR->input_data_value($data_value, $data_key, $data_type_family, $index, $data_authorization_profile, $ttl, $spool_resource, $env_key);

    }

    public function isset_crnrstn_spool($data_attribute, $ddo_memory_pointer,  $index = 0){

        return self::$oCRNRSTN_PERFORMANCE_REGULATOR->isset_crnrstn_spool($data_attribute, $ddo_memory_pointer, $index);

    }

    public function config_ugc_input_clean_data($data_profile, $data, $data_key, $data_type_family = 'CRNRSTN::RESOURCE', $index = NULL, $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME, $ttl = NULL, $spool_resource = false, $env_key = NULL){

        //
        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
        //
        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
        //
        // Sunday, December 3, 2023 @ 2116 hrs.
        return self::$oCRNRSTN_PERFORMANCE_REGULATOR->config_ugc_input_clean_data($data_profile, $data, $data_key, $data_type_family, $index, $data_authorization_profile, $ttl, $spool_resource, $env_key);

    }

    public function return_stripe_key_ARRAY($var_0, $var_1 = NULL, $var_2 = NULL, $var_3 = NULL, $var_4 = NULL, $var_5 = NULL, $var_6 = NULL, $var_7 = NULL, $var_8 = NULL, $var_9 = NULL, $var_10 = NULL, $var_11 = NULL){

        $key_count = 0;
        $tmp_str_ARRAY = array();
        $tmp_str_ARRAY[] = $var_0;

        $key_count++;
        if(isset($var_1)){

            $tmp_str_ARRAY[] = $var_1;

        }

        if($key_count > sizeof($tmp_str_ARRAY)) return $tmp_str_ARRAY;

        $key_count++;
        if(isset($var_2)){

            $tmp_str_ARRAY[] = $var_2;

        }

        if($key_count > sizeof($tmp_str_ARRAY)) return $tmp_str_ARRAY;

        $key_count++;
        if(isset($var_3)){

            $tmp_str_ARRAY[] = $var_3;

        }

        if($key_count > sizeof($tmp_str_ARRAY)) return $tmp_str_ARRAY;

        $key_count++;
        if(isset($var_4)){

            $tmp_str_ARRAY[] = $var_4;

        }

        if($key_count > sizeof($tmp_str_ARRAY)) return $tmp_str_ARRAY;

        $key_count++;
        if(isset($var_5)){

            $tmp_str_ARRAY[] = $var_5;

        }

        if($key_count > sizeof($tmp_str_ARRAY)) return $tmp_str_ARRAY;

        $key_count++;
        if(isset($var_6)){

            $tmp_str_ARRAY[] = $var_6;

        }

        if($key_count > sizeof($tmp_str_ARRAY)) return $tmp_str_ARRAY;

        $key_count++;
        if(isset($var_7)){

            $tmp_str_ARRAY[] = $var_7;

        }

        if($key_count > sizeof($tmp_str_ARRAY)) return $tmp_str_ARRAY;

        $key_count++;
        if(isset($var_8)){

            $tmp_str_ARRAY[] = $var_8;

        }

        if($key_count > sizeof($tmp_str_ARRAY)) return $tmp_str_ARRAY;

        $key_count++;
        if(isset($var_9)){

            $tmp_str_ARRAY[] = $var_9;

        }

        if($key_count > sizeof($tmp_str_ARRAY)) return $tmp_str_ARRAY;

        $key_count++;
        if(isset($var_10)){

            $tmp_str_ARRAY[] = $var_10;

        }

        if($key_count > sizeof($tmp_str_ARRAY)) return $tmp_str_ARRAY;

        $key_count++;
        if(isset($var_11)){

            $tmp_str_ARRAY[] = $var_11;

        }

        if($key_count > sizeof($tmp_str_ARRAY)) return $tmp_str_ARRAY;

        return $tmp_str_ARRAY;

    }

    public function return_regression_stripe_ARRAY($operation_type, $data_key_ARRAY, $var_0 = NULL, $var_1 = NULL, $var_2 = NULL, $var_3 = NULL, $var_4 = NULL, $var_5 = NULL, $var_6 = NULL, $var_7 = NULL, $var_8 = NULL, $var_9 = NULL, $var_10 = NULL, $var_11 = NULL){

        $tmp_total_index = count($data_key_ARRAY);
        $tmp_var_index_pos = 0;
        $tmp_str_out = '';
        $tmp_array_out_ARRAY = array();

        switch($operation_type){
            case 'HAS_DATA_NOT_APPLIED':

                if(isset($var_0)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_1)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_2)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_3)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_4)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_5)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_6)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_7)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_8)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_9)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_10)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_11)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' was not able to be applied. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                if($tmp_var_index_pos >= $tmp_total_index) break 1;

            break;
            case 'HAS_STRING_DATA':

                if(isset($var_0)){

                    if(strlen($var_0) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_1)){

                    if(strlen($var_1) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_2)){

                    if(strlen($var_2) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_3)){

                    if(strlen($var_3) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_4)){

                    if(strlen($var_4) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_5)){

                    if(strlen($var_5) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_6)){

                    if(strlen($var_6) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_7)){

                    if(strlen($var_7) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_8)){

                    if(strlen($var_8) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_9)){

                    if(strlen($var_9) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_10)){

                    if(strlen($var_10) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_11)){

                    if(strlen($var_11) > 0){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is not an empty string. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }

                if($tmp_var_index_pos >= $tmp_total_index) break 1;

            break;
            case 'MISSING_STRING_DATA':

                if(isset($var_0)){

                    if($var_0 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_1)){

                    if($var_1 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_2)){

                    if($var_2 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_3)){

                    if($var_3 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_4)){

                    if($var_4 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_5)){

                    if($var_5 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_6)){

                    if($var_6 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_7)){

                    if($var_7 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_8)){

                    if($var_8 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_9)){

                    if($var_9 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_10)){

                    if($var_10 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(isset($var_11)){

                    if($var_11 == ''){

                        $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is empty. ';
                        $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                    }

                }else{

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                if($tmp_var_index_pos >= $tmp_total_index) break 1;

            break;
            default:

                // $operation_type = 'IS_NULL'
                // CHECK FOR IS NULL
                if(!isset($var_0)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(!isset($var_1)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(!isset($var_2)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(!isset($var_3)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(!isset($var_4)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(!isset($var_5)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(!isset($var_6)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(!isset($var_7)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(!isset($var_8)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(!isset($var_9)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(!isset($var_10)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                $tmp_var_index_pos++;
                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                if(!isset($var_11)){

                    $tmp_str_out .= $data_key_ARRAY[$tmp_var_index_pos] . ' is null. ';
                    $tmp_array_out_ARRAY[] = $data_key_ARRAY[$tmp_var_index_pos];

                }

                if($tmp_var_index_pos >= $tmp_total_index) break 1;

                break;

        }

        $tmp_final_out_ARRAY = array();
        $tmp_final_out_ARRAY['string'] = $tmp_str_out;
        $tmp_final_out_ARRAY['index_array'] = $tmp_array_out_ARRAY;

        return $tmp_final_out_ARRAY;

    }

    public function return_module_content_seo_analytics($data_key = NULL){

        $tmp_str_out = '';
        $data_type_family = 'CRNRSTN::RESOURCE::SEO_ANALYTICS';

        if(isset($data_key)){

            //
            // RETURN A SPECIFIC PROFILE.
            return $this->get_resource($data_key, 0, $data_type_family);

        }

        //
        // RETURN ALL ENABLED PROFILES
        $tmp_profile_key = 'CRNRSTN::SYSTEM::ANALYTICS';
        $tmp_profile_cnt = self::$oCRNRSTN_CONFIG_MGR->system_profile_return_count($tmp_profile_key);

        //error_log(__LINE__ . ' crnrstn ANALYTICS $tmp_profile_cnt=[' . $tmp_profile_cnt . '].');

        for($i = 0; $i < $tmp_profile_cnt; $i++){

            $tmp_data_key = self::$oCRNRSTN_CONFIG_MGR->system_profile_return_data_key($tmp_profile_key, $i);

            $tmp_str_out .= $this->get_resource($tmp_data_key, 0, $data_type_family);
            //error_log(__LINE__ . ' crnrstn $tmp_str_out=[' . $tmp_str_out . '].');

        }

        return $tmp_str_out;

    }

    public function return_module_content_seo_engagement($data_key = NULL){

        $tmp_str_out = '';
        $data_type_family = 'CRNRSTN::RESOURCE::SEO_ENGAGEMENT';

        if(isset($data_key)){

            //
            // RETURN A SPECIFIC PROFILE
            return $this->get_resource($data_key, 0, $data_type_family);

        }

        //
        // RETURN ALL ENABLED PROFILES.
        $tmp_profile_key = 'CRNRSTN::SYSTEM::ENGAGEMENT';
        $tmp_profile_cnt = self::$oCRNRSTN_CONFIG_MGR->system_profile_return_count($tmp_profile_key);
        //error_log(__LINE__ . ' crnrstn PRE-EXISTING ARCH-> $tmp_profile_cnt=[' . $tmp_profile_cnt . '].');

        for($i = 0; $i < $tmp_profile_cnt; $i++){

            //
            // TODO :: PACKAGE THIS NIFTY LITTLE SECTION TO RETURN GROUPED "FAMILIES" OF DDO CONFIGURATION DATA.
            // LOL! [THIS PRE-LIGHTSABER TODO ABOVE^]
            // LIKE 20MIN AGO, I WAS JUST SITTING HERE AND STARING...THINKING ABOUT DOING THIS VERY THING
            // WHEN HAVING TO RECONNECT ENGAGEMENT AND ANALYTICS TO LIGHTSABER.
            // Sunday, Jun 14, 2023 @ 1649 hrs.
            //
            // $oCRNRSTN->return_family('CRNRSTN::SYSTEM::ENGAGEMENT');
            // $oCRNRSTN->return_family('CRNRSTN::SYSTEM::*');  //  SOME KIND OF STAR NOTATION...OR
            // $oCRNRSTN->return_family('"::ENGAGEMENT"', $search_algo = true);  //  ...OR EVEN MORE HIP...W/"CASE-SENSITIVE LITERALS"
            // Tuesday, May 23, 2023 2303 hrs.
            $tmp_data_key = self::$oCRNRSTN_CONFIG_MGR->system_profile_return_data_key($tmp_profile_key, $i);
            //error_log(__LINE__ . ' crnrstn PRE-EXISTING ARCH-> $tmp_data_key[' . $tmp_data_key . ']. [' . $i . ']');

            $tmp_str_out .= $this->get_resource($tmp_data_key, 0, $data_type_family);
            //error_log(__LINE__ . ' crnrstn $tmp_str_out=[' . $tmp_str_out . '].');

        }

        return $tmp_str_out;

    }

    public function system_output_file_html($file_path, $output_mode = NULL, $width = NULL, $height = NULL, $hyperlink = NULL, $alt = NULL, $title = NULL, $target = NULL, $is_text_anchor_link = false){
        /*
        $oCRNRSTN->system_output_file_html('/favicon.ico', CRNRSTN_FAVICON);
        $oCRNRSTN->system_output_file_html('/css/main.css', CRNRSTN_CSS);
        $oCRNRSTN->system_output_file_html('/js/main.js', CRNRSTN_JS);
        $oCRNRSTN->system_output_file_html('/imgs/reflection_of_5.png', CRNRSTN_HTML, '75', '', '5', '5', '/', '_self');

        */

        return $this->oCRNRSTN_ENV->system_output_file_html($file_path, $output_mode, $width, $height, $hyperlink, $alt, $title, $target);

    }

    public function download_file_system($file_path, $output_mode, $width = NULL, $height = NULL, $hyperlink = NULL, $alt = NULL, $title = NULL, $target = NULL){

        return $this->oCRNRSTN_ENV->download_file_system($file_path, $output_mode, $width, $height, $hyperlink, $alt, $title, $target);

    }

    public function details_file_system($file_path, $output_mode, $width = NULL, $height = NULL, $hyperlink = NULL, $alt = NULL, $title = NULL, $target = NULL){

        return $this->oCRNRSTN_ENV->details_file_system($file_path, $output_mode, $width, $height, $hyperlink, $alt, $title, $target);

    }

    public function config_integrate_file_system($env_key, $http_path, $dir_path = CRNRSTN_ROOT, $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME, $ttl = 60, $host = 'localhost', $excluded_file_ext_ARRAY = NULL){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $this->oCRNRSTN_ENV->config_integrate_file_system($env_key, $http_path, $dir_path, $data_authorization_profile, $ttl, $host, $excluded_file_ext_ARRAY);

        }

    }

    private function config_add_seo_analytics($env_key, $data_key, $data_value = '', $is_enabled = true){

        try{

            $data_type_title = 'CRNRSTN :: ANALYTICS';

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$env_key', '$data_key', '$data_value');
                $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('MISSING_STRING_DATA', $tmp_stripe_key_ARRAY, $env_key, $data_key, $data_value);

                $tmp_param_missing_str = $tmp_param_err_str_ARRAY['string'];
                $tmp_param_missing_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

                if(count($tmp_param_missing_ARRAY) > 0){

                    $this->error_log('Missing required ' . $data_type_title . ' seo analytics profile information to complete ' . __METHOD__ . '. ' . $tmp_param_missing_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    throw new Exception('CRNRSTN :: initialization ERROR :: ' . __METHOD__ . ' was called but was missing parameter information, and so ' . $data_type_title . ' profile was not able to be initialized. Some parameters are required. ' . $tmp_param_missing_str);

                }else{

                    $data_type_family = 'CRNRSTN::RESOURCE::SEO_ANALYTICS';

                    self::$oCRNRSTN_CONFIG_MGR->input_data_value($data_value, $data_key, $data_type_family, NULL, CRNRSTN_AUTHORIZE_RUNTIME, NULL, false, $env_key);
                    self::$oCRNRSTN_CONFIG_MGR->input_data_value($is_enabled, $data_key . '::' . 'ANALYTICS_ENABLED', $data_type_family, NULL, CRNRSTN_AUTHORIZE_RUNTIME, NULL, false, $env_key);

                    if($is_enabled == true){

                        self::$oCRNRSTN_CONFIG_MGR->system_profile_map_data_key('CRNRSTN::SYSTEM::ANALYTICS', $data_key);

                        //
                        // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                        // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                        self::$oCRNRSTN_BITFLIP_MGR->toggle_bit(CRNRSTN_UI_TAG_ANALYTICS, true);

                    }

                    $this->error_log($data_type_title . ' seo analytics initialized for environment [' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    return true;

                }

            }

            //
            // WE DON'T HAVE THE ENVIRONMENT, BUT DETECTION WOULD HAVE ALREADY BEEN COMPLETED.
            //throw new Exception('Unable to process encryption profile for environment [' . self::$env_key_hash_config_ARRAY[self::$config_serial] . '].');
            $this->error_log('Bypassed processing analytics for environment [' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    private function config_add_seo_engagement($env_key, $data_key, $data_value = '', $is_enabled = true, $data_type_family = 'CRNRSTN::RESOURCE::SEO_ENGAGEMENT', $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME, $index = NULL, $ttl = 60, $spool_resource = false){

        try{

            $data_type_title = 'CRNRSTN :: ENGAGEMENT';

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$env_key', '$data_key', '$data_value');
                $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('MISSING_STRING_DATA', $tmp_stripe_key_ARRAY, $env_key, $data_key, $data_value);

                $tmp_param_missing_str = $tmp_param_err_str_ARRAY['string'];
                $tmp_param_missing_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

                if(count($tmp_param_missing_ARRAY) > 0){

                    $this->error_log('Missing required ' . $data_type_title . ' seo engagement profile information to complete ' . __METHOD__ . '. ' . $tmp_param_missing_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    throw new Exception('CRNRSTN :: initialization ERROR :: ' . __METHOD__ . ' was called but was missing parameter information, and so ' . $data_type_title . ' profile was not able to be initialized. Some parameters are required. ' . $tmp_param_missing_str);

                }else{

                    //
                    // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                    $this->input_data_value($data_value, $data_key, $data_type_family, $index, $data_authorization_profile, $ttl, $spool_resource, self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]]);
                    $this->input_data_value($is_enabled, $data_key . '::' . 'ENGAGEMENT_ENABLED', $data_type_family, $index, $data_authorization_profile, $ttl, $spool_resource, self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]]);

                    if($is_enabled == true){

                        //error_log(__LINE__ . ' crnrstn IS ENABLED [' . $data_key . '::' . 'ANALYTICS_ENABLED].');

                        self::$oCRNRSTN_CONFIG_MGR->system_profile_map_data_key('CRNRSTN::SYSTEM::ENGAGEMENT', $data_key);

                        //
                        // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                        // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                        self::$oCRNRSTN_BITFLIP_MGR->toggle_bit(CRNRSTN_UI_TAG_ENGAGEMENT, true);

                        //error_log(__LINE__ . ' crnrstn TOGGLE ME [' . CRNRSTN_UI_TAG_ENGAGEMENT . '].');

                    }

                    $this->error_log($data_type_title . ' seo engagement initialized for environment [' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                    return true;

                }

            }

            //
            // WE DON'T HAVE THE ENVIRONMENT, BUT DETECTION WOULD HAVE ALREADY BEEN COMPLETED.
            //throw new Exception('Unable to process encryption profile for environment [' . self::$env_key_hash_config_ARRAY[self::$config_serial] . '].');
            $this->error_log('Bypassed processing analytics for environment [' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    private function config_init_session_encryption($env_key, $encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $tmp_data_profile_ARRAY = array();

            $data_type_family = 'CRNRSTN::RESOURCE::SESSION_ENCRYPTION';
            $tmp_data_profile_ARRAY['data_type_family'] = $data_type_family;
            $tmp_data_profile_ARRAY['data_type_title'] = 'CRNRSTN :: SESSION';
            $tmp_data_profile_ARRAY['data_type_encryption_channel'] = CRNRSTN_ENCRYPT_SESSION;

            return $this->apply_encryption_profile($encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg, $tmp_data_profile_ARRAY);

        }

        return true;

    }

    private function config_init_cookie_encryption($env_key, $encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $data_type_family = 'CRNRSTN::RESOURCE::COOKIE_ENCRYPTION';
            $tmp_data_profile_ARRAY['data_type_family'] = $data_type_family;
            $tmp_data_profile_ARRAY['data_type_title'] = 'CRNRSTN :: COOKIE';
            $tmp_data_profile_ARRAY['data_type_encryption_channel'] = CRNRSTN_ENCRYPT_COOKIE;

            return $this->apply_encryption_profile($encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg, $tmp_data_profile_ARRAY);

        }

        return true;

    }

    private function config_init_tunnel_encryption($env_key, $encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $data_type_family = 'CRNRSTN::RESOURCE::TUNNEL_ENCRYPTION';
            $tmp_data_profile_ARRAY['data_type_family'] = $data_type_family;
            $tmp_data_profile_ARRAY['data_type_title'] = 'CRNRSTN :: TUNNEL';
            $tmp_data_profile_ARRAY['data_type_encryption_channel'] = CRNRSTN_ENCRYPT_TUNNEL;

            return $this->apply_encryption_profile($encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg, $tmp_data_profile_ARRAY);

        }

        return true;

    }

    private function config_init_get_encryption($env_key, $encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $data_type_family = 'CRNRSTN::RESOURCE::GET_ENCRYPTION';
            $tmp_data_profile_ARRAY['data_type_family'] = $data_type_family;
            $tmp_data_profile_ARRAY['data_type_title'] = 'CRNRSTN :: GET';
            $tmp_data_profile_ARRAY['data_type_encryption_channel'] = CRNRSTN_ENCRYPT_GET;

            return $this->apply_encryption_profile($encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg, $tmp_data_profile_ARRAY);

        }

        return true;

    }

    private function config_init_post_encryption($env_key, $encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $data_type_family = 'CRNRSTN::RESOURCE::POST_ENCRYPTION';
            $tmp_data_profile_ARRAY['data_type_family'] = $data_type_family;
            $tmp_data_profile_ARRAY['data_type_title'] = 'CRNRSTN :: POST';
            $tmp_data_profile_ARRAY['data_type_encryption_channel'] = CRNRSTN_ENCRYPT_POST;

            return $this->apply_encryption_profile($encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg, $tmp_data_profile_ARRAY);

        }

        return true;

    }

    private function config_init_database_encryption($env_key, $encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $data_type_family = 'CRNRSTN::RESOURCE::DATABASE_ENCRYPTION';
            $tmp_data_profile_ARRAY['data_type_family'] = $data_type_family;
            $tmp_data_profile_ARRAY['data_type_title'] = 'CRNRSTN :: DATABASE';
            $tmp_data_profile_ARRAY['data_type_encryption_channel'] = CRNRSTN_ENCRYPT_DATABASE;

            return $this->apply_encryption_profile($encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg, $tmp_data_profile_ARRAY);

        }

        return true;

    }

    private function config_init_soap_encryption($env_key, $encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $data_type_family = 'CRNRSTN::RESOURCE::SOAP_ENCRYPTION';
            $tmp_data_profile_ARRAY['data_type_family'] = $data_type_family;
            $tmp_data_profile_ARRAY['data_type_title'] = 'CRNRSTN :: SOAP SERVICES';
            $tmp_data_profile_ARRAY['data_type_encryption_channel'] = CRNRSTN_ENCRYPT_SOAP;

            return $this->apply_encryption_profile($encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg, $tmp_data_profile_ARRAY);

        }

        return true;

    }

    private function config_init_file_encryption($env_key, $encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $data_type_family = 'CRNRSTN::RESOURCE::FILE_ENCRYPTION';
            $tmp_data_profile_ARRAY['data_type_family'] = $data_type_family;
            $tmp_data_profile_ARRAY['data_type_title'] = 'CRNRSTN :: FILE SYSTEM SERVICES';
            $tmp_data_profile_ARRAY['data_type_encryption_channel'] = CRNRSTN_ENCRYPT_FILE;

            return $this->apply_encryption_profile($encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg, $tmp_data_profile_ARRAY);

        }

        return true;

    }

    private function config_init_oersl_encryption($env_key, $encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $data_type_family = 'CRNRSTN::RESOURCE::OERSL_ENCRYPTION';

            $tmp_data_profile_ARRAY['data_type_family'] = $data_type_family;
            $tmp_data_profile_ARRAY['data_type_title'] = 'CRNRSTN :: OpenSSL Encryption Rotation Services Layer (OERSL)';
            $tmp_data_profile_ARRAY['data_type_encryption_channel'] = CRNRSTN_ENCRYPT_OERSL;

            return $this->apply_encryption_profile($encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg, $tmp_data_profile_ARRAY);

        }

        return true;

    }

    private function apply_encryption_profile($encrypt_cipher, $encrypt_secret_key, $encrypt_options, $hmac_alg, $tmp_data_profile_ARRAY){

        try{

            $tmp_stripe_key_ARRAY = $this->return_stripe_key_ARRAY('$encrypt_cipher', '$encrypt_secret_key', '$hmac_alg');
            $tmp_param_err_str_ARRAY = $this->return_regression_stripe_ARRAY('MISSING_STRING_DATA', $tmp_stripe_key_ARRAY, $encrypt_cipher, $encrypt_secret_key, $hmac_alg);

            $tmp_param_missing_str = $tmp_param_err_str_ARRAY['string'];
            $tmp_param_missing_ARRAY = $tmp_param_err_str_ARRAY['index_array'];

            if(count($tmp_param_missing_ARRAY) > 0){

                $this->error_log('Missing required ' . $tmp_data_profile_ARRAY['data_type_title'] . ' encryption information to complete ' . __METHOD__ . '. ' . $tmp_param_missing_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
                throw new Exception('CRNRSTN :: initialization ERROR :: ' . __METHOD__ . ' was called but was missing parameter information and so ' . $tmp_data_profile_ARRAY['data_type_title'] . ' encryption was not able to be initialized. Some parameters are required. ' . $tmp_param_missing_str);

            }else{

//                    $tmp_digest = $this->get_resource('openssl_digest', 0, 'CRNRSTN::RESOURCE::GENERAL_SETTINGS');
//                    $tmp_cipher = $this->get_resource('openssl_cipher', 0, 'CRNRSTN::RESOURCE::GENERAL_SETTINGS');
//
//                    self::$oCRNRSTN_CONFIG_MGR->input_data_value($encrypt_cipher, 'encrypt_cipher', $data_type_family, NULL, CRNRSTN_AUTHORIZE_RUNTIME, NULL, false, $env_key);
//                    self::$oCRNRSTN_CONFIG_MGR->input_data_value(openssl_digest($encrypt_secret_key, $tmp_digest, true), 'encrypt_secret_key', $data_type_family, NULL, CRNRSTN_AUTHORIZE_RUNTIME, NULL, false, $env_key);
//                    self::$oCRNRSTN_CONFIG_MGR->input_data_value($encrypt_options, 'encrypt_options', $data_type_family, NULL, CRNRSTN_AUTHORIZE_RUNTIME, NULL, false, $env_key);
//                    self::$oCRNRSTN_CONFIG_MGR->input_data_value($hmac_alg, 'hmac_alg', $data_type_family, NULL, CRNRSTN_AUTHORIZE_RUNTIME, NULL, false, $env_key);
//
//                    $this->error_log($data_type_title . ' encryption initialized for environment [' . $env_key . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_encryption', $encrypt_cipher, 'encrypt_cipher', $tmp_data_profile_ARRAY['data_type_encryption_channel'], 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_encryption', $encrypt_secret_key, 'encrypt_secret_key', $tmp_data_profile_ARRAY['data_type_encryption_channel'], 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_encryption', $encrypt_options, 'encrypt_options', $tmp_data_profile_ARRAY['data_type_encryption_channel'], 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_encryption', $hmac_alg, 'hmac_alg', $tmp_data_profile_ARRAY['data_type_encryption_channel'], 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_encryption', $tmp_data_profile_ARRAY, 'data_profile_ARRAY', $tmp_data_profile_ARRAY['data_type_encryption_channel'], 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

//
//    public function ____env_key_config($output_format = 'raw'){
//        // where, $output_format = ['raw', 'hash'].
//
//        try{
//
//            //error_log(__LINE__ . ' crnrstn [' . print_r(self::$env_key_hash_config_ARRAY, true) . ']. die();');
//            //die();
//
//            //
//            // DID WE DETERMINE ENVIRONMENT KEY THROUGH INITIALIZATION OF CRNRSTN?
//            // IF SO, THIS PARAMETER WILL BE SET. JUST USE IT.
//            if(isset(self::$env_key_hash_config_ARRAY[self::$config_serial])){
//
//                if(self::$env_key_hash_config_ARRAY[self::$config_serial] != ''){
//
//                    // Monday, August 22, 2022 @ 0231 hrs
//                    // WE SUCCESSFULLY DETECTED THE ENVIRONMENT IN THIS NEW DATA
//                    // ARCHITECTURE, PEOPLE. WOO-HOO! POP BOTTLES.
//                    //$this->error_log('Detected server environment [' . self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]] . '] returned from private static array.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//                    if($output_format == 'hash'){
//
//                        return self::$env_key_hash_config_ARRAY[self::$config_serial];
//
//                    }
//
//                    return self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]];
//
//                }
//
//            }
//
//            if($this->is_system_terminate_enabled() == true){
//
//                if($output_format == 'hash'){
//
//                    return $this->hash(CRNRSTN_RESOURCE_ALL);
//
//                }
//
//                return CRNRSTN_RESOURCE_ALL;
//
//            }
//
//            //
//            // WE SHOULD HAVE THIS VALUE BY NOW. IF EMPTY, HOOOSTON...VE HAF PROBLEM!
//            if(!isset(self::$env_key_hash_config_ARRAY[self::$config_serial])){
//
//                if(self::$env_key_hash_config_ARRAY[self::$config_serial] == ''){
//
//                    error_log(__LINE__  . ' crnrstn FAILED_ENVIRONMENTAL_DETECTION. [' . print_r($this->terminate_configuration_error_ARRAY, true) . '].');
//                    $this->terminate_configuration_error_ARRAY['FAILED_ENVIRONMENTAL_DETECTION'] = 'ERROR :: we have processed ALL defined environmental resources and were unable to detect running environment with the ' . self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'][self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER]] . ' hashed CRNRSTN :: config serial [' . self::$config_serial . '].';
//                    $this->error_log('ERROR :: we have processed ALL defined environmental resources and were unable to detect running environment with the ' . self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'][self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER]] . ' hashed CRNRSTN :: config serial [' . self::$config_serial . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    //
//                    // HOOOSTON...VE HAF PROBLEM!
//                    //throw new Exception('CRNRSTN :: Initialization Error :: Environmental detection failed to match a sufficient number of $_SERVER parameters to the servers configuration and therefore DID NOT successfully initialize CRNRSTN :: on server ' . $_SERVER['SERVER_NAME'] . ' (' . $_SERVER['SERVER_ADDR'] . ')');
//                    $this->system_terminate('config_detection_error_help');
//
//                    exit();
//
//                }
//
//            }
//
//            if(!isset(self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]])){
//
//                //error_log(__LINE__ . ' crnrstn return CRNRSTN_RESOURCE_ALL for ENV KEY.');
//                //return CRNRSTN_RESOURCE_ALL;
//                return '';
//
//            }
//
//            $this->error_log('Returning detected environment [' . self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]] . '] as the selected running environment.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//            return self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]];
//
//        }catch(Exception $e){
//
//            //
//            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
//            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);
//
//            //
//            // RETURN FALSE.
//            return false;
//
//        }
//
//    }

    public function return_env_key($output_hash = false){
        // Thursday, November 2, 2023 @ 0541 hrs.

        //if(isset(self::$env_key_hash_config_ARRAY[self::$config_serial])){
        if(isset(self::$env_key_config_ARRAY[self::$config_serial])){

            //
            // NOW LOW LEVEL FOR
            // ADMINISTRATIVE SUPPORT.
            // Tuesday, November 7, 2023 @ 0404 hrs.
            if($output_hash !== false){

                return self::$env_key_hash_config_ARRAY[self::$config_serial];

            }

            return self::$env_key_config_ARRAY[self::$config_serial][self::$env_key_hash_config_ARRAY[self::$config_serial]];

        }

        return '';

    }

    public function return_timezone_syntax_array($output_type = 'ARRAY'){

        $timezone_syntax_ARRAY = DateTimeZone::listIdentifiers();

        switch($output_type){
            case 'array_string':

                $tmp_str = '';
                foreach($timezone_syntax_ARRAY as $index => $timezone){

                    $tmp_str .= '\'' . $timezone .'\' => \'' . $timezone . '\', ';

                }

                //
                // REMOVE TRAILING COMMA.
                $tmp_str = $this->strrtrim($tmp_str, ',');

                return $tmp_str;

            break;
            case 'array_string_lower':

                $tmp_str = '';
                foreach($timezone_syntax_ARRAY as $index => $timezone){

                    $timezone = strtolower($timezone);
                    $tmp_str .= '\'' . $timezone .'\' => \'' . $timezone . '\', ';

                }

                //
                // REMOVE TRAILING COMMA.
                $tmp_str = $this->strrtrim($tmp_str, ',');

                return $tmp_str;

            break;
            case 'array_string_upper':

                $tmp_str = '';
                foreach($timezone_syntax_ARRAY as $index => $timezone){

                    $timezone = strtoupper($timezone);
                    $tmp_str .= '\'' . $timezone .'\' => \'' . $timezone . '\', ';

                }

                //
                // REMOVE TRAILING COMMA.
                $tmp_str = $this->strrtrim($tmp_str, ',');

                return $tmp_str;

            break;
            default:
                //ARRAY.

                return $timezone_syntax_ARRAY;

            break;

        }

    }

    public function return_loggingProfile(){

        return $this->log_initial_profile_ARRAY;

    }

    public function return_endpointProfile(){

        return $this->log_initial_profile_meta_ARRAY;

    }

    public function start_time(){

        return date("Y-m-d H:i:s", $this->starttime);

    }

    public function wall_time(){

        $timediff = $this->microtime_float() - $this->starttime;

        return substr($timediff, 0, -8);

    }

    /**
     * SOURCE :: NUSOAP.PHP - http://sourceforge.net/projects/nusoap/
     * returns the time in ODBC canonical form with microseconds
     *
     * @return string The time in ODBC canonical form with microseconds
     * @access public
     */
    public function microtime_float(){

        //list($usec, $sec) = explode(' ', microtime());
        //return ((float)$usec + (float)$sec);

        if(function_exists('gettimeofday')){

            $tod = gettimeofday();
            $sec = $tod['sec'];
            $usec = $tod['usec'];

        }else{

            $sec = time();
            $usec = 0;

        }

        return $sec . '.' . sprintf('%06d', $usec);

    }

    public function return_micro_time(){

        return self::$oLogger->returnMicroTime();

    }

    public function pretty_elapsed_time(){

        $tmp_runtime = $this->wall_time();
        $tmp_microsecs_explode = explode(".", $tmp_runtime);

        return $this->return_pretty_delta_time($tmp_runtime, $tmp_microsecs_explode[1], 'ELAPSED_VERBOSE');

    }

    public function return_query_date_time_stamp(){

        //$ts = date("Y-m-d H:i:s", time());

        return date("Y-m-d H:i:s", time());

    }

    public function return_client_header_value($header_attribute, $index = 0){

        if(!isset($this->oCRNRSTN_ENV)){

            return NULL;

        }

        return $this->oCRNRSTN_ENV->return_client_header_value($header_attribute, $index);

    }

    public function return_language_iso_profile($output_type = 'array'){

        /*
        $tmp_ARRAY[$i]['locale_identifier>'] = $oCRNRSTN_LANG_MGR->return_lang_pref_data('locale_identifier', $i);
        $tmp_ARRAY[$i]['region_variant>'] = $oCRNRSTN_LANG_MGR->return_lang_pref_data('region_variant', $i);
        $tmp_ARRAY[$i]['factor_weighting>'] = $oCRNRSTN_LANG_MGR->return_lang_pref_data('factor_weighting', $i);
        $tmp_ARRAY[$i]['iso_language_nomination>'] = $oCRNRSTN_LANG_MGR->return_lang_pref_data('iso_language_nomination', $i);
        $tmp_ARRAY[$i]['native_nomination>'] = $oCRNRSTN_LANG_MGR->return_lang_pref_data('native_nomination', $i);
        $tmp_ARRAY[$i]['iso_639-1_2002>'] = $oCRNRSTN_LANG_MGR->return_lang_pref_data('iso_639-1_2002', $i);
        $tmp_ARRAY[$i]['iso_639-2_1998>'] = $oCRNRSTN_LANG_MGR->return_lang_pref_data('iso_639-2_1998', $i);
        $tmp_ARRAY[$i]['iso_639-3_2007>'] = $oCRNRSTN_LANG_MGR->return_lang_pref_data('iso_639-3_2007', $i);
        $tmp_ARRAY[$i]['locale_identifier>'] = $oCRNRSTN_LANG_MGR->return_lang_pref_data('locale_identifier', $i);

        */

        return $this->oCRNRSTN_TRM->ssdtl_response_http_language_preference($output_type);

    }

    public function return_crnrstn_language_manager(){

        return $this->oCRNRSTN_LANG_MGR;

    }

    public function chunkPageData($tmp_page_content, $max_len){

        $oChunkRestrictData = new crnrstn_chunk_restrictor($tmp_page_content, $max_len, $this);

        return $oChunkRestrictData;

    }

    //
    // SOURCE :: https://stackoverflow.com/questions/1846202/php-how-to-generate-a-random-unique-alphanumeric-string
    // COMMENT :: https://stackoverflow.com/a/13733588
    // AUTHOR :: Scott :: https://stackoverflow.com/users/1698153/scott
    public function generate_new_key($len = 32, $char_selection = NULL, $system_hashed_return = false, $algorithm_override = NULL, $binary_return = false){

        //
        // $char_selection = NULL [OR (int) 0]
        //      $codeAlphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZ
        //                      abcdefghijklmnopqrstuvwxyz
        //                      0123456789
        //
        // $char_selection = '01'
        //      $codeAlphabet = 01
        //
        // $char_selection = (int) -3
        //      $codeAlphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZ
        //                      abcdefghijklmnopqrstuvwxyz
        //                      0123456789:+=_- )(*$#@!~.
        //
        // $char_selection = (int) -2
        //      $codeAlphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZ
        //                      abcdefghijklmnopqrstuvwxyz
        //                      0123456789{}[]:+=_- )(*&%$#@!~?.
        //
        // $char_selection = (int) -1
        //      $codeAlphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZ
        //                      abcdefghijklmnopqrstuvwxyz
        //                      0123456789{}[]:;\"\'|\\+=_- )(*&^%$#@!~
        //                      `?/>.<,   '
        //
        // NOTE: $char_selection = -1 WILL USE *ALL* CHARACTERS ACROSS
        //       ALL DIMENSIONS IN THE KNOWN ASCII UNIVERSE FOR SYSTEM
        //       KEY GENERATION. THERE ARE SOME CHARACTER OMISSIONS TO
        //       NOTE, HOWEVER. $char_selection = -1 EVOKES *ALL*
        //       CHARACTERS EXCEPT:
        //          - THE SEQUENCE \e ESCAPE KEY (ESC or 0x1B (27) in
        //            ASCII), AND
        //          - WE'RE NOT SPLITTING HAIRS CHOOSING BETWEEN
        //            SEQUENCE \n LINEFEED (LF or 0x0A (10) in ASCII)
        //            AND THE SEQUENCE \r CARRIAGE RETURN (CR or 0x0D
        //            (13) in ASCII) AS I JUST LET THE PHPSTORM IDE
        //            CHOOSE HOW TO CONVEY THE ENTER KEY TO TEXT, AND
        //          - ALSO SCREW BOTH \f FORM FEED (FF or 0x0C (12) in
        //            ASCII) AND \v VERTICAL TAB (VT or 0x0B (11) in
        //            ASCII) SEQUENCES; WE DO NOT USE THESE CHARACTERS
        //            FOR SYSTEM KEY GENERATION.
        //
        // NOTE: $char_selection = -3 PRODUCES A LITTLE MORE VARIATION IN
        //       OUTPUT KEY (OVER $char_selection = NULL); IT HAS JUST A
        //       FEW MORE CHARACTERS ADDED TO THE SET BEYOND THE PLAIN
        //       ALPHA-NUMERIC ONES. -3 IS THE COOLEST...HOWEVER...BECAUSE
        //       THESE NEW CHARACTERS WERE HAND SELECTED FOR BEING THE
        //       NICEST (imho) TO WORK WITH AS DATA IN THE DATA
        //       HANDLING WORLD.
        //
        //       TLDR; $char_selection = -3 PRODUCES CSV SAFE DATA. THE
        //       OUTPUT HAS NO QUOTES, NO COMMAS, NO SEMI-COLONS...ETC.,
        //       BUT IT HAS THE MOST DISTINCT NUMBER OF CHARACTERS FOR
        //       THE STRONGEST POSSIBLE VARIATION IN SYSTEM KEY
        //       GENERATION OUTPUT BY CRNRSTN ::
        //
        //       Wednesday, December 6, 2023 @ 2102 hrs.
        //
        // https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double
        $token = "";

        if(!isset($char_selection)){

            $char_selection = 0;

        }

        if(!isset($len)){

            if(isset(self::$oCRNRSTN_CONFIG_MGR)){

                $len = $this->get_resource('salt_length', 0, 'CRNRSTN::RESOURCE::GENERAL_SETTINGS');

                if(!is_numeric($len)){

                    $len = (int) self::$salt_string_length;

                }

            }else{

                $len = (int) self::$salt_string_length;

            }

        }else{

            if(!is_numeric($len)){

                //
                // IT WOULD CERTAINLY APPEAR THAT THIS
                // IS NOT A VALID NUMBER FOR THE
                // REQUESTED OPERATION.
                //
                // WE SHALL RUN AN INVALID CALCULATION.
                //
                // THIS MAY BE THE ONLY WAY THAT AN
                // APPLICATION WHICH ABSOLUTELY LOVES
                // NUMBERS (AS MUCH AS CRNRSTN :: HAS
                // BEEN LOVING THE NUMBERS LATELY, AND
                // EVEN IN THE MIDST OF "THESE ECONOMIC
                // TIMES" AT THAT)...COULD EVEN BE ABLE
                // TO ACQUIRE AN AUTHENTIC NaN (PLEASE
                // READ AS "BAD DATA", OR EVEN BETTER,
                // ...A PROPER SHIT VALUE) VALUE THAT
                // CAN BE RELIABLY RETURNED WITH
                // CONFIDENCE BY CRNRSTN ::
                //
                // CRNRSTN :: <3's
                //          ...CRNRSTN_INTEGER's 4LIFE!
                //
                // Monday, December 4, 2023 @ 1117 hrs.
                //
                // SEE, https://www.php.net/manual/en/function.is-nan.php
                $tmp_int = sqrt(-1);

                $tmp_len = (int) $this->get_resource('salt_length', 0, 'CRNRSTN::RESOURCE::GENERAL_SETTINGS');

                if(!is_numeric($tmp_len)){

                    $tmp_len = (int) self::$salt_string_length;

                }

                $this->error_log('An invalid length, (' . $this->gettype($len) . ') ' .
                    strval($tmp_int) . ', was provided for system key generation. A default value from system settings,' .
                    ' (' . $this->gettype($tmp_len) . ') ' . strval($tmp_len) . ' , has manually been applied.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                $len = (int) $tmp_len;

            }else{

                $len = (int) $len;

            }

        }

        switch($char_selection){
            case 0:

                $codeAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $codeAlphabet .= "abcdefghijklmnopqrstuvwxyz";
                $codeAlphabet .= "0123456789";

            break;
            case -1:

                $codeAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $codeAlphabet .= "abcdefghijklmnopqrstuvwxyz";
                $codeAlphabet .= "0123456789";
                $codeAlphabet .= "{}[]:;\"\'|\\+=_- )(*&^%$#@!~.
                `?/><,   '";

            break;
            case -2:

                $codeAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $codeAlphabet .= "abcdefghijklmnopqrstuvwxyz";
                $codeAlphabet .= "0123456789";
                $codeAlphabet .= "{}[]:;+=_- )(*&%$#@!~.?,";

            break;
            case -3:

                $codeAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $codeAlphabet .= "abcdefghijklmnopqrstuvwxyz";
                $codeAlphabet .= "0123456789";
                $codeAlphabet .= ":+=_- )(*$#@!~.";

            break;
            default:
                //NULL

                $codeAlphabet = strval($char_selection);

            break;

        }

        $max = strlen($codeAlphabet);       // EDITED FROM SOURCE. SEE, https://stackoverflow.com/a/13733588.

        if(function_exists('random_int')){

            for($i = 0; $i < $len; $i++){

                $token .= $codeAlphabet[random_int(0, $max - 1)];

            }

        }else{

            for($i = 0; $i < $len; $i++){

                $token .= $codeAlphabet[$this->crypto_rand_secure(0, $max - 1)];

            }

        }

        if($system_hashed_return !== false){

            return $this->hash($token, $algorithm_override, $binary_return);

        }

        return $token;

    }

    //
    // SOURCE :: https://stackoverflow.com/questions/1846202/php-how-to-generate-a-random-unique-alphanumeric-string
    // COMMENT :: https://stackoverflow.com/a/13733588
    // AUTHOR :: Scott :: https://stackoverflow.com/users/1698153/scott
    private function crypto_rand_secure($min, $max){

        $range = $max - $min;
        if($range < 1) return $min; // not so random...

        $log    = ceil(log($range, 2));
        $bytes  = (int) ($log / 8) + 1; // length in bytes
        $bits   = (int) $log + 1; // length in bits
        $filter = (int) (1 << $bits) - 1; // set all lower bits to 1

        do{

            $rnd = hexdec(bin2hex(openssl_random_pseudo_bytes($bytes)));
            $rnd = $rnd & $filter; // discard irrelevant bits

        }while($rnd > $range);

        return $min + $rnd;

    }

    public function elapsed_delta_time($watch_key, $decimal = 8){

        if(!isset(self::$m_starttime[$watch_key])){

            self::$m_starttime[$watch_key] = $this->microtime_float();

            $timediff = self::$m_starttime[$watch_key] - self::$m_starttime[$watch_key];

            $len = $decimal * -1;

            return substr($timediff, 0, $len);

        }else{

            $timediff = $this->microtime_float() - self::$m_starttime[$watch_key];

            $len = $decimal * -1;

            return substr($timediff, 0, $len);

        }

    }

    public function return_pretty_delta_time($delta_secs, $microsecs = 0, $mode = 'ELAPSED_VERBOSE'){

        $microsecs = '0.' . $microsecs;
        switch($mode){
            case 'ELAPSED':

                $tmp_output = $this->elapsed($delta_secs, $microsecs);

            break;
            case 'ELAPSED_VERBOSE':

                //
                // SOURCE :: http://php.net/manual/en/function.time.php
                $tmp_output = $this->elapsed_verbose($delta_secs, $microsecs);

            break;

        }

        return $tmp_output;

    }

    # SOURCE :: http://php.net/manual/en/function.time.php
    private function elapsed_from_current($secs){

        $ts = time();
        $delta_secs = $ts - $secs;

        $bit = array(
            self::$lang_content_ARRAY['Y'] => $delta_secs / 31556926 % 12,
            self::$lang_content_ARRAY['W'] => $delta_secs / 604800 % 52,
            self::$lang_content_ARRAY['D'] => $delta_secs / 86400 % 7,
            self::$lang_content_ARRAY['H'] => $delta_secs / 3600 % 24,
            self::$lang_content_ARRAY['M'] => $delta_secs / 60 % 60,
            self::$lang_content_ARRAY['S'] => $delta_secs % 60
        );

        //
        // LET'S CONFIRM LANG OPERATION
        //error_log("(146) Y->" . self::$lang_content_ARRAY['Y']);      // shows 1...not y...

        foreach($bit as $k => $v){

            if($v > 0){

                //
                // PUT IN CURFEW FOR TIME GRANULARITY
                if($k == self::$lang_content_ARRAY['Y'] || $k == self::$lang_content_ARRAY['W'] || ($k == self::$lang_content_ARRAY['D'] && $v > 1)){

                    //
                    // RETURN DEFAULT DATE FORMAT
                    if(isset($format_override)){

                        return date($format_override, $secs);

                    }else{

                        return date('m.d.Y @ H:i:s', $secs);

                    }

                }else{

                    $ret[] = $v . $k;

                }

            }

        }

        if(!isset($ret)){

            $ret[] = 'just now.';

        }else{

            if(sizeof($ret) == 0){

                $ret[] = 'just now.';

            }else{

                $ret[] = self::$lang_content_ARRAY['AGO'];

            }

        }

        return join(' ', $ret);

    }

    private function elapsed($delta_secs, $microsecs = 0){

        $bit = array(
            self::$lang_content_ARRAY['Y'] => $delta_secs / 31556926 % 12,
            self::$lang_content_ARRAY['W'] => $delta_secs / 604800 % 52,
            self::$lang_content_ARRAY['D'] => $delta_secs / 86400 % 7,
            self::$lang_content_ARRAY['H'] => $delta_secs / 3600 % 24,
            self::$lang_content_ARRAY['M'] => $delta_secs / 60 % 60,
            self::$lang_content_ARRAY['S'] => ($delta_secs % 60) + $microsecs
        );

        //
        // LET'S CONFIRM LANG OPERATION
        //error_log("(146) Y->" . self::$lang_content_ARRAY['Y']);      // shows 1...not y...

        foreach($bit as $k => $v){

            if($v > 0){
                //
                // PUT IN CURFEW FOR TIME GRANULARITY
                if($k == self::$lang_content_ARRAY['Y'] || $k == self::$lang_content_ARRAY['W'] || ($k == self::$lang_content_ARRAY['D'] && $v > 1)){

                    //
                    // RETURN DEFAULT DATE FORMAT
                    if(isset($format_override)){

                        return date($format_override, $delta_secs);

                    }else{

                        return date('m.d.Y @ H:i:s', $delta_secs);

                    }

                }else{

                    $ret[] = $v . $k;

                }

            }

        }

        if(!isset($ret)){

            $ret[] = 'just now.';

        }else{

            if(sizeof($ret) == 0){

                $ret[] = 'just now.';

            }else{

                $ret[] = self::$lang_content_ARRAY['AGO'];

            }

        }

        return join(' ', $ret);

    }

    # SOURCE :: http://php.net/manual/en/function.time.php
    private function elapsed_verbose($delta_secs, $microsecs = 0){

        //
        // THIS SHOULD BE EXPOSED TO THE LANGUAGE ENGINE OF THE EVIFWEB CLIENT EXTRANET. NOT HARD CODED ENGLISH....OH MY. WHAT A REQUIREMENT THIS IS.
        // RE-CRNRSTN, IT MAY NOT BE APPROPRIATE TO PUSH LANG CONSIDERATIONS. WELL, MAYBE....THIS WOULD BE A FIRST FOR CRNRSTN...
        // I DON'T WANT TO PROCEED UNTIL I AM CLEAR ABOUT LANG SUPPORT DIRECTION FOR THIS. THERE ARE IMPLICATIONS.
        // TO REALLY TAKE CARE OF THE PEOPLE, DON'T FORGET SINGULAR AND PLURAL SUPPORT FOR MULTIPLE LANG...SO 2x THE NUMBER OF FORMATS...

        //
        // WE NEED TO APPROACH THIS DIFFERENTLY TO ALLOW FOR PLURAL
        $bit = array(
            '0' => $delta_secs / 31556926 % 12,
            '1' => $delta_secs / 604800 % 52,
            '2' => $delta_secs / 86400 % 7,
            '3' => $delta_secs / 3600 % 24,
            '4' => $delta_secs / 60 % 60,
            '5' => ($delta_secs % 60) + $microsecs
        );

        $bit_singular = array(
            '0' => ' ' . self::$lang_content_ARRAY['YEAR'],
            '1' => ' ' . self::$lang_content_ARRAY['WEEK'],
            '2' => ' ' . self::$lang_content_ARRAY['DAY'],
            '3' => ' ' . self::$lang_content_ARRAY['HOUR'],
            '4' => ' ' . self::$lang_content_ARRAY['MINUTE'],
            '5' => ' ' . self::$lang_content_ARRAY['SECOND']
        );

        $bit_plural = array(
            '0' => ' ' . self::$lang_content_ARRAY['YEARS'],
            '1' => ' ' . self::$lang_content_ARRAY['WEEKS'],
            '2' => ' ' . self::$lang_content_ARRAY['DAYS'],
            '3' => ' ' . self::$lang_content_ARRAY['HOURS'],
            '4' => ' ' . self::$lang_content_ARRAY['MINUTES'],
            '5' => ' ' . self::$lang_content_ARRAY['SECONDS']
        );

        foreach($bit as $k => $v){

            if($v > 1){

                $ret[] = $v . $bit_plural[$k];
                //error_log('finite (194) test ->' . $bit_plural[$k]);

            }else{

                if($v == 1){

                    $ret[] = $v . $bit_singular[$k];
                    //error_log('finite (200) test ->' . $bit_singular[$k]);

                }

            }

        }

//        foreach($bit_singular as $k => $v){
//            if($v > 1)$ret[] = $v . $k . 's';           // APPENDING AN S FOR PLURAL IS PRIMARILY ENGLISH. WE CAN'T RELY ON THIS APPEND FOR OUR PURPOSES.
//            if($v == 1)$ret[] = $v . $k;
//        }

        if(isset($ret)){

            array_splice($ret, count($ret) - 1, 0, self::$lang_content_ARRAY['AND']);

            $tmp_output = trim(join(' ', $ret));

            $tmp_output = ltrim($tmp_output, 'and');

        }else{

            $tmp_output = $this->wall_time();

            $tmp_output .= ' secs';

        }

        return $tmp_output;

    }

    private function elapsed_verbose_from_current($secs){

        $ts = time();
        $delta_secs = $ts - $secs;

        //
        // THIS SHOULD BE EXPOSED TO THE LANGUAGE ENGINE OF THE EVIFWEB CLIENT EXTRANET. NOT HARD CODED ENGLISH....OH MY. WHAT A REQUIREMENT THIS IS.
        // RE-CRNRSTN, IT MAY NOT BE APPROPRIATE TO PUSH LANG CONSIDERATIONS. WELL, MAYBE....THIS WOULD BE A FIRST FOR CRNRSTN...
        // I DON'T WANT TO PROCEED UNTIL I AM CLEAR ABOUT LANG SUPPORT DIRECTION FOR THIS. THERE ARE IMPLICATIONS.
        // TO REALLY TAKE CARE OF THE PEOPLE, DON'T FORGET SINGULAR AND PLURAL SUPPORT FOR MULTIPLE LANG...SO 2x THE NUMBER OF FORMATS...

        //
        // WE NEED TO APPROACH THIS DIFFERENTLY TO ALLOW FOR PLURAL
        $bit = array(
            '0' => $delta_secs / 31556926 % 12,
            '1' => $delta_secs / 604800 % 52,
            '2' => $delta_secs / 86400 % 7,
            '3' => $delta_secs / 3600 % 24,
            '4' => $delta_secs / 60 % 60,
            '5' => $delta_secs % 60
        );

        $bit_singular = array(
            '0' => ' ' . self::$lang_content_ARRAY['YEAR'],
            '1' => ' ' . self::$lang_content_ARRAY['WEEK'],
            '2' => ' ' . self::$lang_content_ARRAY['DAY'],
            '3' => ' ' . self::$lang_content_ARRAY['HOUR'],
            '4' => ' ' . self::$lang_content_ARRAY['MINUTE'],
            '5' => ' ' . self::$lang_content_ARRAY['SECOND']
        );

        $bit_plural = array(
            '0' => ' ' . self::$lang_content_ARRAY['YEARS'],
            '1' => ' ' . self::$lang_content_ARRAY['WEEKS'],
            '2' => ' ' . self::$lang_content_ARRAY['DAYS'],
            '3' => ' ' . self::$lang_content_ARRAY['HOURS'],
            '4' => ' ' . self::$lang_content_ARRAY['MINUTES'],
            '5' => ' ' . self::$lang_content_ARRAY['SECONDS']
        );

        foreach($bit as $k => $v){

            if($v > 1){

                $ret[] = $v . $bit_plural[$k];
                //error_log('finite (194) test ->' . $bit_plural[$k]);

            }else{

                if($v == 1){

                    $ret[] = $v . $bit_singular[$k];
                    //error_log('finite (200) test ->' . $bit_singular[$k]);

                }

            }

        }

//        foreach($bit_singular as $k => $v){
//            if($v > 1)$ret[] = $v . $k . 's';           // APPENDING AN S FOR PLURAL IS PRIMARILY ENGLISH. WE CAN'T RELY ON THIS APPEND FOR OUR PURPOSES.
//            if($v == 1)$ret[] = $v . $k;
//        }

        array_splice($ret, count($ret) - 1, 0, self::$lang_content_ARRAY['AND']);
        $ret[] = self::$lang_content_ARRAY['AGO'];

        return join(' ', $ret);

    }

    public function return_lang_content_ARRAY(){

        return self::$lang_content_ARRAY;

    }

    private function initialize_language(){

        self::$lang_content_ARRAY['YEAR'] = 'year';
        self::$lang_content_ARRAY['YEARS'] = 'years';
        self::$lang_content_ARRAY['Y'] = 'y';
        self::$lang_content_ARRAY['WEEK'] = 'week';
        self::$lang_content_ARRAY['WEEKS'] = 'weeks';
        self::$lang_content_ARRAY['W'] = 'w';
        self::$lang_content_ARRAY['DAY'] = 'day';
        self::$lang_content_ARRAY['DAYS'] = 'days';
        self::$lang_content_ARRAY['D'] = 'd';
        self::$lang_content_ARRAY['HOUR'] = 'hour';
        self::$lang_content_ARRAY['HOURS'] = 'hours';
        self::$lang_content_ARRAY['H'] = 'h';
        self::$lang_content_ARRAY['MINUTE'] = 'minute';
        self::$lang_content_ARRAY['MINUTES'] = 'minutes';
        self::$lang_content_ARRAY['M'] = 'm';
        self::$lang_content_ARRAY['SECOND'] = 'second';
        self::$lang_content_ARRAY['SECONDS'] = 'seconds';
        self::$lang_content_ARRAY['S'] = 's';
        self::$lang_content_ARRAY['AND'] = 'and';
        self::$lang_content_ARRAY['AGO'] = 'ago';

        #error_log('finite (101)->' . print_r(self::$lang_content_ARRAY['WEEKS']));

    }

    public function catch_exception($exception_obj, $syslog_constant = LOG_DEBUG, $method = NULL, $namespace = NULL, $output_profile = NULL, $output_profile_override_meta = NULL, $wcr_override_pipe = NULL){

        $tmp_err_trace_str = $this->return_PHP_exception_trace_pretty($exception_obj->getTraceAsString());

//        error_log(__LINE__ . ' crnrstn $method[' . $method . ']. $tmp_err_trace_str[' . print_r($tmp_err_trace_str, true) . ']. die();');
//        die();

        if(strlen($tmp_err_trace_str) > 0){

            $this->error_log('PHP native exception output log trace received ::' . $tmp_err_trace_str, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

        }

        //
        // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
        self::$oLogger->catch_exception($exception_obj, $syslog_constant, $method, $namespace, $output_profile, $output_profile_override_meta, $wcr_override_pipe);

    }

    public function return_clean_json_string($val){

        /*
         * https://www.php.net/manual/en/json.constants.php
         *
        JSON_OBJECT_AS_ARRAY (int)
        Decodes JSON objects as PHP array. This option can be added automatically by calling
        json_decode() with the second parameter equal to true.

        json_encode('' , JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK);

        JSON_UNESCAPED_UNICODE
        Encode multibyte Unicode characters literally (default is to escape as \uXXXX).

        JSON_UNESCAPED_SLASHES
        Don't escape /.

        JSON_NUMERIC_CHECK
        Encodes numeric strings as numbers.
        */

        //
        // SOURCE :: https://www.php.net/manual/en/json.constants.php
        // AUTHOR :: majid4466 at gmail dot com :: https://www.php.net/manual/en/json.constants.php#119565
        $val = json_encode($val, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK);

        return $val;

    }

    public function return_PHP_exception_trace_pretty($exception_obj_trace_str, $format = 'ERROR_LOG'){

        switch($format){
            case 'HTML':

                $exception_obj_trace_str = $this->proper_replace('\n', '<br>', $exception_obj_trace_str);
                $exception_obj_trace_str = $this->proper_replace('
', '<br>', $exception_obj_trace_str);

            break;
            case 'TEXT':

                $exception_obj_trace_str = $this->proper_replace('\n', '
', $exception_obj_trace_str);

            break;
            default:

                //
                // DO NOTHING :: STRAIGHT UNPROCESSED PHP NATIVE OUT

            break;

        }

        return $exception_obj_trace_str;

    }

    public function return_log_priority_pretty($log_priority, $format = 'TEXT'){

        $tmp_output_format = trim(strtoupper($format));

        if($tmp_output_format == 'HTML'){

            //<span>LOG_EMERG</span><span>:: system is unusable.</span>

            switch($log_priority){
                case 0:

                    $tmp_priority_const = 'LOG_EMERG';
                    $tmp_priority_msg = ':: system is unusable.';

                break;
                case 1:

                    $tmp_priority_const = 'LOG_ALERT';
                    $tmp_priority_msg = ':: action must be taken immediately.';

                break;
                case 2:

                    $tmp_priority_const = 'LOG_CRIT';
                    $tmp_priority_msg = ':: critical conditions encountered.';

                break;
                case 3:

                    $tmp_priority_const = 'LOG_ERR';
                    $tmp_priority_msg = ':: error conditions encountered.';

                break;
                case 4:

                    $tmp_priority_const = 'LOG_WARNING';
                    $tmp_priority_msg = ':: warning conditions encountered.';

                break;
                case 5:

                    $tmp_priority_const = 'LOG_NOTICE';
                    $tmp_priority_msg = ':: normal, but significant, condition encountered.';

                break;
                case 6:

                    $tmp_priority_const = 'LOG_INFO';
                    $tmp_priority_msg = ':: informational message. ';

                break;
                case 7:

                    $tmp_priority_const = 'LOG_DEBUG';
                    $tmp_priority_msg = ':: debug-level message. ';

                break;
                default:

                    $tmp_priority_const = 'UNKNOWN';
                    $tmp_priority_msg = '';

                break;

            }

            $tmp_priority = '<span style="font-family:Arial, Helvetica, sans-serif; font-size:15px; text-align:left; color:#F90000; font-weight: bold;">' . $tmp_priority_const . '</span>&nbsp;<span style="font-family:Arial, Helvetica, sans-serif; font-size:15px; text-align:left; color:#000; font-weight: bold;">' . $tmp_priority_msg . '</span>';

        }else{

            switch($log_priority){
                case 0:

                    $tmp_priority = 'LOG_EMERG :: system is unusable. ';

                break;
                case 1:

                    $tmp_priority = 'LOG_ALERT :: action must be taken immediately';

                break;
                case 2:

                    $tmp_priority = 'LOG_CRIT :: critical conditions encountered';

                break;
                case 3:

                    $tmp_priority = 'LOG_ERR :: error conditions encountered';

                break;
                case 4:

                    $tmp_priority = 'LOG_WARNING :: warning conditions encountered';

                break;
                case 5:

                    $tmp_priority = 'LOG_NOTICE :: normal, but significant, condition encountered';

                break;
                case 6:

                    $tmp_priority = 'LOG_INFO :: informational message';

                break;
                case 7:

                    $tmp_priority = 'LOG_DEBUG :: debug-level message';

                break;
                default:

                    $tmp_priority = 'UNKNOWN';

                break;

            }

        }

        return $tmp_priority;

    }

    public function proper_replace($pattern, $replacement, $original_str){

        $pattern_array = array();
        $replacement_array = array();

        $pattern_array[0] = $pattern;
        $replacement_array[0] = $replacement;

        $original_str = str_replace($pattern_array, $replacement_array, $original_str);

        return $original_str;

    }

    public function error_log($str = NULL, $line_num = NULL, $method = NULL, $file = NULL, $log_silo_key = NULL){

        if(isset(self::$oLogger)){

            $tmp_oLog = self::$oLogger->error_log($str, $line_num, $method, $file, $log_silo_key);

            if(is_object($tmp_oLog)){

                $this->oLog_output_ARRAY[] = $tmp_oLog;

            }

            return true;

        }else{

            error_log($line_num . ' crnrstn [lnum ' . __LINE__ . ']. ' . $str . ' [' . $method . '].');

        }

    }

    public function return_random_theme_style(){

        $tmp_index = 0;
        $tmp_selection = rand(0, count(self::$system_theme_style_constants_ARRAY) - 1);
        //error_log(__LINE__ . ' crnrstn rand tmp_selection=[' . $tmp_selection . '].');

        foreach(self::$system_theme_style_constants_ARRAY as $index => $tmp_theme_style){

            if(($tmp_selection == $tmp_index)){

                if($tmp_theme_style == CRNRSTN_UI_RANDOM){

                    $tmp_theme_style = CRNRSTN_UI_DARKNIGHT;

                }

                $tmp_theme_style_ARRAY = $this->return_constant_profile_ARRAY($tmp_theme_style);
                //$tmp_theme_style_nom = $tmp_theme_style_ARRAY[CRNRSTN_STRING];
                $tmp_theme_style_int = $tmp_theme_style_ARRAY[CRNRSTN_INTEGER];

                //error_log(__LINE__ . ' crnrstn NOT RANDOM == [' . $tmp_theme_style_ARRAY[CRNRSTN_STRING] . '].');
                return $tmp_theme_style_int;

                break 1;

            }

            $tmp_index++;

        }

        //
        // RETURN CRNRSTN :: THEME (DEFAULT) INTEGER DATA ON INPUT DATA ERROR.
        return $this->get_resource('default_interact_ui_theme', 0, 'CRNRSTN::RESOURCE::DEFAULT_THEME');

    }

//
//    private function return_theme_style_profile_meta_ARRAY($theme_profile){
//
//        // CHASE THIS DOWN
//        //$this->current_theme_style_ARRAY['NAME'] = $tmp_meta_ARRAY['NAME'] = $tmp_theme_style_nom;
//        //$this->current_theme_style_ARRAY[CRNRSTN_INTEGER] = $tmp_meta_ARRAY[CRNRSTN_INTEGER] = $tmp_theme_style_int;
//
//
//        //error_log(__LINE__ . ' crnrstn $tmp_theme_style_int=[' . $tmp_theme_style_int . ']. $tmp_theme_style_nom=[' . $tmp_theme_style_nom . '].');
//
//        switch($theme_profile){
//            case CRNRSTN_UI_GLASS_LIGHT_COPY:
//
//                // CONCEPT WORK IN PROGRESS.
//                $tmp_meta_ARRAY['highlight.comment'] = '#7CD38B';
//                $tmp_meta_ARRAY['highlight.default'] = '#D78783';
//                $tmp_meta_ARRAY['highlight.html'] = '#868686';
//                $tmp_meta_ARRAY['highlight.keyword'] = '#CDA54A; font-weight: normal;';
//                $tmp_meta_ARRAY['highlight.string'] = '#8080DA';
//
//                $tmp_meta_ARRAY['stage.canvas.background-color'] = 'transparent';
//                $tmp_meta_ARRAY['stage.canvas.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.canvas.border-width'] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.border-color'] = '#ECEFF2';
//                $tmp_meta_ARRAY['stage.canvas.border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.content.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.content.highlight-color'] = '#F7F1E2';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-width'] = '1px';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-color'] = '#D6D6F0';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.lnum.css.background-color'] = '#D4E1EE';
//                $tmp_meta_ARRAY['stage.lnum.css.color'] = '#FFF';
//
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.inset'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-x'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-y'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.blur-radius'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.spread-radius'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.color'][] = '#BFBFBF';
//
//            break;
//            case CRNRSTN_UI_GLASS_DARK_COPY:
//
//                // CONCEPT WORK IN PROGRESS.
//                $tmp_meta_ARRAY['highlight.comment'] = '#008000';
//                $tmp_meta_ARRAY['highlight.default'] = '#191A31';
//                $tmp_meta_ARRAY['highlight.html'] = '#808080';
//                $tmp_meta_ARRAY['highlight.keyword'] = '#00B; font-weight: normal';
//                $tmp_meta_ARRAY['highlight.string'] = '#D00';
//
//                $tmp_meta_ARRAY['stage.canvas.background-color'] = 'transparent';
//                $tmp_meta_ARRAY['stage.canvas.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.canvas.border-width'] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.border-color'] = '#ECEFF2';
//                $tmp_meta_ARRAY['stage.canvas.border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.content.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.content.highlight-color'] = '#EFEFFB';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-width'] = '1px';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-color'] = '#D6D6F0';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.lnum.css.background-color'] = '#D4E1EE';
//                $tmp_meta_ARRAY['stage.lnum.css.color'] = '#FFF';
//
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.inset'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-x'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-y'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.blur-radius'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.spread-radius'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.color'][] = '#BFBFBF';
//
//            break;
//            case CRNRSTN_UI_TERMINAL:
//
//                //
//                // HARDCORE.
//                $tmp_meta_ARRAY['highlight.comment'] = '#257129';
//                $tmp_meta_ARRAY['highlight.default'] = '#41DB3C';
//                $tmp_meta_ARRAY['highlight.html'] = '#EBEBEB';
//                $tmp_meta_ARRAY['highlight.keyword'] = '#19EE28; font-weight: bold';
//                $tmp_meta_ARRAY['highlight.string'] = '#54B33E';
//
//                $tmp_meta_ARRAY['stage.canvas.background-color'] = '#131314';
//                $tmp_meta_ARRAY['stage.canvas.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.canvas.border-width'] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.border-color'] = '#000';
//                $tmp_meta_ARRAY['stage.canvas.border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.content.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.content.highlight-color'] = '#073F0B';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-width'] = '1px';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-color'] = '#0C8800';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.lnum.css.background-color'] = '#282828';
//                $tmp_meta_ARRAY['stage.lnum.css.color'] = '#1FA61F';
//
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.inset'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-x'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-y'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.blur-radius'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.spread-radius'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.color'][] = '#BFBFBF';
//
//            break;
//            case CRNRSTN_UI_PHPNIGHT:
//
//                //
//                // REPLICATION OF LEAD DEVELOPER IDE THEME. HOW CRNRSTN :: LIGHTSABER LOOKS TO ME.
//                $tmp_meta_ARRAY['highlight.comment'] = '#7EC3E6';
//                $tmp_meta_ARRAY['highlight.default'] = '#9876AA';
//                $tmp_meta_ARRAY['highlight.html'] = '#EBEBEB';
//                $tmp_meta_ARRAY['highlight.keyword'] = '#ED864A; font-weight: normal';
//                $tmp_meta_ARRAY['highlight.string'] = '#54B33E';
//
//                $tmp_meta_ARRAY['stage.canvas.background-color'] = '#131314';
//                $tmp_meta_ARRAY['stage.canvas.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.canvas.border-width'] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.border-color'] = '#9E9E9E';
//                $tmp_meta_ARRAY['stage.canvas.border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.content.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.content.highlight-color'] = '#393939';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-width'] = '1px';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-color'] = '#833131';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.lnum.css.background-color'] = '#282828';
//                $tmp_meta_ARRAY['stage.lnum.css.color'] = '#00D500';
//
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.inset'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-x'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-y'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.blur-radius'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.spread-radius'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.color'][] = '#BFBFBF';
//
//            break;
//            case CRNRSTN_UI_DARKNIGHT:
//
//                //
//                // LIKE CRNRSTN_UI_PHPNIGHT, BUT DARKER.
//                // NOTHING COULD BE DARKER. NOTHING.
//                $tmp_meta_ARRAY['highlight.comment'] = '#006498';
//                $tmp_meta_ARRAY['highlight.default'] = '#9E9D9F';
//                $tmp_meta_ARRAY['highlight.html'] = '#8C8C8C';
//                $tmp_meta_ARRAY['highlight.keyword'] = '#CB733F; font-weight: normal';
//                $tmp_meta_ARRAY['highlight.string'] = '#216D10';
//
//                $tmp_meta_ARRAY['stage.canvas.background-color'] = '#04050A';
//                $tmp_meta_ARRAY['stage.canvas.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.canvas.border-width'] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.border-color'] = '#000';
//                $tmp_meta_ARRAY['stage.canvas.border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.content.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.content.highlight-color'] = '#052E08';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-width'] = '1px';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-color'] = '#4B4444';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.lnum.css.background-color'] = '#111';
//                $tmp_meta_ARRAY['stage.lnum.css.color'] = '#1A6F1A';
//
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.inset'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-x'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-y'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.blur-radius'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.spread-radius'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.color'][] = '#BFBFBF';
//
//            break;
//            case CRNRSTN_UI_PHP:
//
//                //
//                // ALL ABOUT THE BUSINESS.
//                $tmp_meta_ARRAY['highlight.comment'] = '#008000';
//                $tmp_meta_ARRAY['highlight.default'] = '#191A31';
//                $tmp_meta_ARRAY['highlight.html'] = '#808080';
//                $tmp_meta_ARRAY['highlight.keyword'] = '#00B; font-weight: normal';
//                $tmp_meta_ARRAY['highlight.string'] = '#D00';
//
//                $tmp_meta_ARRAY['stage.canvas.background-color'] = '#F2F2F2';
//                $tmp_meta_ARRAY['stage.canvas.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.canvas.border-width'] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.border-color'] = '#C2C7DF';
//                $tmp_meta_ARRAY['stage.canvas.border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.content.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.content.highlight-color'] = '#D6D6F4';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-width'] = '1px';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-color'] = '#2C2C2C';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.lnum.css.background-color'] = '#787CAF';
//                $tmp_meta_ARRAY['stage.lnum.css.color'] = '#EEE8E8';
//
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.inset'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-x'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-y'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.blur-radius'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.spread-radius'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.color'][] = '#BFBFBF';
//
//            break;
//            case CRNRSTN_UI_GREYSKY:
//
//                //
//                // ALONE AND SAD WITH A NICE CUP OF COFFEE, A RACK MOUNTED
//                // DUAL-VIDEO CARD MAC PRO, AND FOUR (4) APPLE PRO DISPLAYS.
//                $tmp_meta_ARRAY['highlight.comment'] = '#D4762D';
//                $tmp_meta_ARRAY['highlight.default'] = '#939393';
//                $tmp_meta_ARRAY['highlight.html'] = '#C8C8C8';
//                $tmp_meta_ARRAY['highlight.keyword'] = '#212121; font-weight: normal';
//                $tmp_meta_ARRAY['highlight.string'] = '#421414';
//
//                $tmp_meta_ARRAY['stage.canvas.background-color'] = '#F5F5F5';
//                $tmp_meta_ARRAY['stage.canvas.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.canvas.border-width'] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.border-color'] = '#C3C3C3';
//                $tmp_meta_ARRAY['stage.canvas.border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.content.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.content.highlight-color'] = '#DBDBDB';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-width'] = '1px';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-color'] = '#333';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.lnum.css.background-color'] = '#A5A5A5';
//                $tmp_meta_ARRAY['stage.lnum.css.color'] = '#E8E8E8';
//
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.inset'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-x'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-y'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.blur-radius'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.spread-radius'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.color'][] = '#BFBFBF';
//
//            break;
//            case CRNRSTN_UI_HTML:
//
//                //
//                // BE LIGHT AND HAPPY.
//                $tmp_meta_ARRAY['highlight.comment'] = '#169B2B';
//                $tmp_meta_ARRAY['highlight.default'] = '#B72620';
//                $tmp_meta_ARRAY['highlight.html'] = '#666';
//                $tmp_meta_ARRAY['highlight.keyword'] = '#C08E1A; font-weight: normal;';
//                $tmp_meta_ARRAY['highlight.string'] = '#2020BD';
//
//                $tmp_meta_ARRAY['stage.canvas.background-color'] = '#F3F0F0';
//                $tmp_meta_ARRAY['stage.canvas.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.canvas.border-width'] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.border-color'] = '#80A0DD';
//                $tmp_meta_ARRAY['stage.canvas.border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.content.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.content.highlight-color'] = '#EBDCB8';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-width'] = '1px';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-color'] = '#333';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.lnum.css.background-color'] = '#3F6EC9';
//                $tmp_meta_ARRAY['stage.lnum.css.color'] = '#F3F0F0';
//
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.inset'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-x'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-y'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.blur-radius'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.spread-radius'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.color'][] = '#BFBFBF';
//
//            break;
//            case CRNRSTN_UI_DAYLIGHT:
//
//                //
//                // LIKE CRNRSTN_UI_HTML BUT...LIGHTER. NOTHING COULD BE LIGHTER.
//                $tmp_meta_ARRAY['highlight.comment'] = '#5AC86C';
//                $tmp_meta_ARRAY['highlight.default'] = '#CC6762';
//                $tmp_meta_ARRAY['highlight.html'] = '#666';
//                $tmp_meta_ARRAY['highlight.keyword'] = '#C08E1A; font-weight: normal;';
//                $tmp_meta_ARRAY['highlight.string'] = '#5F5FD0';
//
//                $tmp_meta_ARRAY['stage.canvas.background-color'] = '#F7F5F5';
//                $tmp_meta_ARRAY['stage.canvas.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.canvas.border-width'] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.border-color'] = '#80A0DD';
//                $tmp_meta_ARRAY['stage.canvas.border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.content.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.content.highlight-color'] = '#F5EDDA';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-width'] = '1px';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-color'] = '#5F5FD0';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.lnum.css.background-color'] = '#809FDB';
//                $tmp_meta_ARRAY['stage.lnum.css.color'] = '#F3F0F0';
//
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.inset'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-x'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-y'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.blur-radius'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.spread-radius'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.color'][] = '#BFBFBF';
//
//            break;
//            case CRNRSTN_UI_FEATHER:
//
//                //
//                // LIGHTER THAN DAYLIGHT.
//                $tmp_meta_ARRAY['highlight.comment'] = '#7CD38B';
//                $tmp_meta_ARRAY['highlight.default'] = '#D78783';
//                $tmp_meta_ARRAY['highlight.html'] = '#868686';
//                $tmp_meta_ARRAY['highlight.keyword'] = '#CDA54A; font-weight: normal;';
//                $tmp_meta_ARRAY['highlight.string'] = '#8080DA';
//
//                $tmp_meta_ARRAY['stage.canvas.background-color'] = '#FFF';
//                $tmp_meta_ARRAY['stage.canvas.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.canvas.border-width'] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.border-color'] = '#ECEFF2';
//                $tmp_meta_ARRAY['stage.canvas.border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.content.background-opacity'] = 'filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100); opacity: 1.0';
//                $tmp_meta_ARRAY['stage.content.highlight-color'] = '#F7F1E2';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-width'] = '1px';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-color'] = '#D6D6F0';
//                $tmp_meta_ARRAY['stage.lnum.css.right-border-style'] = 'solid';
//                $tmp_meta_ARRAY['stage.lnum.css.background-color'] = '#D4E1EE';
//                $tmp_meta_ARRAY['stage.lnum.css.color'] = '#FFF';
//
//                // * offset-x | offset-y | blur-radius | spread-radius | color */
//                // <div style="box-shadow: 2px 3px 3px 0 #bfbfbf;">
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.inset'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-x'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.offset-y'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.blur-radius'][] = '3px';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.spread-radius'][] = '';
//                $tmp_meta_ARRAY['stage.canvas.box-shadow.color'][] = '#BFBFBF';
//
//                break;
//
//        }
//
//        return $tmp_meta_ARRAY;
//
//    }

    public function return_interact_ui_theme_profile($output_format = NULL){
        // WHERE $output_format = [CRNRSTN_STRING, CRNRSTN_INTEGER, CRNRSTN_ARRAY]

        //
        // TAKE ANY VALUE (GARBAGE UGC DATA WILL QUIETLY TAKE THE DEFAULT THEME)...OR LOOK FOR A FLIPPED BIT.
        $theme_profile_ARRAY = $this->return_set_bits(self::$system_theme_style_constants_ARRAY);

        $tmp_cnt_set_bits = count($theme_profile_ARRAY);
        if($tmp_cnt_set_bits > 0){

            $theme_const = $theme_profile_ARRAY[$tmp_cnt_set_bits - 1];   // TAKE LAST FLIPPED BIT. THERE SHOULD ONLY BE ONE AT [0].

        }

        //
        // INITIALIZE PROFILE WITH SYSTEM SETTINGS DEFAULT THEME.
        if(!isset($theme_const)){

            $theme_const = $this->get_resource('default_interact_ui_theme', 0, 'CRNRSTN::RESOURCE::DEFAULT_THEME');

        }

        if(isset($output_format)){

            return $this->return_int_const_profile($theme_const, $output_format);

        }

        return $theme_const;

    }

    public function print_r_str_skinny($data = NULL, $title = NULL, $theme_profile = NULL, $line_num = NULL, $method = NULL, $file = NULL){

        //
        // TAKE ANY VALUE (GARBAGE UGC DATA WILL QUIETLY TAKE THE DEFAULT THEME)...OR LOOK FOR A FLIPPED BIT.
        if(!isset($theme_profile)){

            $theme_profile = $this->return_interact_ui_theme_profile();

        }

        //
        // FOR FUN.
        if($theme_profile == CRNRSTN_UI_RANDOM){

            $theme_profile = $this->return_random_theme_style();
            $this->random_theme_constant = $theme_profile;

        }

        $tmp_box_shadow_cnt = count($this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.offset-x']);
        $tmp_box_shadow_str = '';

        for($i = 0; $i < $tmp_box_shadow_cnt; $i++){

            $tmp_00 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.inset'][$i];
            $tmp_01 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.offset-x'][$i];
            $tmp_02 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.offset-y'][$i];
            $tmp_03 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.blur-radius'][$i];
            $tmp_04 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.spread-radius'][$i];
            $tmp_05 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.color'][$i];

            $tmp_box_shadow_str .= $tmp_00 . ' ' . $tmp_01 . ' ' . $tmp_02 . ' ' . $tmp_03 . ' ' . $tmp_04 . ' ' . $tmp_05 . ', ';

        }

        $tmp_box_shadow_str = $this->strrtrim($tmp_box_shadow_str, ', ');

        $tmp_meta = '[' . $this->return_micro_time() . ' ' . date('T') . '] [rtime ' . $this->wall_time() . ' secs]<br>';

        if(!isset($method) || $method == ''){

            if(isset($file)){

                $tmp_meta .= ' [file ' . $file . ']';

            }

        }else{

            $tmp_meta .= ' [methd ' . $method . ']';

        }

        if(isset($line_num)){

            $tmp_meta .= ' [lnum ' . $line_num . ']';

        }

        $tmp_print_r = print_r($data, true);

        $tmp_print_r = $this->proper_replace('\r\n', '\n', $tmp_print_r);
        $lines = preg_split('#\r?\n#', trim($tmp_print_r));
        $tmp_line_cnt = sizeof($lines);

        $lineHTML = implode('<br />', range(1, $tmp_line_cnt + 0));

        $tmp_hash = $this->salt(42, '01');

        $tmp_linecnt_html_out = '<div style="position: relative;"><div style="line-height:20px; position:absolute; z-index: 2; padding-right:5px; font-size:14px; font-family: Verdana, Arial, Helvetica, sans-serif; color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.color'] . '; border-right:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.right-border-width'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.right-border-style'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.right-border-color'] . '; background-color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.background-color'] . '; padding-top:25px; padding-bottom:25px; padding-left:4px;">' . $lineHTML . '</div></div>';

        if(!isset($title)){

            $tmp_title = '<div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div><div style="float:left; padding:5px 0 0 8px; text-align:left; font-family: Courier New, Courier, monospace; font-size:11px;">';
            $tmp_title .= 'Begin ' . __FUNCTION__ . '() output by C<span style="color:#F00;">R</span>NRSTN ::';
            $tmp_title .= '</div><div style="display:block; clear:both; height:0; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>';
            $title = '';

        }else{

            if($title != ''){

                $tmp_title = '<div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div><div style="float:left; padding:5px 0 0 8px; text-align:left; overflow-wrap: break-word; font-family: Courier New, Courier, monospace; font-size:11px;">';
                $tmp_title .= $title;
                $tmp_title .= '</div><div style="display:block; clear:both; height:0px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>';

            }else{

                $tmp_title = '<div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div><div style="float:left; padding:5px 0 0 8px; text-align:left; font-family: Courier New, Courier, monospace; font-size:11px;">';
                $tmp_title .= 'Begin ' . __FUNCTION__ . '() output by C<span style="color:#F00;">R</span>NRSTN ::';
                $tmp_title .= '</div><div style="display:block; clear:both; height:0; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>';

            }

        }

        $tmp_copy_clipboard_func_call_str = '&nbsp;&nbsp;&nbsp;<a href="#" onclick="copy_output_' . $tmp_hash . '(); return false;" style="font-family: Courier New, Courier, monospace; font-size:12px; color:#06C; text-align: right;">Copy to clipboard</a>';
        $tmp_copy_clipboard_func_def_str = '<script>
        function copy_output_' . $tmp_hash . '(){

            //
            // SOURCE :: https://stackoverflow.com/questions/1173194/select-all-div-text-with-single-mouse-click
            // COMMENT :: https://stackoverflow.com/a/1173319
            // AUTHOR :: Denis Sadowski :: https://stackoverflow.com/users/136482/denis-sadowski
            if(document.selection){ // IE

                var range = document.body.createTextRange();
                range.moveToElementText(document.getElementById("crnrstn_print_r_source_' . $tmp_hash . '"));
                range.select();

            }else if(window.getSelection){

                var range = document.createRange();
                range.selectNode(document.getElementById("crnrstn_print_r_source_' . $tmp_hash . '"));
                window.getSelection().removeAllRanges();
                window.getSelection().addRange(range);

            }

            //
            // SOURCE :: https://www.w3schools.com/howto/howto_js_copy_clipboard.asp
            /* Copy the text inside the text field */
            document.execCommand(\'copy\');

            /* Alert the copied text */
            //alert("Copied the text: " + document.getElementById("crnrstn_print_r_source_' . $tmp_hash . '").innerHTML);
            document.getElementById("crnrstn_print_r_display_' . $tmp_hash . '").style.backgroundColor = "' . $this->theme_attributes_ARRAY[$theme_profile]['stage.content.highlight-color'] . '";

        }
        </script>';

        $tmp_top_link_str = '';
        $tmp_module_page_key = $this->oDATA_TUNNEL_SERVICES_MGR->return_received_data('crnrstn_interact_ui_link_text_click');
        if(strlen($tmp_module_page_key) > 0){

            //
            // REQUIRES HTTPS FOR RELIABLE USE DUE TO AJAX INJECTION
            //$tmp_copy_clipboard_func_call_str = '&nbsp;&nbsp;&nbsp;<a href="#" onclick="oCRNRSTN_JS.copy_to_clipboard(\'' . $tmp_hash . '\'); return false;" style="font-family: Courier New, Courier, monospace; font-size:12px; color:#06C; text-align: right;">Copy to clipboard</a>';
            $tmp_copy_clipboard_func_call_str = '';
            $tmp_copy_clipboard_func_def_str = '';
            $tmp_top_link_str = '<a href="#" onclick="oCRNRSTN_JS.crnrstn_interact_ui_ux(\'scrolltop\', this);" rel="crnrstn_top_' . $this->session_salt() . '">Top</a>';

        }

        $tmp_title_content = '';

        if(strlen($tmp_module_page_key) < 1 || (strlen($title) > 0) || (strlen($title) < 1 && __FUNCTION__ == 'print_r')){

            $tmp_title_content = '
                <div style="padding: 5px 0 0 0; font-family: Courier New, Courier, monospace; overflow-wrap: break-word; font-size:12px; line-height: 20px; float: left; width:74%;">
                    <span style="font-family: Courier New, Courier, monospace; font-size:12px; color:#333; text-align: left;">' . $tmp_title . '</span>
                </div>';

        }

        $tmp_out = '<div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
        ' .  $tmp_copy_clipboard_func_def_str . '
        <div id="crnrstn_print_r_output_' . $tmp_hash . '" class="crnrstn_print_r_output" style="width:100%;">
            <div style="width:100%;">
                <div style="height:15px; padding: 14px 10px 3px 0; font-family: Courier New, Courier, monospace; font-size:12px; line-height: 20px; float: right; text-align: right; width:180px;">
                    ' . $tmp_top_link_str . $tmp_copy_clipboard_func_call_str . '
                </div>
                ' . $tmp_title_content . '
                <div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
            </div>
            <div id="crnrstn_print_r_highlight_color_' . $tmp_hash . '" style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;">' . $this->theme_attributes_ARRAY[$theme_profile]['stage.content.highlight-color'] . '</div>

            <div>
                <div style="box-shadow: ' . $tmp_box_shadow_str . ';">
                <div style="border: 3px solid #FFF;">
                <div style="margin: 3px 6px 0 0;">
                    <div style="' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.background-opacity'] . '; background-color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.background-color'] . '; border:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.border-width'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.border-style'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.border-color'] . '; width:100%; padding:0; margin:0; overflow-y:hidden; font-size:14px;">
                    ' . $tmp_linecnt_html_out . '

                    <div style="width:100%; overflow:scroll;">

                        <div style="' . $this->theme_attributes_ARRAY[$theme_profile]['stage.content.background-opacity'] . '; width:3000px; padding:10px; margin-top:0; margin-left:25px; padding-left:35px; line-height:20px;">
                        <code>';

        $tmp_str_out = '<div style="padding: 10px 10px 10px 10px;">';
        $tmp_str_out .= $tmp_out;

        $output = $tmp_print_r;
        $output = $this->proper_replace('<br />', '
', $output);

        if($output == '<span style="color: #DEDECB"></span>' || $output == '<span style="color: #000000"></span>' || $output == '<span style="color: #CC0000"></span>'){

            $output = '<span style="color: #DEDECB">&nbsp;</span>';

        }

        if($tmp_str_out == '<span style="color: #000"></span>'){

            $tmp_str_out = '<span style="color: #000">&nbsp;</span>';

        }

        $tmp_str_out .= '<div id="crnrstn_print_r_source_' . $tmp_hash . '" style="font-size:1px; color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.background-color'] . '; line-height:0; width:1px; height:1px; overflow:hidden;">' . nl2br(print_r($data, true)) . '</div><div></div><pre id="crnrstn_print_r_display_' . $tmp_hash . '" class="crnrstn_theme_' . $this->theme_attributes_ARRAY[$theme_profile]['NOM_STRING'] . '" style="color:' . $this->theme_attributes_ARRAY[$theme_profile]['highlight.html'] . '; line-height:19.5px;">';
        //$tmp_str_out .= print_r($output, true);
        $tmp_str_out .= $output;

        $tmp_str_out .= '</pre>';

        if($this->is_system_terminate_enabled() == true){

            $component_crnrstn_title = $this->return_component_branding_creative(false, CRNRSTN_HTML & CRNRSTN_ASSET_MODE_BASE64);

        }else{

            $component_crnrstn_title = $this->return_component_branding_creative(false, CRNRSTN_HTML);

        }

        $tmp_str_out .= '</code></div></div></div></div></div></div>
        <div style="width:100%;">
            <div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>

            ' . $component_crnrstn_title . '

            <div style="float:right; overflow-wrap: break-word; max-width:75%; padding:4px 0 5px 0; text-align:right; font-family: Courier New, Courier, monospace; line-height: 18px; font-size:11px;">' . $tmp_meta . '</div>

            <div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
        </div>
        </div></div></div>';

        $tmp_str_out .= '<div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
';

        return $tmp_str_out;

    }

    public function print_r_str($data = NULL, $title = NULL, $theme_profile = NULL, $line_num = NULL, $method = NULL, $file = NULL){

        //
        // TAKE ANY VALUE(GARBAGE==DEFAULT THEME). ...OR LOOK FOR A FLIPPED BIT.
        if(!isset($theme_profile)){

            //
            // INITIALIZE DEFAULT...FOR THE SYSTEM DEFAULT.
            $theme_profile = $this->return_interact_ui_theme_profile();

        }

        //
        // FOR FUN.
        if($theme_profile == CRNRSTN_UI_RANDOM){

            $theme_profile = $this->return_random_theme_style();
            $this->random_theme_constant = $theme_profile;

        }

        $tmp_box_shadow_cnt = count($this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.offset-x']);
        $tmp_box_shadow_str = '';

        for($i = 0; $i < $tmp_box_shadow_cnt; $i++){

            $tmp_00 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.inset'][$i];
            $tmp_01 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.offset-x'][$i];
            $tmp_02 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.offset-y'][$i];
            $tmp_03 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.blur-radius'][$i];
            $tmp_04 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.spread-radius'][$i];
            $tmp_05 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.color'][$i];

            $tmp_box_shadow_str .= $tmp_00 . ' ' . $tmp_01 . ' ' . $tmp_02 . ' ' . $tmp_03 . ' ' . $tmp_04 . ' ' . $tmp_05 . ', ';

        }

        $tmp_box_shadow_str = $this->strrtrim($tmp_box_shadow_str, ', ');

        $tmp_meta = '[' . $this->return_micro_time() . ' ' . date('T') . '] [rtime ' . $this->wall_time() . ' secs]<br>';

        if(!isset($method) || $method == ''){

            if(isset($file)){

                $tmp_meta .= ' [file ' . $file . ']';

            }

        }else{

            $tmp_meta .= ' [methd ' . $method . ']';

        }

        if(isset($line_num)){

            $tmp_meta .= ' [lnum ' . $line_num . ']';

        }

        $tmp_print_r = print_r($data, true);

        $tmp_print_r = $this->proper_replace('\r\n', '\n', $tmp_print_r);
        $lines = preg_split('#\r?\n#', trim($tmp_print_r));
        $tmp_line_cnt = sizeof($lines);

        $lineHTML = implode('<br />', range(1, $tmp_line_cnt + 0));

        $tmp_hash = $this->salt(42, '01');

        $tmp_linecnt_html_out = '<div style="position: relative;"><div style="line-height:20px; position:absolute; z-index: 2; padding-right:5px; font-size:14px; font-family: Verdana, Arial, Helvetica, sans-serif; color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.color'] . '; border-right:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.right-border-width'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.right-border-style'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.right-border-color'] . '; background-color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.background-color'] . '; padding-top:25px; padding-bottom:25px; padding-left:4px;">' . $lineHTML . '</div></div>';

        if(!isset($title)){

            $tmp_title = '<div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div><div style="float:left; padding:5px 0 0 8px; text-align:left; font-family: Courier New, Courier, monospace; font-size:11px;">';
            $tmp_title .= 'Begin ' . __FUNCTION__ . '() output by C<span style="color:#F00;">R</span>NRSTN ::';
            $tmp_title .= '</div><div style="display:block; clear:both; height:0; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>';
            $title = '';

        }else{

            if($title != ''){

                $tmp_title = '<div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div><div style="float:left; padding:5px 0 0 8px; text-align:left; overflow-wrap: break-word; font-family: Courier New, Courier, monospace; font-size:11px;">';
                $tmp_title .= $title;
                $tmp_title .= '</div><div style="display:block; clear:both; height:0px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>';

            }else{

                $tmp_title = '<div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div><div style="float:left; padding:5px 0 0 8px; text-align:left; font-family: Courier New, Courier, monospace; font-size:11px;">';
                $tmp_title .= 'Begin ' . __FUNCTION__ . '() output by C<span style="color:#F00;">R</span>NRSTN ::';
                $tmp_title .= '</div><div style="display:block; clear:both; height:0; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>';

            }

        }

        $tmp_copy_clipboard_func_call_str = '&nbsp;&nbsp;&nbsp;<a href="#" onclick="copy_output_' . $tmp_hash . '(); return false;" style="font-family: Courier New, Courier, monospace; font-size:12px; color:#06C; text-align: right;">Copy to clipboard</a>';
        $tmp_copy_clipboard_func_def_str = '<script>
        function copy_output_' . $tmp_hash . '(){

            //
            // SOURCE :: https://stackoverflow.com/questions/1173194/select-all-div-text-with-single-mouse-click
            // COMMENT :: https://stackoverflow.com/a/1173319
            // AUTHOR :: Denis Sadowski :: https://stackoverflow.com/users/136482/denis-sadowski
            if(document.selection){ // IE

                var range = document.body.createTextRange();
                range.moveToElementText(document.getElementById("crnrstn_print_r_source_' . $tmp_hash . '"));
                range.select();

            }else if(window.getSelection){

                var range = document.createRange();
                range.selectNode(document.getElementById("crnrstn_print_r_source_' . $tmp_hash . '"));
                window.getSelection().removeAllRanges();
                window.getSelection().addRange(range);

            }

            //
            // SOURCE :: https://www.w3schools.com/howto/howto_js_copy_clipboard.asp
            /* Copy the text inside the text field */
            document.execCommand(\'copy\');

            /* Alert the copied text */
            //alert("Copied the text: " + document.getElementById("crnrstn_print_r_source_' . $tmp_hash . '").innerHTML);
            document.getElementById("crnrstn_print_r_display_' . $tmp_hash . '").style.backgroundColor = "' . $this->theme_attributes_ARRAY[$theme_profile]['stage.content.highlight-color'] . '";

        }
        </script>';

        $tmp_top_link_str = '';
        $tmp_module_page_key = $this->oDATA_TUNNEL_SERVICES_MGR->return_received_data('crnrstn_interact_ui_link_text_click');
        if(strlen($tmp_module_page_key) > 0){

            //
            // REQUIRES HTTPS FOR RELIABLE USE DUE TO AJAX INJECTION
            //$tmp_copy_clipboard_func_call_str = '&nbsp;&nbsp;&nbsp;<a href="#" onclick="oCRNRSTN_JS.copy_to_clipboard(\'' . $tmp_hash . '\'); return false;" style="font-family: Courier New, Courier, monospace; font-size:12px; color:#06C; text-align: right;">Copy to clipboard</a>';
            $tmp_copy_clipboard_func_call_str = '';
            $tmp_copy_clipboard_func_def_str = '';
            $tmp_top_link_str = '<a href="#" onclick="oCRNRSTN_JS.crnrstn_interact_ui_ux(\'scrolltop\', this);" rel="crnrstn_top_' . $this->session_salt() . '">Top</a>';

        }

        $tmp_title_content = '';

        if(strlen($tmp_module_page_key) < 1 || (strlen($title) > 0) || (strlen($title) < 1 && __FUNCTION__ == 'print_r')){

            $tmp_title_content = '
                <div style="padding: 5px 0 0 0; font-family: Courier New, Courier, monospace; overflow-wrap: break-word; font-size:12px; line-height: 20px; float: left; width:74%;">
                    <span style="font-family: Courier New, Courier, monospace; font-size:12px; color:#333; text-align: left;">' . $tmp_title . '</span>
                </div>';

        }

        $tmp_out = '<div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
        ' . $tmp_copy_clipboard_func_def_str . '
        <div id="crnrstn_print_r_output_' . $tmp_hash . '" class="crnrstn_print_r_output" style="width:100%;">
            <div style="width:100%;">
                <div style="height:15px; padding: 14px 10px 3px 0; font-family: Courier New, Courier, monospace; font-size:12px; line-height: 20px; float: right; text-align: right; width:180px;">
                    ' . $tmp_top_link_str . $tmp_copy_clipboard_func_call_str . '
                </div>
                ' . $tmp_title_content . '
                <div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
            </div>
            <div id="crnrstn_print_r_highlight_color_' . $tmp_hash . '" style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;">' . $this->theme_attributes_ARRAY[$theme_profile]['stage.content.highlight-color'] . '</div>

            <div>
                <div style="box-shadow: ' . $tmp_box_shadow_str . ';">
                <div style="border: 3px solid #FFF;">
                <div style="margin: 3px 6px 0 0;">
                    <div style="' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.background-opacity'] . '; background-color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.background-color'] . '; border:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.border-width'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.border-style'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.border-color'] . '; width:100%; padding:0; margin:0; overflow-y:hidden; font-size:14px;">
                    ' . $tmp_linecnt_html_out . '

                    <div style="width:100%; overflow:scroll;">

                        <div style="' . $this->theme_attributes_ARRAY[$theme_profile]['stage.content.background-opacity'] . '; width:3000px; padding:10px; margin-top:0; margin-left:25px; padding-left:35px; line-height:20px;">
                        <code>';

        $tmp_str_out = '<div style="padding: 10px 10px 10px 10px;">';
        $tmp_str_out .= $tmp_out;

        $output = $this->highlight_text($tmp_print_r, $theme_profile);
        $output = $this->proper_replace('<br />', '
', $output);

        if($output == '<span style="color: #DEDECB"></span>' || $output == '<span style="color: #000000"></span>' || $output == '<span style="color: #CC0000"></span>'){

            $output = '<span style="color: #DEDECB">&nbsp;</span>';

        }

        if($tmp_str_out == '<span style="color: #000"></span>'){

            $tmp_str_out = '<span style="color: #000">&nbsp;</span>';

        }

        $tmp_str_out .= '<div id="crnrstn_print_r_source_' . $tmp_hash . '" style="font-size:1px; color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.background-color'] . '; line-height:0; width:1px; height:1px; overflow:hidden;">' . nl2br(print_r($data, true)) . '</div><div></div><pre id="crnrstn_print_r_display_' . $tmp_hash . '" class="crnrstn_theme_' . $this->theme_attributes_ARRAY[$theme_profile]['NOM_STRING'] . '" style="color:' . $this->theme_attributes_ARRAY[$theme_profile]['highlight.html'] . ';">';
        $tmp_str_out .= print_r($output, true);

        $tmp_str_out .= '</pre>';

        if($this->is_system_terminate_enabled() == true){

            $component_crnrstn_title = $this->return_component_branding_creative(false, CRNRSTN_HTML & CRNRSTN_ASSET_MODE_BASE64);

        }else{

            $component_crnrstn_title = $this->return_component_branding_creative(false, CRNRSTN_HTML);

        }

        $tmp_str_out .= '</code></div></div></div></div></div></div>
        <div style="width:100%;">
            <div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>

            ' . $component_crnrstn_title . '

            <div style="float:right; overflow-wrap: break-word; max-width:75%; padding:4px 0 5px 0; text-align:right; font-family: Courier New, Courier, monospace; line-height: 18px; font-size:11px;">' . $tmp_meta . '</div>

            <div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
        </div>
        </div></div></div>';

        $tmp_str_out .= '<div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
';

        return $tmp_str_out;

    }

    public function print_r($data = NULL, $title = NULL, $theme_profile = NULL, $line_num = NULL, $method = NULL, $file = NULL){

        /*
        WHERE $theme_profile =
        // CRNRSTN_UI_PHPNIGHT              // REPLICATION OF LEAD DEVELOPER IDE THEME. HOW CRNRSTN :: LIGHTSABER LOOKS TO ME.
        // CRNRSTN_UI_DARKNIGHT             // LIKE CRNRSTN_UI_PHPNIGHT, BUT DARKER. NOTHING COULD BE DARKER. NOTHING.
        // CRNRSTN_UI_PHP                   // ALL ABOUT THE BUSINESS.
        // CRNRSTN_UI_GREYSKY               // ALONE AND SAD WITH A NICE CUP OF COFFEE, A RACK MOUNTED DUAL-VIDEO CARD MAC PRO, AND FOUR (4) APPLE PRO DISPLAYS.
        // CRNRSTN_UI_HTML                  // BE LIGHT AND HAPPY.
        // CRNRSTN_UI_DAYLIGHT              // LIKE CRNRSTN_UI_HTML BUT...LIGHTER. NOTHING COULD BE LIGHTER.
        // CRNRSTN_UI_FEATHER               // LIGHTER THAN DAYLIGHT.
        // CRNRSTN_UI_GLASS_LIGHT_COPY      // UI EXPERIMENTAL
        // CRNRSTN_UI_GLASS_DARK_COPY       // UI EXPERIMENTAL
        // CRNRSTN_UI_WOOD                  // GOT WOOD?
        // CRNRSTN_UI_TERMINAL              // GREEN TEXT. BLACK BACKGROUND. HARDCORE.
        // CRNRSTN_UI_RANDOM

        */

        //
        // TAKE ANY VALUE(GARBAGE==DEFAULT THEME). ...OR LOOK FOR A FLIPPED BIT.
        if(!isset($theme_profile)){

            $theme_profile = $this->return_interact_ui_theme_profile();

        }

        //
        // FOR FUN.
        if($theme_profile == CRNRSTN_UI_RANDOM){

            $theme_profile = $this->return_random_theme_style();
            $this->random_theme_constant = $theme_profile;

        }

        $tmp_box_shadow_cnt = count($this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.offset-x']);
        $tmp_box_shadow_str = '';

        for($i = 0; $i < $tmp_box_shadow_cnt; $i++){

            $tmp_00 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.inset'][$i];
            $tmp_01 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.offset-x'][$i];
            $tmp_02 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.offset-y'][$i];
            $tmp_03 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.blur-radius'][$i];
            $tmp_04 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.spread-radius'][$i];
            $tmp_05 = $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.box-shadow.color'][$i];

            $tmp_box_shadow_str .= $tmp_00 . ' ' . $tmp_01 . ' ' . $tmp_02 . ' ' . $tmp_03 . ' ' . $tmp_04 . ' ' . $tmp_05 . ', ';

        }

        $tmp_box_shadow_str = $this->strrtrim($tmp_box_shadow_str, ', ');

        $tmp_meta = '[' . $this->return_micro_time() . ' ' . date('T') . '] [rtime ' . $this->wall_time() . ' secs]<br>';

        if(!isset($method) || $method == ''){

            if(isset($file)){

                $tmp_meta .= ' [file ' . $file . ']';

            }

        }else{

            $tmp_meta .= ' [methd ' . $method . ']';

        }

        if(isset($line_num)){

            $tmp_meta .= ' [lnum ' . $line_num . ']';

        }

        $tmp_print_r = print_r($data, true);

        $tmp_print_r = $this->proper_replace('\r\n', '\n', $tmp_print_r);
        $lines = preg_split('#\r?\n#', trim($tmp_print_r));
        $tmp_line_cnt = sizeof($lines);

        $lineHTML = implode('<br />', range(1, $tmp_line_cnt + 0));

        $tmp_hash = $this->salt(42, '01');

        //
        // NOTHING COULD BE DARKER. NOTHING.
        $tmp_linecnt_html_out = '<div style="position: relative;"><div style="line-height:20px; position:absolute; z-index: 2; padding-right:5px; font-size:14px; font-family: Verdana, Arial, Helvetica, sans-serif; color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.color'] . '; border-right:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.right-border-width'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.right-border-style'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.right-border-color'] . '; background-color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.lnum.css.background-color'] . '; padding-top:25px; padding-bottom:25px; padding-left:4px;">' . $lineHTML . '</div></div>';

        if(!isset($title)){

            $tmp_title = '<div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div><div style="float:left; padding:5px 0 0 8px; text-align:left; font-family: Courier New, Courier, monospace; font-size:11px;">';
            $tmp_title .= 'Begin ' . __FUNCTION__ . '() output by C<span style="color:#F00;">R</span>NRSTN ::';
            $tmp_title .= '</div><div style="display:block; clear:both; height:0; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>';

        }else{

            if($title != ''){

                $tmp_title = '<div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div><div style="float:left; padding:5px 0 0 8px; text-align:left; overflow-wrap: break-word; font-family: Courier New, Courier, monospace; font-size:11px;">';
                $tmp_title .= $title;
                $tmp_title .= '</div><div style="display:block; clear:both; height:0px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>';

            }else{

                $tmp_title = '<div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div><div style="float:left; padding:5px 0 0 8px; text-align:left; font-family: Courier New, Courier, monospace; font-size:11px;">';
                $tmp_title .= 'Begin ' . __FUNCTION__ . '() output by C<span style="color:#F00;">R</span>NRSTN ::';
                $tmp_title .= '</div><div style="display:block; clear:both; height:0; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>';

            }

        }

        $tmp_copy_clipboard_func_call_str = '&nbsp;&nbsp;&nbsp;<a href="#" onclick="copy_output_' . $tmp_hash . '(); return false;" style="font-family: Courier New, Courier, monospace; font-size:12px; color:#06C; text-align: right;">Copy to clipboard</a>';
        $tmp_copy_clipboard_func_def_str = '<script>
        function copy_output_' . $tmp_hash . '(){

            //
            // SOURCE :: https://stackoverflow.com/questions/1173194/select-all-div-text-with-single-mouse-click
            // COMMENT :: https://stackoverflow.com/a/1173319
            // AUTHOR :: Denis Sadowski :: https://stackoverflow.com/users/136482/denis-sadowski
            if(document.selection){ // IE

                var range = document.body.createTextRange();
                range.moveToElementText(document.getElementById("crnrstn_print_r_source_' . $tmp_hash . '"));
                range.select();

            }else if(window.getSelection){

                var range = document.createRange();
                range.selectNode(document.getElementById("crnrstn_print_r_source_' . $tmp_hash . '"));
                window.getSelection().removeAllRanges();
                window.getSelection().addRange(range);

            }

            //
            // SOURCE :: https://www.w3schools.com/howto/howto_js_copy_clipboard.asp
            /* Copy the text inside the text field */
            document.execCommand(\'copy\');

            /* Alert the copied text */
            //alert("Copied the text: " + document.getElementById("crnrstn_print_r_source_' . $tmp_hash . '").innerHTML);
            document.getElementById("crnrstn_print_r_display_' . $tmp_hash . '").style.backgroundColor = "' . $this->theme_attributes_ARRAY[$theme_profile]['stage.content.highlight-color'] . '";

        }
        </script>';

        $tmp_top_link_str = '';
        $tmp_module_page_key = $this->oDATA_TUNNEL_SERVICES_MGR->return_received_data('crnrstn_interact_ui_link_text_click');
        if(strlen($tmp_module_page_key) > 0){

            //
            // REQUIRES HTTPS FOR RELIABLE USE DUE TO AJAX INJECTION
            //$tmp_copy_clipboard_func_call_str = '&nbsp;&nbsp;&nbsp;<a href="#" onclick="oCRNRSTN_JS.copy_to_clipboard(\'' . $tmp_hash . '\'); return false;" style="font-family: Courier New, Courier, monospace; font-size:12px; color:#06C; text-align: right;">Copy to clipboard</a>';
            $tmp_copy_clipboard_func_call_str = '';
            $tmp_copy_clipboard_func_def_str = '';
            $tmp_top_link_str = '<a href="#" onclick="oCRNRSTN_JS.crnrstn_interact_ui_ux(\'scrolltop\', this);" rel="crnrstn_top_' . $this->session_salt() . '">Top</a>';

        }

        $tmp_title_content = '';

        if(strlen($tmp_module_page_key) < 1 || (strlen($title) > 0) || (strlen($title) < 1 && __FUNCTION__ == 'print_r')){

            $tmp_title_content = '
                <div style="padding: 5px 0 0 0; font-family: Courier New, Courier, monospace; overflow-wrap: break-word; font-size:12px; line-height: 20px; float: left; width:74%;">
                    <span style="font-family: Courier New, Courier, monospace; font-size:12px; color:#333; text-align: left;">' . $tmp_title . '</span>
                </div>';

        }

        $tmp_out = '<div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
        ' . $tmp_copy_clipboard_func_def_str . '
        <div id="crnrstn_print_r_output_' . $tmp_hash . '" class="crnrstn_print_r_output" style="width:100%;">
            <div style="width:100%;">
                <div style="text-align:right; height:15px; padding: 14px 10px 3px 0; font-family: Courier New, Courier, monospace; font-size:12px; line-height: 20px; float: right; text-align: right; width:180px;">
                    ' . $tmp_top_link_str . $tmp_copy_clipboard_func_call_str . '
                </div>
                ' . $tmp_title_content . '
                <div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
            </div>
            <div id="crnrstn_print_r_highlight_color_' . $tmp_hash . '" style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;">' . $this->theme_attributes_ARRAY[$theme_profile]['stage.content.highlight-color'] . '</div>

            <div>
                <div style="box-shadow: ' . $tmp_box_shadow_str . ';">
                <div style="border: 3px solid #FFF;">
                <div style="margin:3px 6px 0 0;">
                    <div style="' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.background-opacity'] . '; background-color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.background-color'] . '; border:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.border-width'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.border-style'] . ' ' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.border-color'] . '; width:100%; padding:0; margin:0; overflow-y:hidden; font-size:14px;">
                    ' . $tmp_linecnt_html_out . '

                    <div style="width:100%; overflow:scroll;">

                        <div style="' . $this->theme_attributes_ARRAY[$theme_profile]['stage.content.background-opacity'] . '; width:3000px; padding:10px; margin-top:0; margin-left:25px; padding-left:35px; line-height:20px;">
                        <code>';

        echo '<div style="padding: 10px 10px 10px 10px;">';
        echo $tmp_out;

        $output = $this->highlight_text($tmp_print_r, $theme_profile);
        $output = $this->proper_replace('<br />', '
', $output);

        if($output == '<span style="color: #DEDECB"></span>' || $output == '<span style="color: #000000"></span>' || $output == '<span style="color: #CC0000"></span>'){

            $output = '<span style="color: #DEDECB">&nbsp;</span>';

        }

        if($output == '<span style="color: #000"></span>'){

            $output = '<span style="color: #000">&nbsp;</span>';

        }

        echo '<div id="crnrstn_print_r_source_' . $tmp_hash . '" style="font-size:1px; color:' . $this->theme_attributes_ARRAY[$theme_profile]['stage.canvas.background-color'] . '; line-height:0; width:1px; height:1px; overflow:hidden;">' . nl2br(print_r($data,true)) . '</div><pre id="crnrstn_print_r_display_' . $tmp_hash . '" class="crnrstn_theme_' . $this->theme_attributes_ARRAY[$theme_profile]['NOM_STRING'] . '" style="color:' . $this->theme_attributes_ARRAY[$theme_profile]['highlight.html'] . ';">';
        print_r($output);
        echo '</pre>';

        //$tmp_cb_str = '<div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>';

        $component_crnrstn_title = $this->return_component_branding_creative(false, CRNRSTN_HTML);

        echo '</code></div></div></div></div></div></div>
        <div style="width:100%;">
            <div style="display:block; clear:both; height:4px; line-height:1px; overflow:hidden; width:100%; font-size:1px;"></div>

            ' . $component_crnrstn_title . '

            <div style="float:right; overflow-wrap: break-word; max-width:75%; padding:4px 0 5px 0; text-align:right; font-family: Courier New, Courier, monospace; line-height: 18px; font-size:11px;">' . $tmp_meta . '</div>

            <div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
        </div>
        </div></div></div>';

        echo '<div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>';

    }

    public function return_int_const_profile($resource_constant, $attribute = 'ARRAY'){

        /*
        [Tue Nov 22 18:33:14.786202 2022] [:error] [pid 49942] [client 172.16.225.1:55559]
        1557 asset mgr
        Array\n(\n
            [INTEGER] => 7322\n
            [STRING] => CRNRSTN_CSS_FRAMEWORK_HTML5_BOILERPLATE\n
            [TITLE] => HTML5 Boilerplate\n
            [VERSION] => 0.00.0000\n
            [BROWSER_COMPATIBILITY] => \n
            [DESCRIPTION] => The web's most popular front-end template, HTML5 Boilerplate helps \n                            you build fast, robust, and adaptable web apps or sites. Kick-start your project with the \n                            combined knowledge and effort of 100s of developers, all in one little package.\n    [URL] => Array\n        (\n            [0] => https://html5boilerplate.com/\n        )\n\n)\n
            [URL][0]...

        */

        return $this->oCRNRSTN_CS_CONTROLLER->return_int_const_profile($resource_constant, $attribute);

    }

    public function return_constant_profile_ARRAY($constant, $return_type = CRNRSTN_ARRAY){
        // NOTE: $constant CAN BE AN ARRAY OF INTEGER CONSTANTS FOR BATCHING META REQUESTS.
        // WHERE, $return_type = [CRNRSTN_STRING, CRNRSTN_INTEGER, CRNRSTN_ARRAY].

        $tmp_ARRAY = array();
        $return_data_type_int_const = $this->data_type_filter($return_type, CRNRSTN_INTEGER);

        //
        // DO WE HAVE AN ARRAY OF INTEGERS FOR WHICH TO GET META?
        if(is_array($constant)){

            foreach($constant as $const_index => $integer_const){

                $tmp_data_type = $this->gettype($integer_const, CRNRSTN_INTEGER);

                if(is_number($integer_const) || is_string($integer_const)){

                    switch($tmp_data_type){
                        case CRNRSTN_STRING:

                            $tmp_workshop_ARRAY = $this->return_int_const_profile((string) $integer_const);

                        break;
                        default:
                            //A NUMBER.

                            $tmp_workshop_ARRAY = $this->return_int_const_profile((int) $integer_const);

                        break;

                    }

                    switch($return_data_type_int_const){
                        case CRNRSTN_STRING:
                        case CRNRSTN_INT:
                        case CRNRSTN_INTEGER:

                            $tmp_ARRAY[$tmp_workshop_ARRAY[CRNRSTN_INTEGER]][$return_type] = $this->return_int_const_profile((int) $integer_const, $return_type);

                        break;
                        default:
                            //CRNRSTN_ARRAY

                            $tmp_ARRAY[$tmp_workshop_ARRAY[CRNRSTN_INTEGER]]['ARRAY'] = $this->return_int_const_profile((int) $integer_const, CRNRSTN_STRING);

                        break;

                    }

                }

            }

            return $tmp_ARRAY;

        }

        //
        // PROCESS NON-ARRAY UGC INPUT.
        $tmp_workshop_ARRAY = $this->return_int_const_profile($constant);

        if($tmp_workshop_ARRAY['FAMILY'] == 'UNKNOWN'){

            return NULL;

        }

        switch($return_data_type_int_const){
            case CRNRSTN_STRING:
            case CRNRSTN_INT:
            case CRNRSTN_INTEGER:

                return $this->return_int_const_profile((int) $tmp_workshop_ARRAY[CRNRSTN_INTEGER], $return_type);

            break;
            default:
                //CRNRSTN_ARRAY

                return $this->return_int_const_profile((int) $tmp_workshop_ARRAY[CRNRSTN_INTEGER]);

            break;

        }

    }

    //
    // SOURCE :: https://www.php.net/manual/en/function.base64-encode.php
    // AUTHOR :: luke at lukeoliff.com :: https://www.php.net/manual/en/function.base64-encode.php#105200
    public function encode_image($file_path, $filetype = NULL){

        //$this->error_log('$file_path=[' . $file_path . '] $filetype=[' . $filetype . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

        if(!isset($filetype)){

            $filetype = pathinfo($file_path, PATHINFO_EXTENSION);

        }

        if(is_file($file_path) || (is_string($file_path) && (strlen($file_path) > 0))){

            $this->err_message_queue_push(NULL, __CLASS__ . '::' . __METHOD__ . '() attempting to open ' . $file_path . '. ');
            $img_binary = fread(fopen($file_path, 'r'), $this->find_filesize($file_path));
            $this->err_message_queue_clear();

            $tmp_base64 = 'data:image/' . $filetype . ';base64,' . base64_encode($img_binary);

            return $tmp_base64;

        }else{

            if(!is_file($file_path)){

                $this->error_log('Error when attempting to encode an image of type [' . $filetype . ']. Not a file [' . $file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            }

            if(!is_string($file_path)){

                $this->error_log('Error when attempting to encode an image of type [' . $filetype . ']. Filepath is not string data [' . $file_path . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

            }

        }

        return NULL;

    }

    public function system_base64_integrations_clear_content_prefix($dir_filepath){

        // = $content_injection . '<img src = "">';
        return $this->oCRNRSTN_ENV->system_base64_integrations_clear_content_prefix($dir_filepath);

    }

    public function system_base64_integrations_init_content_prefix($dir_filepath, $content_prefix){

        // = $content_injection . '<img src = "">';
        return $this->oCRNRSTN_ENV->system_base64_integrations_init_content_prefix($dir_filepath, $content_prefix);

    }

    public function system_base64_integrations_clear_content_append($dir_filepath){

        // = '<img src = "">' . $content_injection;
        return $this->oCRNRSTN_ENV->system_base64_integrations_clear_content_append($dir_filepath);

    }

    public function system_base64_integrations_init_content_append($dir_filepath, $content_append){

        // = '<img src = "">' . $content_injection;
        return $this->oCRNRSTN_ENV->system_base64_integrations_init_content_append($dir_filepath, $content_append);

    }

    public function system_base64_integrations_clear_content_injection($dir_filepath){

        // = '<img src = "" ' . $content_injection . '>';
        return $this->oCRNRSTN_ENV->system_base64_integrations_clear_content_injection($dir_filepath);

    }

    public function system_base64_integrations_init_content_injection($dir_filepath, $content_injection){

        // = '<img src = "" ' . $content_injection . '>';
        return $this->oCRNRSTN_ENV->system_base64_integrations_init_content_injection($dir_filepath, $content_injection);

    }

    //
    // RETURN CRNRSTN :: RUNTIME SYSTEMS INTEGRATIONS CUSTOM IMAGE STRING DATA
    public function return_img($dir_filepath, $width = '', $height = '', $alt = '', $title = '', $link = '', $target = '', $image_output_mode = NULL){

        return $this->oCRNRSTN_ENV->return_img($dir_filepath, $width, $height, $alt, $title, $link, $target);

    }

    //
    // BASE64 SYNC INDIVIDUAL IMAGE WITH CRNRSTN :: RUNTIME
    // SYSTEMS INTEGRATIONS, AND WALK AWAY WITH PNG, JPEG,
    // AND BASE64 EVERY TIME...NO MATTER WHAT IMAGE MIME TYPE.
    // OPTIONALLY, SET TO CUSTOM IMAGE DEFAULTS.
    // RETURN IMAGE HTML STRING VIA $oCRNRSTN->return_img();
    public function system_base64_integrations_file_heal($dir_filepath, $width = '', $height = '', $alt = '', $title = '', $link = '', $target = ''){

        return $this->oCRNRSTN_ENV->system_base64_integrations_file_heal($dir_filepath, $width, $height, $alt, $title, $link, $target);

    }

    //
    // CONFIGURE CSS PROPERTIES TO BE APPLIED DIRECTLY TO
    // AN <IMG> DOM TAG FOR AN INDIVIDUAL IMAGE [PNG,
    // JPEG, BASE64] WITHIN THE CRNRSTN :: RUNTIME
    // SYSTEMS INTEGRATIONS.
    // APPLIES ONLY TO HTML WRAPPED OUTPUT DATA.
    public function system_base64_integrations_file_css_heal($dir_filepath, $inline_style = ''){

        return $this->oCRNRSTN_ENV->system_base64_integrations_file_css_heal($dir_filepath, $inline_style);

    }

    //
    // CONFIGURE JS PROPERTIES TO BE APPLIED DIRECTLY TO
    // AN <IMG> DOM TAG FOR AN INDIVIDUAL IMAGE [PNG,
    // JPEG, BASE64] WITHIN THE CRNRSTN :: RUNTIME
    // SYSTEMS INTEGRATIONS.
    // APPLIES ONLY TO HTML WRAPPED OUTPUT DATA.
    public function system_base64_integrations_file_js_heal($dir_filepath, $onclick = '', $onmouseover = '', $onmouseout = '', $onmousedown = '', $onmouseup = ''){

        return $this->oCRNRSTN_ENV->system_base64_integrations_file_js_heal($dir_filepath, $onclick, $onmouseover, $onmouseout, $onmousedown, $onmouseup);

    }

    //
    // BASE64 SYNC INDIVIDUAL FILE WITH CRNRSTN :: RUNTIME
    // SYSTEMS INTEGRATIONS...OPTIONALLY, SET TO CUSTOM
    // IMAGE DEFAULTS.
    // RETURN IMAGE HTML STRING VIA $oCRNRSTN->return_img();
    public function system_base64_integrations_file_sync($dir_filepath, $width = '', $height = '', $alt = '', $title = '', $link = '', $target = ''){

        return $this->oCRNRSTN_ENV->system_base64_integrations_file_sync($dir_filepath, $width, $height, $alt, $title, $link, $target);

    }

    //
    // SYNC AN ENTIRE CUSTOM IMAGES DIRECTORY WITH CRNRSTN :: RUNTIME
    // SYSTEMS INTEGRATIONS. WILL RECURSIVELY TRAVERSE SUB-DIRECTORY
    // STRUCTURES EXPOSING ALL APPROPRIATE IMAGE FILE TYPES TO
    // CRNRSTN :: RUNTIME SYSTEMS INTEGRATIONS WITH OPTION TO HEAL
    // ALL, WALKING AWAY...EVERY TIME...WITH PNG, JPEG, AND BASE64 NO
    // MATTER WHAT IMAGE MIME TYPE.
    public function system_base64_integrate($dir_path, $img_batch_size = 5, $heal_all_files = false){

        return $this->oCRNRSTN_ENV->system_base64_integrate($dir_path, $img_batch_size);

    }

    //
    // TIRE-KICK ALL CRNRSTN :: RUNTIME SYSTEMS INTEGRATIONS.
    public function system_base64_synchronize($data_key = NULL, $img_batch_size = 5){

        if(isset($data_key)){

            //
            // REVIEW BASE64 SITUATION FOR DATA KEY. MAKE ANY NECESSARY ADJUSTMENTS.
            return $this->oCRNRSTN_ENV->system_base64_synchronize($data_key);

        }

        return $this->oCRNRSTN_ENV->system_base64_synchronize_batch($data_key, $img_batch_size);

    }

    public function client_ip(){

        //
        // SUPPORT FOR LOWER LEVEL DDO CACHE META CALLS WHERE oCRNRSTN_IPSECURITY_MGR IS
        // NOT YET INSTANTIATED. JUST RETURN THE IP...SANS INITIALIZATION.
        if(is_object(self::$oCRNRSTN_IP_MGR)){

            return self::$oCRNRSTN_IP_MGR->clientIpAddress();

        }

        //
        // JUST DO THE WORK.
        return $this->return_ip();

    }

    //
    // Sometimes you will find that your website will not get the correct user IP after
    // adding CDN, then this function will help you
    // SOURCE :: https://www.php.net/reserved.variables.server
    // AUTHOR :: https://www.php.net/manual/en/reserved.variables.server.php#122495
    public function return_ip(){
        //
        // Whatever you do, make sure not to trust data sent from the client.
        // $_SERVER['REMOTE_ADDR'] contains the real IP address of the connecting party. That is the most
        // reliable value you can find. However, they can be behind a proxy server in which case
        // the proxy may have set the $_SERVER['HTTP_X_FORWARDED_FOR'], but this value is
        // easily spoofed. For example, it can be set by someone without a proxy, or the IP
        // can be an internal IP from the LAN behind the proxy.
        //
        // This means that if you are going to save the $_SERVER['HTTP_X_FORWARDED_FOR'], make sure you
        // also save the $_SERVER['REMOTE_ADDR'] value. E.g. by saving both values in different
        // fields in your database.If you are going to save the IP to a database as a string, make sure
        // you have space for at least 45 characters. IPv6 is here to stay and those addresses are
        // larger than the older IPv4 addresses.
        //
        // (Note that IPv6 usually uses 39 characters at most but there is also a special IPv6
        // notation for IPv4 addresses which in its full form can be up to 45 characters. So if you
        // know what you are doing you can use 39 characters, but if you just want to set and forget
        // it, use 45).
        // SOURCE :: https://stackoverflow.com/questions/3003145/how-to-get-the-client-ip-address-in-php
        // COMMENT :: https://stackoverflow.com/a/3003233
        // AUTHOR :: https://stackoverflow.com/a/3003233

        //
        // MOST TRUSTWORTHY.
        $ip = $_SERVER['REMOTE_ADDR'];

        //
        // SOURCE :: https://stackoverflow.com/questions/12435582/php-serverremote-addr-shows-ipv6/12436099
        // COMMENT :: https://stackoverflow.com/a/12436099
        // AUTHOR :: https://stackoverflow.com/users/813192/sander-steffann
        // Known prefix
        $v4mapped_prefix_hex = '00000000000000000000ffff';

        $tmp_ver = phpversion();

        if(version_compare(phpversion(), '5.4', '<')){
            // php version isn't high enough
            $v4mapped_prefix_bin = pack('H*', $v4mapped_prefix_hex);

        }else{

            // Or more readable when using PHP >= 5.4
            $v4mapped_prefix_bin = hex2bin($v4mapped_prefix_hex);

        }

        // Parse
        //$addr = $_SERVER['REMOTE_ADDR'];
        $addr_bin = inet_pton($ip);
        if( $addr_bin === FALSE ){
            // Unparsable? How did they connect?!?
            die('Invalid IP address');
        }

        // Check prefix
        if( substr($addr_bin, 0, strlen($v4mapped_prefix_bin)) == $v4mapped_prefix_bin){
            // Strip prefix
            $addr_bin = substr($addr_bin, strlen($v4mapped_prefix_bin));
        }

        // Convert back to printable address in canonical form
        $ip = inet_ntop($addr_bin);

        return $ip;

    }

    public function return_record_count($query_key){

        return 0;

    }

    public function isset_query_result_set_key(){

        return false;

    }

    public function return_database_value($result_set_key, $fieldname, $pos = 0, $json_out = false){

        try{

            return 'DATABASE COMPONENT NOT YET ENGAGED.';

            $oCRNRSTN_MySQLi = $this->oCRNRSTN_QPM->return_MySQLi($result_set_key);

            if(is_object($oCRNRSTN_MySQLi)){

                $result_handle = $this->oCRNRSTN_QPM->return_resultHandle($result_set_key);
                $batch_key = $this->oCRNRSTN_QPM->return_batchKey($result_set_key);

                if(isset($result_handle) && isset($batch_key) && isset($result_set_key) && isset($fieldname)){

                    if($json_out == true){

                        $db_resp_out = self::$oCRNRSTN_DATABASE->return_database_value($oCRNRSTN_MySQLi, $result_handle, $batch_key, $result_set_key, $fieldname, $pos);

                        //
                        // SOURCE :: https://www.php.net/manual/en/json.constants.php
                        // AUTHOR :: majid4466 at gmail dot com :: https://www.php.net/manual/en/json.constants.php#119565
                        $db_resp_out = $this->return_clean_json_string($db_resp_out);

                        return $db_resp_out;

                    }else{

                        return self::$oCRNRSTN_DATABASE->return_database_value($oCRNRSTN_MySQLi, $result_handle, $batch_key, $result_set_key, $fieldname, $pos);

                    }

                }else{

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception('Unable to return the requested MySQL data due to missing param(s)...result handle[' . $result_handle . '], batch key[' . $batch_key . '], result_set_key[' . $result_set_key . '] and/or the desired database field name[' . $fieldname . '].');

                }

            }else{

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception('Unable to return the database connection associated with the result set key [' . $result_set_key . '].');

            }

        }catch(Exception $e){

            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    //
    // SOURCE :: https://www.php.net/manual/en/function.filesize.php
    // AUTHOR :: C0nw0nk :: https://www.php.net/manual/en/function.filesize.php#119435
    public function find_filesize($file){

        if(substr(PHP_OS, 0, 3) == 'WIN'){

            exec('for %I in ("' . $file . '") do @echo %~zI', $output);
            $return = $output[0];

        }else{

            $return = filesize($file);

            // SOURCE :: https://www.php.net/manual/en/function.filesize.php
            // AUTHOR :: synnus at gmail dot com :: https://www.php.net/manual/en/function.filesize.php#121437
            //$fsobj = new COM("Scripting.FileSystemObject");
            //$f = $fsobj->GetFile($file);
            //$return = $f->Size;

        }

        return $return;

    }

    public function return_branding_creative($strip_formatting = false, $output_mode = CRNRSTN_HTML){

        return $this->oCRNRSTN_ENV->return_component_branding_creative($strip_formatting, $output_mode);

    }

    public function return_img_html($str, $width = NULL, $height = NULL, $alt = NULL, $title = NULL, $url = NULL, $target = NULL, $meta_params_ARRAY = array()){

        return $this->oCRNRSTN_ASSET_MGR->return_img_html($str, $width, $height, $alt, $title, $url, $target, $meta_params_ARRAY);

    }

    private function return_component_branding_creative($strip_formatting = false, $output_mode = NULL){

        $tmp_weighted_elements_keys_ARRAY = array();

        $output_ratio_ARRAY = array(8, 6, 10, 6, 8, 5, 3, 1, 7, 7, 7, 5, 5, 5, 3);

        $tmp_ratio_cnt = sizeof($output_ratio_ARRAY);

        for($i = 0; $i < $tmp_ratio_cnt; $i++){

            for($ii = 0; $ii < $output_ratio_ARRAY[$i]; $ii++){

                $tmp_weighted_elements_keys_ARRAY[] = self::$system_creative_element_keys_ARRAY[$i];

            }

        }

        $tmp_cnt = sizeof($tmp_weighted_elements_keys_ARRAY);
        $tmp_cnt--;
        $tmp_int = rand(0, $tmp_cnt);

        //error_log(__LINE__ . ' crnrstn ' . __METHOD__ . '[' . $tmp_int . '][' . $tmp_weighted_elements_keys_ARRAY[$tmp_int] . ']');

        if($strip_formatting == true){

            if($tmp_weighted_elements_keys_ARRAY[$tmp_int] == 'CRNRSTN ::'){

                $creative = '<div style="padding:4px 0 5px 5px; text-align:left; font-family: Courier New, Courier, monospace; font-size:11px;">C<span style="color:#F00;">R</span>NRSTN :: v' . self::$version_crnrstn . '</div>';

            }else{

                //error_log(__LINE__ . ' crnrstn ' . __METHOD__ . ' [img=' . $tmp_weighted_elements_keys_ARRAY[$tmp_int] . '][$output_mode=' . $output_mode . '].');
                $creative = '<span style="font-family: Courier New, Courier, monospace; font-size:11px;">' . $this->return_creative($tmp_weighted_elements_keys_ARRAY[$tmp_int], $output_mode) . '</span>';

            }

        }else{

            if($tmp_weighted_elements_keys_ARRAY[$tmp_int] == 'CRNRSTN ::'){

                $creative = '<div style="float:left; padding:4px 0 5px 5px; text-align:left; font-family: Courier New, Courier, monospace; font-size:11px;">C<span style="color:#F00;">R</span>NRSTN :: v' . self::$version_crnrstn . '</div>';

            }else{

//                error_log(__LINE__ . ' crnrstn ' . __METHOD__ . ' [img=' . $tmp_weighted_elements_keys_ARRAY[$tmp_int] . '][$output_mode=' . $output_mode . '].');
//                error_log(__LINE__ . ' crnrstn [' . print_r($tmp_weighted_elements_keys_ARRAY[$tmp_int], true).'][' . $output_mode . '].');
//                error_log(__LINE__ . ' crnrstn [' . print_r($this->return_creative($tmp_weighted_elements_keys_ARRAY[$tmp_int], $output_mode), true) . '][' . $output_mode . '].');
                $creative = '<div style="float:left; padding:4px 0 5px 5px; text-align:left; font-family: Courier New, Courier, monospace; font-size:11px;">' . $this->return_creative($tmp_weighted_elements_keys_ARRAY[$tmp_int], $output_mode) . '</div>';

            }

        }

        return $creative;

    }

    public function define_wildcard_resource($env_key, $resource_key, $data_authorization_profile = CRNRSTN_AUTHORIZE_RUNTIME){

        //
        // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
        // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
        // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
        // PERFORMANCE ACCELERATION BOOST.
        if($this->config_is_valid_detected_env($env_key) == true){

            $oWildCardResource = new crnrstn_wildcard_resource($resource_key, $this, $data_authorization_profile);

            return $oWildCardResource;

        }

        //
        // WE STILL NEED TO RETURN A VALID WCR OBJECT, BUT IT WILL
        // NOT TAKE DATA WRITES DUE TO IT BEING INACTIVE.
        $oWildCardResource = new crnrstn_wildcard_resource($resource_key, $this, $data_authorization_profile, false);

        return $oWildCardResource;

    }

    private function break_piped_str_to_array($piped_str, $method_as_string = NULL, $trim_method_as_string = NULL){

        try{

            $tmp_array = array();

            $tmp_array_from_pipe_ARRAY = explode('|', $piped_str);

            foreach($tmp_array_from_pipe_ARRAY as $key => $value){

                if(isset($method_as_string)){

                    $value = $this->run_method_against_content($method_as_string, $value);

                }

                if(isset($trim_method_as_string)){

                    $value = $this->run_method_against_content($trim_method_as_string, $value);

                }

                $tmp_array[] = $value;

            }

            return $tmp_array;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    private function run_method_against_content($method_as_string, $value){

        $method_as_string = trim(strtolower($method_as_string));

        $method_as_string = $this->proper_replace('(', '', $method_as_string);
        $method_as_string = $this->proper_replace(')', '', $method_as_string);
        $method_as_string = $this->proper_replace(' ', '', $method_as_string);

        try{

            switch($method_as_string){
                case 'strtoupper':

                    $value = strtoupper($value);

                break;
                case 'strtolower':

                    $value = strtolower($value);

                break;
                case 'trim':

                    $value = trim($value);

                break;
                default:

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception('CRNRSTN :: has not been configured to support the native PHP method, ' . $method_as_string);

                break;

            }

            return $value;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

        }

    }

    public function get_http_resource($param_name, $transport_protocol = NULL){

        //
        // THIS METHOD HAS BEEN REPLACED...RIGHT? Thursday, December 8, 2022 @ 2011 hrs


//        error_log(__LINE__.' []. die();');
//        die();

        if(!isset($transport_protocol)){

            $tmp_variables_order = $this->ini_get('variables_order');
            $tmp_vo_ARRAY = str_split($tmp_variables_order);

            foreach($tmp_vo_ARRAY as $key => $value){

                switch($value){
                    case 'G':

                        if(isset(self::$http_param_handle_ARRAY['GET'][$param_name])){

                            return self::$http_param_handle_ARRAY['GET'][$param_name];

                        }

                    break;
                    case 'P':

                        if(isset(self::$http_param_handle_ARRAY['POST'][$param_name])){

                            return self::$http_param_handle_ARRAY['POST'][$param_name];

                        }

                    break;

                }

            }

        }else{

            $http_protocol = strtoupper($transport_protocol);
            $http_protocol = $this->str_sanitize($http_protocol, 'http_protocol_simple');

            switch($http_protocol){
                case 'POST':
                case 'GET':

                    if(isset(self::$http_param_handle_ARRAY[$http_protocol][$param_name])){

                        return self::$http_param_handle_ARRAY[$http_protocol][$param_name];

                    }

                break;
                default:

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    $this->error_log('Unable to determine HTTP protocol from provided value of [' . $transport_protocol . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                break;

            }

        }

        return NULL;

    }

    public function ini_get($option){

        try{

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_ini_get', $option, 'ini_get_attribute_name', 'CRNRSTN::RESOURCE::PHP_INI', 0))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

            //
            // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
            // self::$oCRNRSTN_CONFIG_MGR->input_data_value($this->ini_set_ARRAY[$option], $option, 'CRNRSTN::RESOURCE::PHP_INI', 0);
            // return $this->ini_set_ARRAY[$option];
            return $tmp_result;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function config_ini_set($env_key, $option, $ini_value = NULL){

        try{

            //
            // DID CRNRSTN :: RECEIVE UGC CONFIGURATION INPUT DATA THAT IS
            // ASSIGNED TO THE CURRENTLY DETECTED ENVIRONMENT? IF NOT,
            // RUN A BYPASS HERE IN ORDER TO RECEIVE A MINOR
            // PERFORMANCE ACCELERATION BOOST.
            if($this->config_is_valid_detected_env($env_key) == true){

                //
                // WE PASS $index=0 TO MIMIC BEHAVIOR OF NATIVE PHP_INI.
                // OTHERWISE, CHANGING SETTINGS WILL n+1 ON US...WHICH IS
                // NOT NECESSARILY EXPECTED...OR NEEDED.
                // TODO :: LOAD PHP_INI GLOBAL INTO CRNRSTN :: DDO CACHE.
                // Tuesday, May 23, 2023 @ 0542 hrs.
                // self::$oCRNRSTN_CONFIG_MGR->input_data_value($ini_value, $option, 'CRNRSTN::RESOURCE::PHP_INI', 0);

                //
                // Thursday, October 26, 2023 @ 0552 hrs.
                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_ini_set', $ini_value, $option, 'CRNRSTN::RESOURCE::PHP_INI', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

                return $tmp_result;

            }

            return true;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    /*
    // Sunday, December 10, 2023 @ 0153 hrs.
    //
    // $oCRNRSTN->server_system_attribute_is_valid()
    //
    // CRNRSTN :: WILL VALIDATE UGC INPUT FOR THE FOLLOWING
    // KINDS OF SERVER ATTRIBUTES, AND CRNRSTN :: WILL
    // VALIDATE SAID INPUT AGAINST THE SERVER'S OWN
    // RUNTIME CONFIGURATION:
    //
    // RELEVANT PHP FUNCTION         SERVER ATTRIBUTE PROFILE KEY (CRNRSTN :: INTERNALS)
    // --------------------------------------------------------------------------
    // ini_restore                   => 'CRNRSTN_PHP_INI'
    // ini_set                       => 'CRNRSTN_PHP_INI'
    // ini_get                       => 'CRNRSTN_PHP_INI'
    // ini_get_all                   => 'CRNRSTN_PHP_INI'
    // get_declared_classes          => 'CRNRSTN_DECLARED_CLASSES'
    // get_extension_funcs           => 'CRNRSTN_MODULE_EXTENSION_FUNCTIONS'
    // get_defined_functions         => 'CRNRSTN_NATIVE_PHP_DEFINED_FUNCTIONS'
    // get_defined_constants         => 'CRNRSTN_PHP_DEFINED_CONSTANTS'
    // get_defined_vars              => 'CRNRSTN_PHP_DEFINED_VARIABLES'
    // extension_loaded              => 'CRNRSTN_PHP_LOADED_EXTENSIONS'
    // get_loaded_extensions         => 'CRNRSTN_PHP_LOADED_EXTENSION_MODULES'
    // openssl_get_md_methods        => 'CRNRSTN_OPENSSL_DIGEST_METHODS'
    // openssl_get_cipher_methods    => 'CRNRSTN_OPENSSL_CIPHERS'
    // hash_hmac_algos               => 'CRNRSTN_HMAC_HASH_ALGORITHMS'
    // hash_algos                    => 'CRNRSTN_HASH_ALGORITHMS'
    //
    //
    // FOR EXAMPLE:
    //
    // //
    // // IS THIS A VALID PHP.INI DIRECTIVE?
    // if($oCRNRSTN->server_system_attribute_is_valid('ini_set', 'max_execution_time') == true){
    //
    //    //
    //    // SET THIS PHP.INI DIRECTIVE.
    //    $oCRNRSTN->ini_set('max_execution_time', 30);
    //
    // }

    */
    public function ini_set($option, $ini_value = NULL){

        try{

            //
            // WE PASS $index = 0 TO MIMIC BEHAVIOR OF NATIVE PHP_INI.
            // OTHERWISE, CHANGING SETTINGS WILL n+1 ON US...WHICH IS
            // NOT NECESSARILY EXPECTED...OR NEEDED.
            //self::$oCRNRSTN_CONFIG_MGR->input_data_value($ini_value, $option, 'CRNRSTN::RESOURCE::PHP_INI', 0);

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_ini_set', $ini_value, $option, 'CRNRSTN::RESOURCE::PHP_INI', 0))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

            return $tmp_result;

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function data_type_filter($constant, $output_type = CRNRSTN_INTEGER){
        //WHERE,
        //      $constant IS A CRNRSTN :: SYSTEM DATA TYPE. E.G. (int) CRNRSTN_STRING, CRNRSTN_INT, CRNRSTN_OBJECT,...
        //      $output_type IS CRNRSTN_INTEGER, CRNRSTN_INTEGER, OR 'PHP_NATIVE' (THE DEFAULT FOR UNKNOWN TYPES).

        /*
        //
        // Tuesday, November 21, 2023 @ 0534 hrs.
        //
        // FOR REFERENCE:
        //
        // self::$datatype_master_ARRAY = array(
        // 'string'                => array('CRNRSTN_INTEGER' => CRNRSTN_STRING,           'CRNRSTN_STRING' => 'CRNRSTN_STRING',           'PHP_NATIVE' => 'string'),
        // 'int'                   => array('CRNRSTN_INTEGER' => CRNRSTN_INT,              'CRNRSTN_STRING' => 'CRNRSTN_INT',              'PHP_NATIVE' => 'int'),
        // 'integer'               => array('CRNRSTN_INTEGER' => CRNRSTN_INTEGER,          'CRNRSTN_STRING' => 'CRNRSTN_INTEGER',          'PHP_NATIVE' => 'integer'),
        // 'bool'                  => array('CRNRSTN_INTEGER' => CRNRSTN_BOOL,             'CRNRSTN_STRING' => 'CRNRSTN_BOOL',             'PHP_NATIVE' => 'bool'),
        // 'boolean'               => array('CRNRSTN_INTEGER' => CRNRSTN_BOOLEAN,          'CRNRSTN_STRING' => 'CRNRSTN_BOOLEAN',          'PHP_NATIVE' => 'boolean'),
        // 'float'                 => array('CRNRSTN_INTEGER' => CRNRSTN_FLOAT,            'CRNRSTN_STRING' => 'CRNRSTN_FLOAT',            'PHP_NATIVE' => 'float'),
        // 'double'                => array('CRNRSTN_INTEGER' => CRNRSTN_DOUBLE,           'CRNRSTN_STRING' => 'CRNRSTN_DOUBLE',           'PHP_NATIVE' => 'double'),
        // 'array'                 => array('CRNRSTN_INTEGER' => CRNRSTN_ARRAY,            'CRNRSTN_STRING' => 'CRNRSTN_ARRAY',            'PHP_NATIVE' => 'array'),
        // 'object'                => array('CRNRSTN_INTEGER' => CRNRSTN_OBJECT,           'CRNRSTN_STRING' => 'CRNRSTN_OBJECT',           'PHP_NATIVE' => 'object'),
        // 'resource'              => array('CRNRSTN_INTEGER' => CRNRSTN_RESOURCE,         'CRNRSTN_STRING' => 'CRNRSTN_RESOURCE',         'PHP_NATIVE' => 'resource'),
        // 'resource (closed)'     => array('CRNRSTN_INTEGER' => CRNRSTN_RESOURCE_CLOSED,  'CRNRSTN_STRING' => 'CRNRSTN_RESOURCE_CLOSED',  'PHP_NATIVE' => 'resource (closed)'),
        // 'unknown type'          => array('CRNRSTN_INTEGER' => CRNRSTN_UNKNOWN_TYPE,     'CRNRSTN_STRING' => 'CRNRSTN_UNKNOWN_TYPE',     'PHP_NATIVE' => 'unknown type'),
        // 'NULL'                  => array('CRNRSTN_INTEGER' => CRNRSTN_NULL,             'CRNRSTN_STRING' => 'CRNRSTN_NULL',             'PHP_NATIVE' => 'NULL')
        //
        // );

        */

        //
        // RETRIEVE INPUT DATA TYPE.
        $tmp_type = $this->gettype($constant, 'PHP_NATIVE');
        $tmp_output_type_int = self::$datatype_master_ARRAY[$tmp_type][CRNRSTN_INTEGER];

        if($tmp_output_type_int == CRNRSTN_STRING){

            $constant = strtoupper($constant);

        }

        switch($constant){
            case 'str':
            case 'string':
            case 'CRNRSTN_STRING':
            case CRNRSTN_STRING:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_STRING;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_STRING';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'string';

                    break;

                }

            break;
            case 'int':
            case 'CRNRSTN_INT':
            case CRNRSTN_INT:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_INTEGER;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_INTEGER';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'int';

                    break;

                }

            break;
            case 'integer':
            case 'CRNRSTN_INTEGER':
            case CRNRSTN_INTEGER:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_INTEGER;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_INTEGER';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'integer';

                    break;

                }

            break;
            case 'bool':
            case 'CRNRSTN_BOOL':
            case CRNRSTN_BOOL:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_BOOL;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_BOOL';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'bool';

                    break;

                }

            break;
            case 'boolean':
            case 'CRNRSTN_BOOLEAN':
            case CRNRSTN_BOOLEAN:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_BOOLEAN;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_BOOLEAN';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'boolean';

                    break;

                }

            break;
            case 'float':
            case 'CRNRSTN_FLOAT':
            case CRNRSTN_FLOAT:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_FLOAT;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_FLOAT';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'float';

                    break;

                }

            break;
            case 'double':
            case 'CRNRSTN_DOUBLE':
            case CRNRSTN_DOUBLE:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_DOUBLE;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_DOUBLE';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'double';

                    break;

                }

            break;
            case 'array':
            case 'CRNRSTN_ARRAY':
            case CRNRSTN_ARRAY:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_ARRAY;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_ARRAY';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'array';

                    break;

                }

            break;
            case 'object':
            case 'CRNRSTN_OBJECT':
            case CRNRSTN_OBJECT:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_OBJECT;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_OBJECT';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'object';

                    break;

                }

            break;
            case 'resource':
            case 'CRNRSTN_RESOURCE':
            case CRNRSTN_RESOURCE:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_RESOURCE;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_RESOURCE';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'resource';

                    break;

                }

            break;
            case 'resource (closed)':
            case 'CRNRSTN_RESOURCE_CLOSED':
            case CRNRSTN_RESOURCE_CLOSED:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_RESOURCE_CLOSED;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_RESOURCE_CLOSED';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'resource (closed)';

                    break;

                }

            break;
            case 'null':      // <-- NULL SHOULD ALWAYS BE UPPERCASE WHEN REPRESENTED AS STRING DATA.
            case 'NULL':
            case 'CRNRSTN_NULL':
            case CRNRSTN_NULL:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_NULL;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_NULL';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'NULL';

                    break;

                }

            break;
            case 'CRNRSTN_MIXED':
            case CRNRSTN_MIXED:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_MIXED;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_MIXED';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'mixed';

                    break;

                }

            break;
            case 'CRNRSTN_ICY_BITMASK':
            case CRNRSTN_ICY_BITMASK:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_ICY_BITMASK;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_ICY_BITMASK';

                    break;
                    default:
                        //PHP_NATIVE.

                        return CRNRSTN_ICY_BITMASK;

                    break;

                }

            break;
            case 'CRNRSTN_SOAP_DATA_TUNNEL':
            case CRNRSTN_SOAP_DATA_TUNNEL:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_SOAP_DATA_TUNNEL;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_SOAP_DATA_TUNNEL';

                    break;
                    default:
                        //PHP_NATIVE.

                        return CRNRSTN_SOAP_DATA_TUNNEL;

                    break;

                }

            break;
            case 'CRNRSTN_JS_CSS_PROD_MIN':
            case CRNRSTN_JS_CSS_PROD_MIN:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_JS_CSS_PROD_MIN;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_JS_CSS_PROD_MIN';

                    break;
                    default:
                        //PHP_NATIVE.

                        return CRNRSTN_JS_CSS_PROD_MIN;

                    break;

                }

            break;
            case 'CRNRSTN_CSS_ASSET_MAPPING':
            case CRNRSTN_CSS_ASSET_MAPPING:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_CSS_ASSET_MAPPING;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_CSS_ASSET_MAPPING';

                    break;
                    default:
                        //PHP_NATIVE.

                        return CRNRSTN_CSS_ASSET_MAPPING;

                    break;

                }

            break;
            default:
                //case CRNRSTN_UNKNOWN_TYPE:

                //
                // DATA TYPE OUTPUT STANDARDIZATION
                // OF CRNRSTN :: SYSTEM DATA TYPES.
                switch($output_type){
                    case 'int':
                    case 'CRNRSTN_INT':
                    case CRNRSTN_INT:
                    case 'integer':
                    case 'CRNRSTN_INTEGER':
                    case CRNRSTN_INTEGER:

                        return CRNRSTN_UNKNOWN_TYPE;

                    break;
                    case 'str':
                    case 'string':
                    case 'CRNRSTN_STRING':
                    case CRNRSTN_STRING:

                            return 'CRNRSTN_UNKNOWN_TYPE';

                    break;
                    default:
                        //PHP_NATIVE.

                        return 'unknown type';

                    break;

                }

            break;

        }

    }

    public function tidy_boolean($data, $return_data_type = CRNRSTN_BOOLEAN, $architecture = 'DEFAULT', $serialized_bit_name = NULL, $return_raw_byte_read = false){
        //
        // WHERE, $return_data_type  =  [CRNRSTN_ICY_BITMASK, CRNRSTN_SOAP_DATA_TUNNEL,
        //                              CRNRSTN_STRING, 'CRNRSTN_STRING', 'string', 'str',
        //                              CRNRSTN_INT, 'CRNRSTN_INT', 'int', CRNRSTN_INTEGER,
        //                              'CRNRSTN_INTEGER', 'integer', CRNRSTN_BOOL,
        //                              'CRNRSTN_BOOL', CRNRSTN_BOOLEAN, 'CRNRSTN_BOOLEAN',
        //                              CRNRSTN_IS_HTML, CRNRSTN_JS_CSS_PROD_MIN,
        //                              CRNRSTN_CSS_ASSET_MAPPING]
        //
        // WHERE, $architecture = ['DEFAULT', CRNRSTN_IS_HTML, CRNRSTN_ICY_BITMASK,
        //                        CRNRSTN_SOAP_DATA_TUNNEL, CRNRSTN_JS_CSS_PROD_MIN,
        //                        CRNRSTN_CSS_ASSET_MAPPING]
        //
        // Tuesday, November 21, 2023 0217 hrs.

        /*
        A MATRIX OF ALL OF THE *CURRENT OUTPUT
        POSSIBILITIES FOR BOOLEAN-ISH-TYPE
        CRNRSTN :: SYSTEM DATA ARCHITECTURES
        AND NATIVE PHP RUNTIME MEMORY DATA
        STRUCTURES/TYPES OF SIMILAR ILK.
        -----
        CRNRSTN_STRING                  ['true', 'false']
        CRNRSTN_SOAP_DATA_TUNNEL        ['TRUE', 'FALSE']
        CRNRSTN_INTEGER                 [0, 1]
        CRNRSTN_BOOLEAN                 [(bool) true, (bool) false]
        CRNRSTN_ICY_BITMASK             ['ON', 'OFF']
        CRNRSTN_IS_HTML                 ['HTML', 'TEXT']    // Wednesday, November 22, 2023 @ 0055 hrs.
        CRNRSTN_JS_CSS_PROD_MIN         ['PROD', 'DEV']     // Thursday, November 23, 2023 @ 1034 hrs.
        CRNRSTN_CSS_ASSET_MAPPING       ['ON', 'OFF']       // Thursday, November 23, 2023 @ 1142 hrs.

        E.G. WHEN $return_data_type = CRNRSTN_ICY_BITMASK, 'ON' OR
             'OFF' WILL BE RETURNED:

            THEREFORE,

                $oCRNRSTN->tidy_boolean(1, CRNRSTN_ICY_BITMASK);

            RETURNS:

                (string) ON

            TO ACQUIRE THE "IS ACTIVE" STATE FOR THE OpenSSL v1.1.1
            ENCRYPTION ROTATION SERVICES LAYER ON ANY INITIALIZED
            CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO)
            CHANNEL, THE SAME METHOD CAN BE USED.

            FOR EXAMPLE, TO CHECK TO SEE IF ENCRYPTION IS ACTIVATED
            AND RUNNING ON $_GET[] FOR ALL SYSTEM RESOURCES, USE:

                $oCRNRSTN->tidy_boolean(CRNRSTN_ENCRYPT_GET, CRNRSTN_ICY_BITMASK, CRNRSTN_ICY_BITMASK);

            IF THE CRNRSTN :: SOAP SERVICES DATA TUNNEL LAYER (SSDTL/
            PSSDTL) IS RUNNING ON HTTP/HTTPS $_GET[]...I.E., IF THE
            OpenSSL ENCRYPTION SERVICES ARE UP AND RUNNING FOR ALL DATA
            THAT IS TUNNELED THROUGH SYSTEM GENERATED <A> LINKS, THEN
            THE ABOVE METHOD CALL WOULD RETURN:

                (string) ON


            HERE ARE THE CRNRSTN :: ENCRYPTION PROFILE
            INTEGER CONSTANT SYSTEM GLOBALS.

            CRNRSTN_ENCRYPT_GET
            CRNRSTN_ENCRYPT_POST
            CRNRSTN_ENCRYPT_COOKIE
            CRNRSTN_ENCRYPT_SESSION
            CRNRSTN_ENCRYPT_DATABASE
            CRNRSTN_ENCRYPT_TUNNEL
            CRNRSTN_ENCRYPT_SOAP
            CRNRSTN_ENCRYPT_OERSL


        * Tuesday, November 21, 2023 @ 0741 hrs.

        */

        //
        // CRNRSTN :: BOOLEAN STATE COMPUTATION
        // BY ARCHITECTURE.
        switch($architecture){
            case 'CRNRSTN_CSS_ASSET_MAPPING':
            case CRNRSTN_CSS_ASSET_MAPPING:
            case 'CRNRSTN_JS_CSS_PROD_MIN':
            case CRNRSTN_JS_CSS_PROD_MIN:
            case 'CRNRSTN_ICY_BITMASK':
            case CRNRSTN_ICY_BITMASK:

                //
                // SUPPORT FOR SERIALIZED CRNRSTN ::
                // ICY_DIGITALITCC-BITMASK BITS.
                //
                // DEVELOPER NOTE: THIS UTILIZES AN
                // ARRAY OF CRNRSTN :: BITMASK OBJECTS
                // THAT ARE INITIALIZED WITH INDEXES
                // SALTED BY MD5(NAME).
                //
                // PLEASE SEE,
                //      $oCRNRSTN->initialize_serialized_bit($name, $integer_constant);
                //      $oCRNRSTN->is_serialized_bit_set($name, $integer_constant);
                //      $oCRNRSTN->toggle_serialized_bit($name, $integer_constant);
                //      $oCRNRSTN->serialized_bit_stringin($name, $bits_stringin);
                //      $oCRNRSTN->serialized_bit_stringout($name);
                if(isset($serialized_bit_name)){

                    //
                    // INPUT DATA IS ASSUMED TO BE NULL
                    // IF THE STRING IS EMPTY.
                    if(strlen($serialized_bit_name) > 0){

                        //
                        // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                        // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                        $tmp_tidy_boolean = $this->is_serialized_bit_set($serialized_bit_name, $data);

                        if($return_raw_byte_read !== false){

                            return $tmp_tidy_boolean;

                        }

                    }else{

                        //
                        // SUPPORT FOR A SINGLE SYSTEM WIDE
                        // CRNRSTN :: ICY_DIGITALITCC-
                        // BITMASK BIT.
                        //
                        // PLEASE SEE,
                        //      $oCRNRSTN->initialize_bit($integer_constant);
                        //      $oCRNRSTN->is_bit_set($integer_constant);
                        //      $oCRNRSTN->toggle_bit($integer_constant);
                        //      $oCRNRSTN->bit_stringin($bits_stringin);
                        //      $oCRNRSTN->bit_stringout();
                        //
                        // Tuesday, November 21, 2023 @ 0439 hrs.

                        //
                        // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                        // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                        $tmp_tidy_boolean = $this->is_bit_set($data);

                        if($return_raw_byte_read !== false){

                            return $tmp_tidy_boolean;

                        }

                    }

                }else{

                    //
                    // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
                    // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
                    // # # C # R # N # R # S # T # N # : : # # # #
                    // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
                    $tmp_tidy_boolean = $this->is_bit_set($data);

                    if($return_raw_byte_read !== false){

                        return $tmp_tidy_boolean;

                    }

                }

            break;
            case 'CRNRSTN_IS_HTML':
            case CRNRSTN_IS_HTML:
            case 'CRNRSTN_SOAP_DATA_TUNNEL':
            case CRNRSTN_SOAP_DATA_TUNNEL:
            default:
                // # # C # R # N # R # S # T # N # : : # # # #
                // CRNRSTN :: IS FIRST AND FOREMOST A ROBUST SOAP SERVICES LAYER.
                // Tuesday, November 21, 2023 @ 0732 hrs.
                //
                //$architecture = 'DEFAULT':
                if(is_bool($data) == true){


                    //return $data;
                    $tmp_tidy_boolean = true;

                }else{

                    if(!isset($data)){
                        //THIS FUNCTIONS LIKE A "BAD DATA" FILTER.

                        //return false;
                        $tmp_tidy_boolean = false;

                    }else{

                        //
                        // SOURCE :: https://www.php.net/manual/en/function.is-bool.php
                        // AUTHOR :: Julio Marchi :: https://www.php.net/manual/en/function.is-bool.php#124179
                        //return $this->boolean_conversion($data);
                        $tmp_tidy_boolean = $this->boolean_conversion($data);

                    }

                }

            break;

        }

        //
        // BEGIN CRNRSTN :: OUTPUT FORMATING OF THE
        // COMPUTATED BOOLEAN STATE BY ARCHITECTURE.
        switch($architecture){
            case 'CRNRSTN_SOAP_DATA_TUNNEL':
            case CRNRSTN_SOAP_DATA_TUNNEL:

                //
                // GUARANTEE A PROPER CRNRSTN :: SYSTEM INTEGER DATA TYPE.
                //
                // $oCRNRSTN->data_type_filter() RETURNS CRNRSTN_UNKNOWN_TYPE,
                // IF THE INPUT VALUE IS NOT RECOGNIZED.
                $tmp_return_data_type_int = $this->data_type_filter($return_data_type, CRNRSTN_INTEGER);

                switch($tmp_return_data_type_int){
                    case CRNRSTN_STRING:

                        if($tmp_tidy_boolean !== false){

                            return 'true';

                        }

                        return 'false';

                    break;
                    //case CRNRSTN_INT:         //<-- MOVED TO SWITCH DEFAULT FOR SUPPORT OF UNKNOWN TYPE.
                    //case CRNRSTN_INTEGER:     //<-- MOVED TO SWITCH DEFAULT FOR SUPPORT OF UNKNOWN TYPE.
                    case CRNRSTN_BOOL:
                    case CRNRSTN_BOOLEAN:
                    case CRNRSTN_SOAP_DATA_TUNNEL:

                        if($tmp_tidy_boolean !== false){

                            return 'TRUE';

                        }

                        return 'FALSE';

                    break;
                    case CRNRSTN_CSS_ASSET_MAPPING:
                    case CRNRSTN_ICY_BITMASK:

                        if($tmp_tidy_boolean !== false){

                            return 'ON';

                        }

                        return 'OFF';

                    break;
                    case CRNRSTN_JS_CSS_PROD_MIN:

                        if($tmp_tidy_boolean !== false){

                            return 'PROD';

                        }

                        return 'DEV';

                    break;
                    default:
                        //case CRNRSTN_INT:
                        //case CRNRSTN_INTEGER:
                        //case CRNRSTN_FLOAT:
                        //case CRNRSTN_DOUBLE:
                        //case CRNRSTN_ARRAY:
                        //case CRNRSTN_OBJECT:
                        //case CRNRSTN_RESOURCE:
                        //case CRNRSTN_RESOURCE_CLOSED:
                        //case CRNRSTN_UNKNOWN_TYPE:
                        //case CRNRSTN_NULL:
                        //case CRNRSTN_MIXED:

                        if($tmp_tidy_boolean !== false){

                            return 1;

                        }

                        return 0;

                    break;

                }

            break;
            case 'CRNRSTN_IS_HTML':
            case CRNRSTN_IS_HTML:

                //
                // GUARANTEE A PROPER CRNRSTN :: SYSTEM INTEGER DATA TYPE.
                //
                // $oCRNRSTN->data_type_filter() RETURNS CRNRSTN_UNKNOWN_TYPE,
                // IF THE INPUT VALUE IS NOT RECOGNIZED.
                $tmp_return_data_type_int = $this->data_type_filter($return_data_type, CRNRSTN_INTEGER);

                switch($tmp_return_data_type_int){
                    case CRNRSTN_STRING:
                    default:
                        //case CRNRSTN_INT:
                        //case CRNRSTN_INTEGER:
                        //case CRNRSTN_FLOAT:
                        //case CRNRSTN_DOUBLE:
                        //case CRNRSTN_ARRAY:
                        //case CRNRSTN_OBJECT:
                        //case CRNRSTN_RESOURCE:
                        //case CRNRSTN_RESOURCE_CLOSED:
                        //case CRNRSTN_UNKNOWN_TYPE:
                        //case CRNRSTN_NULL:
                        //case CRNRSTN_MIXED:
                        //case CRNRSTN_INT:
                        //case CRNRSTN_INTEGER:
                        //case CRNRSTN_BOOL:
                        //case CRNRSTN_BOOLEAN:
                        //case CRNRSTN_SOAP_DATA_TUNNEL:
                        //case CRNRSTN_ICY_BITMASK:
                        //case CRNRSTN_JS_CSS_PROD_MIN:
                        //case CRNRSTN_CSS_ASSET_MAPPING

                        if($tmp_tidy_boolean !== false){

                            return 'HTML';

                        }

                        return 'TEXT';

                    break;

                }

            break;
            case 'CRNRSTN_JS_CSS_PROD_MIN':
            case CRNRSTN_JS_CSS_PROD_MIN:

                //
                // GUARANTEE A PROPER CRNRSTN :: SYSTEM INTEGER DATA TYPE.
                //
                // $oCRNRSTN->data_type_filter() RETURNS CRNRSTN_UNKNOWN_TYPE,
                // IF THE INPUT VALUE IS NOT RECOGNIZED.
                $tmp_return_data_type_int = $this->data_type_filter($return_data_type, CRNRSTN_INTEGER);

                switch($tmp_return_data_type_int){
                    case CRNRSTN_STRING:
                    default:
                        //case CRNRSTN_INT:
                        //case CRNRSTN_INTEGER:
                        //case CRNRSTN_FLOAT:
                        //case CRNRSTN_DOUBLE:
                        //case CRNRSTN_ARRAY:
                        //case CRNRSTN_OBJECT:
                        //case CRNRSTN_RESOURCE:
                        //case CRNRSTN_RESOURCE_CLOSED:
                        //case CRNRSTN_UNKNOWN_TYPE:
                        //case CRNRSTN_NULL:
                        //case CRNRSTN_MIXED:
                        //case CRNRSTN_INT:
                        //case CRNRSTN_INTEGER:
                        //case CRNRSTN_BOOL:
                        //case CRNRSTN_BOOLEAN:
                        //case CRNRSTN_SOAP_DATA_TUNNEL:
                        //case CRNRSTN_ICY_BITMASK:
                        //case CRNRSTN_JS_CSS_PROD_MIN:
                        //case CRNRSTN_CSS_ASSET_MAPPING

                        if($tmp_tidy_boolean !== false){

                            return 'PROD';

                        }

                        return 'DEV';

                    break;

                }

            break;
            case 'CRNRSTN_CSS_ASSET_MAPPING':
            case CRNRSTN_CSS_ASSET_MAPPING:

                //
                // GUARANTEE A PROPER CRNRSTN :: SYSTEM INTEGER DATA TYPE.
                //
                // $oCRNRSTN->data_type_filter() RETURNS CRNRSTN_UNKNOWN_TYPE,
                // IF THE INPUT VALUE IS NOT RECOGNIZED.
                $tmp_return_data_type_int = $this->data_type_filter($return_data_type, CRNRSTN_INTEGER);

                switch($tmp_return_data_type_int){
                    case CRNRSTN_STRING:
                    default:
                        //case CRNRSTN_INT:
                        //case CRNRSTN_INTEGER:
                        //case CRNRSTN_FLOAT:
                        //case CRNRSTN_DOUBLE:
                        //case CRNRSTN_ARRAY:
                        //case CRNRSTN_OBJECT:
                        //case CRNRSTN_RESOURCE:
                        //case CRNRSTN_RESOURCE_CLOSED:
                        //case CRNRSTN_UNKNOWN_TYPE:
                        //case CRNRSTN_NULL:
                        //case CRNRSTN_MIXED:
                        //case CRNRSTN_INT:
                        //case CRNRSTN_INTEGER:
                        //case CRNRSTN_BOOL:
                        //case CRNRSTN_BOOLEAN:
                        //case CRNRSTN_SOAP_DATA_TUNNEL:
                        //case CRNRSTN_ICY_BITMASK:
                        //case CRNRSTN_JS_CSS_PROD_MIN:
                        //case CRNRSTN_CSS_ASSET_MAPPING

                        if($tmp_tidy_boolean !== false){

                            return 'ON';

                        }

                        return 'OFF';

                    break;

                }

            break;
            default:
                //case CRNRSTN_ICY_BITMASK:
                //case 'DEFAULT':

                 /*
                CRNRSTN :: DATA TYPE INTEGER CONSTANTS
                    CRNRSTN_STRING
                    CRNRSTN_INT
                    CRNRSTN_INTEGER
                    CRNRSTN_BOOL
                    CRNRSTN_BOOLEAN
                    CRNRSTN_FLOAT
                    CRNRSTN_DOUBLE
                    CRNRSTN_ARRAY
                    CRNRSTN_OBJECT
                    CRNRSTN_RESOURCE
                    CRNRSTN_RESOURCE_CLOSED
                    CRNRSTN_UNKNOWN_TYPE
                    CRNRSTN_NULL
                    CRNRSTN_MIXED

                CRNRSTN :: BOOLEAN ALIGNED ARCHITECTURES
                [0]     'DEFAULT', CRNRSTN_ICY_BITMASK, CRNRSTN_CSS_ASSET_MAPPING,
                        AND CRNRSTN_JS_CSS_PROD_MIN

                        POSSIBLE OUTPUT:
                            CRNRSTN_STRING              ['true', 'false']
                            CRNRSTN_SOAP_DATA_TUNNEL    ['TRUE', 'FALSE']
                            CRNRSTN_INTEGER             [(int) 0, (int) 1]
                            CRNRSTN_BOOLEAN             [(bool) true, (bool) false]
                            CRNRSTN_ICY_BITMASK         ['ON', 'OFF']
                            CRNRSTN_CSS_ASSET_MAPPING   ['ON', 'OFF']
                            CRNRSTN_JS_CSS_PROD_MIN     ['PROD', 'DEV']

                [1]     CRNRSTN_SOAP_DATA_TUNNEL

                        PLEASE NOTE: THIS IS USED AS A SOAP-SAFE OUTPUT FILTER.
                            - SSDTLA PACKET
                            - PSSDTTLA PACKET
                        Tuesday, November 21, 2023 @ 0229 hrs.

                        POSSIBLE OUTPUT:
                            CRNRSTN_STRING              ['true', 'false']
                            CRNRSTN_SOAP_DATA_TUNNEL    ['TRUE', 'FALSE']
                            CRNRSTN_INTEGER             [(int) 0, (int) 1]
                            CRNRSTN_ICY_BITMASK         ['ON', 'OFF']
                            CRNRSTN_CSS_ASSET_MAPPING   ['ON', 'OFF']
                            CRNRSTN_JS_CSS_PROD_MIN     ['PROD', 'DEV']


                public function tidy_boolean($data, $return_data_type = CRNRSTN_BOOLEAN, $architecture = 'DEFAULT', $serialized_bit_name = NULL, $return_raw_byte_read = false)

                */

                //
                // GUARANTEE A PROPER CRNRSTN :: SYSTEM INTEGER DATA TYPE.
                //
                // $oCRNRSTN->data_type_filter() RETURNS CRNRSTN_UNKNOWN_TYPE,
                // IF THE INPUT VALUE IS NOT RECOGNIZED.
                $tmp_return_data_type_int = $this->data_type_filter($return_data_type, CRNRSTN_INTEGER);

                /*
                CRNRSTN_STRING ['true', 'false']
                CRNRSTN_SOAP_DATA_TUNNEL ['TRUE', 'FALSE']
                CRNRSTN_INTEGER [0, 1]
                CRNRSTN_BOOLEAN [(bool) true, (bool) false]
                CRNRSTN_ICY_BITMASK ['ON', 'OFF']

                */

                switch($tmp_return_data_type_int){
                    case CRNRSTN_STRING:

                        if($tmp_tidy_boolean !== false){

                            return 'true';

                        }

                        return 'false';

                    break;
                    //case CRNRSTN_INT:         //<-- MOVED TO SWITCH DEFAULT FOR SUPPORT OF UNKNOWN TYPE.
                    //case CRNRSTN_INTEGER:     //<-- MOVED TO SWITCH DEFAULT FOR SUPPORT OF UNKNOWN TYPE.
                    case CRNRSTN_BOOL:
                    case CRNRSTN_BOOLEAN:

                        if($tmp_tidy_boolean !== false){

                            return true;

                        }

                        return false;

                    break;
                    case CRNRSTN_SOAP_DATA_TUNNEL:

                        if($tmp_tidy_boolean !== false){

                            return 'TRUE';

                        }

                        return 'FALSE';

                    break;
                    case CRNRSTN_CSS_ASSET_MAPPING:
                    case CRNRSTN_ICY_BITMASK:

                        if($tmp_tidy_boolean !== false){

                            return 'ON';

                        }

                        return 'OFF';

                    break;
                    case CRNRSTN_JS_CSS_PROD_MIN:

                        if($tmp_tidy_boolean !== false){

                            return 'PROD';

                        }

                        return 'MIN';

                    break;
                    default:
                        //case CRNRSTN_INT:
                        //case CRNRSTN_INTEGER:
                        //case CRNRSTN_FLOAT:
                        //case CRNRSTN_DOUBLE:
                        //case CRNRSTN_ARRAY:
                        //case CRNRSTN_OBJECT:
                        //case CRNRSTN_RESOURCE:
                        //case CRNRSTN_RESOURCE_CLOSED:
                        //case CRNRSTN_UNKNOWN_TYPE:
                        //case CRNRSTN_NULL:
                        //case CRNRSTN_MIXED:

                        if($tmp_tidy_boolean !== false){

                            return 1;

                        }

                        return 0;

                    break;

                }

            break;

        }

    }

    /**
     * Check "Booleanic" Conditions :)
     *
     * @param [mixed] $variable Can be anything (string, bool, integer, etc.)
     * @return [boolean]           Returns TRUE for "1", "true", "on" and "yes"
     *                             Returns FALSE for "0", "false", "off" and "no"
     *                             Returns NULL otherwise.
     *
     * SOURCE :: https://www.php.net/manual/en/function.is-bool.php
     * AUTHOR :: Julio Marchi :: https://www.php.net/manual/en/function.is-bool.php#124179
     */
    public function boolean_conversion($variable = NULL){

        if(!isset($variable)) return null;
        return filter_var($variable, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);

    }

    public function ui_css_length_unit_clean(&$length, $unit_return_override = NULL, $append_unit = true){

        /*
        Thursday, June 22, 2023 @ 0555 hrs.
        https://www.w3schools.com/cssref/css_units.php

        Absolute Lengths
        -----
        // NOTE: MATHS CONVERSIONS BETWEEN ABS UNITS ARE ACTUALLY POSSIBLE.
        // SEE, https://www.freecodecamp.org/news/css-unit-guide/
        -----
        The absolute length units are fixed and a length expressed in any
        of these will appear as exactly that size.

        Absolute length units are not recommended for use on screen, because
        screen sizes vary so much. However, they can be used if the output
        medium is known, such as for print layout.
        -----
            Unit	        Description
            cm	            centimeters
            mm	            millimeters
            in	            inches (1in = 96px = 2.54cm)
            px *	        pixels (1px = 1/96th of 1in)
            pt	            points (1pt = 1/72 of 1in)
            pc	            picas (1pc = 12 pt)

        Relative Lengths
        Relative length units specify a length relative to another length
        property. Relative length units scale better between different
        rendering medium.
        -----
            Unit	        Description
            em	            Relative to the font-size of the element (2em means 2 times the size of the current font)
            ex	            Relative to the x-height of the current font (rarely used)
            ch	            Relative to the width of the "0" (zero)
            rem	            Relative to font-size of the root element
            vw	            Relative to 1% of the width of the viewport*
            vh	            Relative to 1% of the height of the viewport*
            vmin	        Relative to 1% of viewport's* smaller dimension
            vmax	        Relative to 1% of viewport's* larger dimension
            %	            Relative to the parent element

        */

        //
        // FIRST PASS LOGIC.
        // ARE ANY CSS UNITS HERE?
        $tmp_length_clean = $this->str_sanitize($length, 'css_length_to_clean_int');

        $tmp_hide_units_append = false;

        if(((string) $tmp_length_clean === '0') || ((string) $tmp_length_clean === '0.0') || ((string) $tmp_length_clean === '0.00') || ((string) $tmp_length_clean === '0.000') || ((string) $tmp_length_clean === '0.0000')){

            $tmp_hide_units_append = true;

        }

        if($tmp_hide_units_append == true){

            $length = $tmp_length_clean;

        }else{

            //
            // IGNORE UNIT RETURN OVERRIDE IF APPEND_UNIT == FALSE.
            if($append_unit == false){

                $length = $tmp_length_clean;

            }else{

                if(isset($unit_return_override)){

                    if(strlen($unit_return_override) > 0){

                        //
                        // APPEND OVERRIDE LENGTH UNITS TO THE CLEAN CSS DATA VALUE.
                        $length = $tmp_length_clean . $unit_return_override;

                    }else{

                        //
                        // INITIALIZE CSS LENGTH DEFAULT.
                        if(!isset($this->css_length_unit)){

                            $this->css_length_unit = $this->get_resource('default_css_unit_length', 0, 'CRNRSTN::RESOURCE::DEFAULT_UNIT_CSS');

                        }

                        //
                        // APPEND OVERRIDE LENGTH UNITS TO THE CLEAN CSS DATA VALUE.
                        $length = $tmp_length_clean . $this->css_length_unit;

                    }

                }else{

                    //
                    // INITIALIZE CSS LENGTH DEFAULT.
                    if(!isset($this->css_length_unit)){

                        $this->css_length_unit = $this->get_resource('default_css_unit_length', 0, 'CRNRSTN::RESOURCE::DEFAULT_UNIT_CSS');

                    }

                    //
                    // APPEND OVERRIDE LENGTH UNITS TO THE CLEAN CSS DATA VALUE.
                    $length = $tmp_length_clean . $this->css_length_unit;

                }

            }

        }

    }

    public function build_replacements_array($size, $str_pattern = NULL){

        try{

            //
            // THIS SHOULD BE A NUMBER.
            if(is_numeric($size)){

                $tmp_int = (int) $size;

            }else{

                throw new Exception('An incorrect array size of '. strval($size) . ' was requested. ' . $this->data_report($size, 'CRNRSTN :: MC-DDO INPUT DATA REPORT |'));

            }

            if(!isset($str_pattern)){

                $str_pattern = '';

            }

            $s = $str_pattern;

            switch($size){
                case 1:

                    return array($s);

                break;
                case 2:

                    return array($s, $s);

                break;
                case 3:

                    return array($s, $s, $s);

                break;
                case 4:

                    return array($s, $s, $s, $s);

                break;
                case 5:

                    return array($s, $s, $s, $s, $s);

                break;
                case 6:

                    return array($s, $s, $s, $s, $s, $s);

                break;
                case 7:

                    return array($s, $s, $s, $s, $s, $s, $s);

                break;
                case 8:

                    return array($s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 9:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 10:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 11:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 12:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 13:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 14:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 15:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 16:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 17:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 18:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 19:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 20:

                    return array($s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 21:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s);

                break;
                case 22:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s);

                break;
                case 23:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s);

                break;
                case 24:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s);

                break;
                case 25:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s);

                break;
                case 26:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s);

                break;
                case 27:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s);

                break;
                case 28:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 29:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 30:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 31:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 32:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 33:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 34:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 35:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 36:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 37:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 38:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 39:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 40:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 41:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s);

                break;
                case 42:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s);

                break;
                case 43:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s);

                break;
                case 44:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s);

                break;
                case 45:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s);

                break;
                case 46:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s);

                break;
                case 47:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s);

                break;
                case 48:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 49:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 50:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 51:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 52:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 53:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 54:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 55:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 56:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 57:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 58:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 59:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 60:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 61:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s);

                break;
                case 62:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s);

                break;
                case 63:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s);

                break;
                case 64:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s);

                break;
                case 65:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s);

                break;
                case 66:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s);

                break;
                case 67:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s);

                break;
                case 68:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 69:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 70:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 71:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 72:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 73:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 74:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 75:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 76:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 77:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 78:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 79:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 80:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 81:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s);

                break;
                case 82:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s);

                break;
                case 83:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s);

                break;
                case 84:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s);

                break;
                case 85:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s);

                break;
                case 86:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s);

                break;
                case 87:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s);

                break;
                case 88:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 89:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 90:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 91:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 92:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 93:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 94:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 95:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 96:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 97:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 98:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 99:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 100:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 101:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s);

                break;
                case 102:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s);

                break;
                case 103:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s);

                break;
                case 104:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s);

                break;
                case 105:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s);

                break;
                case 106:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s);

                break;
                case 107:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s);

                break;
                case 108:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 109:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 110:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 111:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 112:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 113:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 114:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 115:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 116:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 117:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 118:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 119:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 120:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 121:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s);

                break;
                case 122:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s);

                break;
                case 123:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s);

                break;
                case 124:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s);

                break;
                case 125:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s);

                break;
                case 126:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s);

                break;
                case 127:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s);

                break;
                case 128:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 129:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 130:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 131:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 132:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 133:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 134:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 135:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 136:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 137:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 138:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 139:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 140:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 141:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s);

                break;
                case 142:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s);

                break;
                case 143:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s);

                break;
                case 144:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s);

                break;
                case 145:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s);

                break;
                case 146:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s);

                break;
                case 147:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s);

                break;
                case 148:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 149:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 150:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 151:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 152:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 153:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 154:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 155:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 156:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 157:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 158:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 159:

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 160:

                    //
                    // 161 PATTERNS. IT IS ONLY LOGICAL,...SO WE HAD TO DO THE WORK.
                    // Sunday, October 8, 2023 @ 1650 hrs.
                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s);

                break;
                case 161:

                    /*
                    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789{}[]:;\"\'|\\+=_- )(*&^%$#@!~
                    `?/>.<,   '{}[]:|\\+=_- )(*&%$#@!~?/.,:+=_- )(*$#@!~.

                    161 chars. 1 replace pattern for each should do. now turn anything into a
                    perfectly empty string.

                    TODO :: INVESTIGATE MULTI-BYTE CHARACTER SUPPORT. HOW MANY MORE?? // Sunday, October 8, 2023 @ 1900 hrs.

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s

                    */

                    return array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,

                    $s);

                break;
                default:

                    //
                    // IF WE NEED MORE THAN 161 REPLACEMENTS, WE ABSOLUTELY
                    // AND POSITIVELY MUST TO DO THE WORK HERE SO THAT NO ONE
                    // HAS TO GET SENT AWAY WITH EMPTY HANDS. O HOW TERRIBLE
                    // THAT WOULD BE, IF IT WERE TO EVER HAPPEN. FEED THE P--
                    // Sunday, October 8, 2023 @ 1523 hrs.
                    // TODO :: REMOVE THIS TODO AFTER COMPLETING ALL BOUNDARY TESTING. Sunday, October 8, 2023 @ 1806 hrs.

                    //
                    // A (READILY AVAILABLE...SEE ABOVE) JUMP START.
                    // Sunday, October 8, 2023 @ 1835 hrs.
                    $tmp_ARRAY = array(
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s, $s,
                    $s);

                    for($i = 161; $i < $tmp_int; $i++){

                        $tmp_ARRAY[] = $str_pattern;

                    }

                    return $tmp_ARRAY;

                break;

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

        return false;

    }

    public function extract_key_from_string($data, $replacements_str_pattern = '', $replacements_is_prefix = false, $patterns_ARRAY = NULL, $replacements_ARRAY = NULL){
        // TODO :: WANT TO TAKE AN ARRAY OF PATTERNS? MORE ROBUST CHANNEL STRINGS COULD BE SUPPORTED.
        // Saturday, October 7, 2023 @ 0435 hrs.

        //
        // STRUCTURE OF INPUT ARRAY OF PATTERNS.
        if(isset($patterns_ARRAY)){
            // Sunday, October 8, 2023 @ 0059 hrs.

            if(!isset($replacements_ARRAY)){

                //
                // TLDR; FOR STRAIGHT LINE APPLICATIONS OF ONE (1) STRING REPLACEMENT ACROSS
                // n+1 STRING PATTERNS, ...E.G USE AN EMPTY "" FOR 20 DIFFERENT PATTERNS...THE
                // RECOMMENDATION IS TO LEAVE $replacements NULL IF THERE ARE UNDER 161
                // PATTERNS. IF $replacements HAS NOT ALREADY BEEN BUILT BY THIS POINT, NOTHING
                // WILL BE FASTER THAN $replacements=NULL HERE. NOTHING.
                //
                // CRNRSTN :: WILL SUPPORT A NULL $replacements ARRAY WITH AN INTERNALLY PRE-
                // FABRICATED DATA STRUCTURE OF $replacements THAT WILL USE THE PROVIDED
                // $replacements_str_pattern FOR ALL $patterns.
                //
                // LEAVING $replacements NULL IS EFFICIENT; THIS SHOULD BE AN ABSOLUTE FLAT-
                // LINE...IN PERFORMANCE...FOR UP TO 161 SEPARATE PATTERN REPLACEMENTS.
                //
                // ...ABOVE 161 PATTERNS, CRNRSTN :: IS NO BETTER (FASTER) THAN ANY OTHER.
                //
                // ...NO BETTER? HERE COMES THE OPEN SOURCE COMMUNITY...SAY BETTER!
                //
                // Sunday, October 8, 2023 @ 1711 hrs.
                $replacements_ARRAY = $this->build_replacements_array(sizeof($patterns_ARRAY), $replacements_str_pattern);

            }

            $tmp_str = str_replace($patterns_ARRAY, $replacements_ARRAY, $data);

            return $tmp_str;

        }

        $tmp_channel_ARRAY = explode($replacements_str_pattern, $data);

        if(!($replacements_is_prefix !== false)){

            return $tmp_channel_ARRAY[0];

        }

        if(isset($tmp_channel_ARRAY[1])){

            return $tmp_channel_ARRAY[1];

        }

        return '';

    }

    public function str_sanitize($str, $type){

        $patterns = array();
        $replacements = array();

        $type = strtolower($type);

        try{

            switch($type){
                case 'data_key_extract':

                    $tmp_ARRAY = explode('::', $str);

                    return $tmp_ARRAY[count($tmp_ARRAY) -1];

                break;
                case 'string_to_bytes':
                    // SUPPORTS TAKING '42 GiB' to (int) 123233...

                    $str = strtolower(trim($str));
                    $patterns[0] = ' ';
                    $replacements[0] = '';

                break;
                case 'file_mime_type_to_directory':

                    //
                    // MIME-TYPE CONVERSION TO LOWERCASE FOLDER NAME.
                    $str = strtolower($str);
                    $patterns[0] = ' ';
                    $patterns[1] = '-';
                    $patterns[2] = '/';
                    $patterns[3] = '.';
                    $patterns[4] = '+';

                    $replacements = $this->build_replacements_array(sizeof($patterns), '_');
                    //$replacements[0] = '_';
                    //$replacements[1] = '_';
                    //$replacements[2] = '_';
                    //$replacements[3] = '_';
                    //$replacements[4] = '_';

                break;
                case 'css_length_to_clean_int':

                    //
                    // LOWERCASE FOR 'px'
                    $str = strtolower($str);

                    //
                    // SOURCE :: https://www.w3schools.com/cssref/css_units.php
                    // DATE :: Thursday, June 22, 2023 @ 0555 hrs.
                    $patterns[0] = ' ';
                    $patterns[1] = ';';
                    $patterns[2] = 'cm';
                    $patterns[3] = 'mm';
                    $patterns[4] = 'in';
                    $patterns[5] = 'px';
                    $patterns[6] = 'pt';
                    $patterns[7] = 'pc';
                    $patterns[8] = 'em';
                    $patterns[9] = 'ex';
                    $patterns[10] = 'ch';
                    $patterns[11] = 'rem';
                    $patterns[12] = 'vw';
                    $patterns[13] = 'vh';
                    $patterns[14] = 'vmin';
                    $patterns[15] = 'vmax';
                    $patterns[16] = '%';

                    $replacements = $this->build_replacements_array(sizeof($patterns));
                    //$replacements[0] = '';
                    //$replacements[1] = '';
                    //$replacements[2] = '';
                    //$replacements[3] = '';
                    //$replacements[4] = '';
                    //$replacements[5] = '';
                    //$replacements[6] = '';
                    //$replacements[7] = '';
                    //$replacements[8] = '';
                    //$replacements[9] = '';
                    //$replacements[10] = '';
                    //$replacements[11] = '';
                    //$replacements[12] = '';
                    //$replacements[13] = '';
                    //$replacements[14] = '';
                    //$replacements[15] = '';
                    //$replacements[16] = '';

                break;
                case DIRECTORY_SEPARATOR:

                    // PURPOSE: FILE PATH SANITIZATION OF ALL SLASHES
                    // THIS IS ONLY EXPERIMENTAL UNTIL IT CAN BE TESTED IN WINDOWS.

                    $patterns[0] = '/';
                    $patterns[1] = '\\';

                    $replacements = $this->build_replacements_array(sizeof($patterns), DIRECTORY_SEPARATOR);
                    //$replacements[0] = DIRECTORY_SEPARATOR;
                    //$replacements[1] = DIRECTORY_SEPARATOR;

                break;
                case 'leading_slash':

                    $str = ltrim($str, '/');

                    return $str;

                break;
                case 'integrations_http_path':

                    //
                    // RTRIM ALL DIRECTORY_SEPARATOR(S).
                    $tmp_str = $this->strrtrim($str, DIRECTORY_SEPARATOR);

                    //
                    // APPEND A DIRECTORY_SEPARATOR.
                    $tmp_str .= DIRECTORY_SEPARATOR;

                    return $tmp_str;

                break;
                case 'integrations_dir_path':

                    //
                    // RTRIM ALL DIRECTORY_SEPARATOR(S).
                    $tmp_str = $this->strrtrim($str, DIRECTORY_SEPARATOR);

                    return $tmp_str;

                break;
                case 'integrations_file_path_append':

                    $tmp_ARRAY = array();
                    $tmp_ARRAY['slash_segment_cnt'] = 0;
                    $tmp_slash = DIRECTORY_SEPARATOR;
                    $tmp_dot = '.';
                    $tmp_no_segment_zero_dot = false;

                    $tmp_pos_slash = strpos($str, $tmp_slash);
                    if($tmp_pos_slash !== false){

                        //
                        // DOES WINDOWS GO FOR '//'?
                        // WE MAY NEED TO UPDATE THIS LATER ONCE WE CAN TEST IN WINDOWS.
                        $tmp_slash_ARRAY = explode($tmp_slash, $str);

                        //
                        // IS THERE A DOT IN THE FIRST SEGMENT?
                        $tmp_pos_dot = strpos($tmp_slash_ARRAY[0], $tmp_dot);
                        if(!($tmp_pos_dot !== false)){

                            //
                            // I HAVE NO DIRECTORY TO DELETE. DO NOT REMOVE A DIRECTORY.
                            $tmp_no_segment_zero_dot = true;

                        }

                        $tmp_segment_cnt = count($tmp_slash_ARRAY);

                        foreach($tmp_slash_ARRAY as $sl_index => $sl_content){

                            $tmp_sl_content_str_len = strlen($sl_content);
                            $tmp_clean_str = $this->strrtrim($sl_content, '.');

                            if(strlen($tmp_clean_str) < 1 || (($sl_index == 0) && ($tmp_segment_cnt > 1) && ($tmp_no_segment_zero_dot == true))){

                                //
                                // WE HAVE A REMOVABLE STRING SEGMENT.
                                // COUNT IT.
                                $tmp_ARRAY['slash_segment_cnt']++;
                                $tmp_ARRAY['dir_nom_segment_str_len'][] = $tmp_sl_content_str_len;

                            }else{

                                //
                                // STORE THE CONTENT FROM BETWEEN THE SLASHES.
                                $tmp_ARRAY['segment_str'][] = $sl_content;

                            }

                        }

                    }

                    $tmp_ARRAY['no_segment_zero_dot'] = 0;
                    if($tmp_no_segment_zero_dot == true){

                        $tmp_ARRAY['no_segment_zero_dot'] = 1;

                    }

                    return $tmp_ARRAY;

                break;
                case 'index':

                    $patterns[0] = '&nbsp;';
                    $patterns[1] = ')';
                    $replacements[0] = ' ';
                    $replacements[1] = ') ';

                break;
                case 'search':

                    $patterns[0] = "
";
                    $patterns[1] = '"';
                    $patterns[2] = '=';
                    $patterns[3] = '{';
                    $patterns[4] = '}';
                    $patterns[5] = '(';
                    $patterns[6] = ')';
                    $patterns[7] = ' ';
                    $patterns[8] = '	';
                    $patterns[9] = ',';
                    $patterns[10] = '\n';
                    $patterns[11] = '\r';
                    $patterns[12] = '\'';
                    $patterns[13] = '/';
                    $patterns[14] = '#';
                    $patterns[15] = ';';
                    $patterns[16] = ':';
                    //$patterns[17] = '>';

                    $replacements = $this->build_replacements_array(sizeof($patterns));
                    //$replacements[0] = '';
                    //$replacements[1] = '';
                    //$replacements[2] = '';
                    //$replacements[3] = '';
                    //$replacements[4] = '';
                    //$replacements[5] = '';
                    //$replacements[6] = '';
                    //$replacements[7] = '';
                    //$replacements[8] = '';
                    //$replacements[9] = '';
                    //$replacements[10] = '';
                    //$replacements[11] = '';
                    //$replacements[12] = '';
                    //$replacements[13] = '';
                    //$replacements[14] = '';
                    //$replacements[15] = '';
                    //$replacements[16] = '';
                    ////$replacements[17] = '';

                break;
                case 'email_private':

                    $tmp_new_post_at_ARRAY = array();
                    $clean_str = '';
                    $last_dot_flag = false;
                    $tmp_at_split_ARRAY = explode('@', $str);
                    $tmp_post_at_len = strlen($tmp_at_split_ARRAY[1]);
                    $tmp_str_ARRAY = $this->str_split_unicode($str);
                    $tmp_post_at_str_ARRAY = $this->str_split_unicode($tmp_at_split_ARRAY[1]);
                    $tmp_post_at_str_rev_ARRAY = array_reverse($tmp_post_at_str_ARRAY);

                    //
                    // PREP POST @ SITUATION
                    for($i = 0; $i < $tmp_post_at_len; $i++){

                        if(!($last_dot_flag === true)){

                            if($tmp_post_at_str_rev_ARRAY[$i] == '.'){

                                $last_dot_flag = true;

                            }

                            $tmp_new_post_at_ARRAY[] = $tmp_post_at_str_rev_ARRAY[$i];

                            if($last_dot_flag === true){

                                $i = $tmp_post_at_len + 420;
                                $tmp_new_post_at_ARRAY = array_reverse($tmp_new_post_at_ARRAY);

                            }

                        }

                    }

                    $tmp_str_len = sizeof($tmp_str_ARRAY);
                    for($i = 0; $i < $tmp_str_len; $i++){

                        if($i == 0){

                            $clean_str .= $tmp_str_ARRAY[$i] . '*****';

                        }else{

                            if($tmp_str_ARRAY[$i] == '@'){

                                $at_flag = true;
                                $tmp_plus_one = $i + 1;
                                $clean_str .= $tmp_str_ARRAY[$i] . $tmp_str_ARRAY[$tmp_plus_one] . '*****';
                                $clean_str .= implode($tmp_new_post_at_ARRAY);
                                $i = $tmp_str_len + 420;

                            }
                        }
                    }

                    return $clean_str;

                break;
                case 'http_protocol_simple':

                    $patterns[0] = '_';
                    $patterns[1] = '$';
                    $patterns[2] = ' ';

                    $replacements = $this->build_replacements_array(sizeof($patterns));
                    //$replacements[0] = '';
                    //$replacements[1] = '';
                    //$replacements[2] = '';

                break;
                case 'clean_percentage_numbers':

                    $patterns[0] = '%';
                    $patterns[1] = 'percent';
                    $patterns[2] = ' ';
                    $patterns[3] = '!';

                    $replacements = $this->build_replacements_array(sizeof($patterns));
                    //$replacements[0] = '';
                    //$replacements[1] = '';
                    //$replacements[2] = '';
                    //$replacements[3] = '';

                break;
                case 'custom_mobi_detect_alg':

                    $patterns[0] = '(';
                    $patterns[1] = ')';
                    $replacements[0] = '';
                    $replacements[1] = '';

                break;
                case 'select_statement':

                    $patterns[0] = "`";
                    $replacements[0] = '';

                break;
                case 'select_field_name':

                    $patterns[0] = "
";
                    $patterns[1] = '"';
                    $patterns[2] = '=';
                    $patterns[3] = '{';
                    $patterns[4] = '}';
                    $patterns[5] = '(';
                    $patterns[6] = ')';
                    $patterns[7] = ' ';
                    $patterns[8] = '    ';
                    $patterns[9] = ',';
                    $patterns[10] = '\n';
                    $patterns[11] = '\r';
                    $patterns[12] = '\'';
                    $patterns[13] = '/';
                    $patterns[14] = '#';
                    $patterns[15] = ';';
                    $patterns[16] = ':';
                    $patterns[17] = '>';

                    $replacements = $this->build_replacements_array(sizeof($patterns));
                    //$replacements = array();
                    //$replacements[0] = '';
                    //$replacements[1] = '';
                    //$replacements[2] = '';
                    //$replacements[3] = '';
                    //$replacements[4] = '';
                    //$replacements[5] = '';
                    //$replacements[6] = '';
                    //$replacements[7] = '';
                    //$replacements[8] = '';
                    //$replacements[9] = '';
                    //$replacements[10] = '';
                    //$replacements[11] = '';
                    //$replacements[12] = '';
                    //$replacements[13] = '';
                    //$replacements[14] = '';
                    //$replacements[15] = '';
                    //$replacements[16] = '';
                    //$replacements[17] = '';

                break;
                case 'sql_interval':
                    //
                    // UPPERCASE FOR SQL QUERY INTERVAL.
                    $str = strtoupper($str);

                    $patterns[0] = ' ';
                    $replacements[0] = '';

                break;
                default:

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception('Unable to determine string sanitization algorithm [' . $type . '] for the content[' . $str . '].');

                break;

            }

            $str = str_replace($patterns, $replacements, $str);

            return $str;

        }catch(Exception $e){

            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

//    public function str_sanitize($str, $type){
//
//        $patterns = array();
//        $replacements = array();
//
//        $type = strtolower($type);
//
//        try{
//
//            switch($type){
//                default:
//
//                    //
//                    // HOOOSTON...VE HAF PROBLEM!
//                    throw new Exception('Unable to determine string sanitization algorithm [' . $type . '] for the content[' . $str . '].');
//
//                    break;
//
//            }
//
//            $str = str_replace($patterns, $replacements, $str);
//
//            return $str;
//
//        }catch(Exception $e){
//
//            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);
//
//            return false;
//
//        }
//
//    }

    /*
    CRNRSTN :: R&D (read as "messy kitchen below"...and this right here is by no means the end of it.)
    CONFIGURATION OF OUTPUT FORMAT FOR MAPPED ASSETS

    CRNRSTN_HTML & CRNRSTN_ASSET_MODE_BASE64
    CRNRSTN_HTML & CRNRSTN_ASSET_MODE_PNG
    CRNRSTN_HTML & CRNRSTN_ASSET_MODE_JPEG



    ---
    CRNRSTN_HTML
    CRNRSTN_HTML & CRNRSTN_PNG
    CRNRSTN_HTML & CRNRSTN_JPEG
    CRNRSTN_HTML & CRNRSTN_ASSET_MODE_JPEG
    CRNRSTN_HTML & CRNRSTN_ASSET_MODE_PNG

    CRNRSTN_PNG
    CRNRSTN_ASSET_MODE_PNG
    CRNRSTN_JPEG
    CRNRSTN_ASSET_MODE_JPEG

    case CRNRSTN_HTML & CRNRSTN_BASE64_JPEG
    case CRNRSTN_HTML & CRNRSTN_ASSET_MODE_BASE64 & CRNRSTN_JPEG
    case CRNRSTN_HTML & CRNRSTN_ASSET_MODE_BASE64
    case CRNRSTN_HTML & CRNRSTN_ASSET_MODE_BASE64 & CRNRSTN_PNG
    case CRNRSTN_HTML & CRNRSTN_BASE64
    case CRNRSTN_HTML & CRNRSTN_BASE64_PNG
    case CRNRSTN_ASSET_MODE_BASE64
    case CRNRSTN_BASE64
    case CRNRSTN_ASSET_MODE_BASE64
    case CRNRSTN_BASE64_PNG
    case CRNRSTN_BASE64_JPEG


    //echo $oCRNRSTN->return_system_image('CRNRSTN_LOGO', '', 250, NULL, NULL, NULL, NULL, CRNRSTN_HTML);
    //echo $oCRNRSTN->return_sticky_media_link('SOUNDCLOUD_LARGE', 'https://soundcloud.com/jonathan-harris-772368100', '_blank', true);
    //echo $oCRNRSTN->return_sticky_media_link('SOUNDCLOUD_LARGE', 'https://soundcloud.com/jonathan-harris-772368100', '_blank', false);
    //echo $oCRNRSTN->return_creative('CRNRSTN_FAVICON', CRNRSTN_HTML);

    //
    // SYNC BASE64 TO SYSTEM AND SOCIAL PNG AND JPEG ASSETS.
    // THIS MAINTAINS A BASE64 FILE SYSTEM THAT PARALLELS THE SOURCE PNG/JPG FILES.
    //$oCRNRSTN->system_base64_synchronize();

    //
    // TODO :: THE GOAL IS TO RECEIVE A DIR PATH FROM AN ADMIN FOR BASE64 REPLICATION OF *.* IMAGES (e.g.
    // USER PROFILE PICS). AND THEN GET THESE ASSETS BEHIND CRNRSTN :: ASSET MAPPING AND CONTENT CONTROL.
    // e.g. https://yourdomain.com/?crnrstn_01010010110=your_image_name.jpg&crnrstn_hsh=c2e96b13634c287620fd5f9d51708946
    //
    // THIS WILL SUPPORT ::
    //  - SOCIAL MEDIA INTEGRATIONS WITH JPEGS BEING RETURNED (OR CREATED FROM PNG VIA SCRIPT AUTOMATICALLY) FOR
    //    ALL HTML META TAGS HOLDING SOCIAL MEDIA PREVIEW DATA.
    //  - IP ADDRESS RESTRICTIONS CAN BE APPLIED TO ASSETS.
    //  - ACCOUNT AUTHENTICATION (VALID SESSION) CAN BE REQUIRED FOR ASSET ACCESS.

    */

    private function base64_output_mode_conversion(&$output_mode_override){

        self::$oCRNRSTN_RRS_MAP->base64_output_mode_conversion($output_mode_override);

    }

    public function return_system_image($system_asset_constant, $width = NULL, $height = NULL, $hyperlink = NULL, $alt = NULL, $title = NULL, $target = NULL, $output_mode = CRNRSTN_STRING, $url_params_ARRAY = NULL){
        // $url_params_ARRAY SUPPORTS $_GET[] APPENDING CUSTOM ANALYTICS
        // AND REPORTING TAGS TO THE CRNRSTN :: ENCRYPTED STICKY LINKS.
        // SEE, $oCRNRSTN->return_sticky_link().

        if($this->is_system_terminate_enabled() == true){

            $this->base64_output_mode_conversion($output_mode);

        }

        //
        // CRNRSTN :: PLAID.
        $this->cache_meta_ARRAY = $this->asset_data_meta($system_asset_constant);
        $this->cache_meta_ARRAY['width'] = $width;
        $this->cache_meta_ARRAY['height'] = $height;
        $this->cache_meta_ARRAY['hyperlink'] = $hyperlink;
        $this->cache_meta_ARRAY['alt'] = $alt;
        $this->cache_meta_ARRAY['title'] = $title;
        $this->cache_meta_ARRAY['target'] = $target;
        $this->cache_meta_ARRAY['output_mode'] = $output_mode;
        $this->cache_meta_ARRAY['url_params_ARRAY'] = $url_params_ARRAY;

        $tmp_salt_ugc = $this->cache_meta_ARRAY['filename'];
        $tmp_asset_family = $this->cache_meta_ARRAY['asset_family'];

        //error_log( __LINE__ . ' crnrstn $system_asset_constant[' . $system_asset_constant  . ']. salt_ugc[' . $tmp_salt_ugc . ']. meta_ARRAY[' . print_r($this->cache_meta_ARRAY, true) . '].');
        //error_log( __LINE__ . ' crnrstn $tmp_asset_family[' . $tmp_asset_family . ']. asset_routing_data_key_lookup_ARRAY[' . print_r($this->asset_routing_data_key_lookup_ARRAY[$tmp_asset_family], true) . '].');

        //
        // IS $system_asset_constant RECOGNIZED? THE GATE KEEPER IS VALID RETURN OF asset_data_meta().
        if(isset($this->asset_routing_data_key_lookup_ARRAY[$tmp_asset_family][$tmp_salt_ugc])){

            //
            // CRNRSTN :: ICY_DIGITALITCC-BITMASK INTEGER
            // STATE (BIT FLIP) MANAGEMENT SERVICES LAYER.
            // # # C # R # N # R # S # T # N # : : # # # #
            // CRNRSTN :: UGC DATA INPUT [ICY_DIGITALITCC-BITMASK]
            $this->initialize_bit(CRNRSTN_ASSET_MAPPING);

            //
            // LET'S TRY USING CRNRSTN :: PLAID FOR RAW IMAGE AND URL RETURN. THIS IS DONE FOR $_GET[] NOW.
            // MAYBE HTML WRAPPING CAN BE DONE HERE BY CRNRSTN :: EVERYTHING BUT THE IMAGE LINK IS HERE NOW.
            $CRNRSTN_PLAID_RESPONSE_RETURN = $this->to_plaid(CRNRSTN_CHANNEL_RUNTIME, $tmp_salt_ugc, $tmp_asset_family, $this->asset_routing_data_key_lookup_ARRAY[$tmp_asset_family][$tmp_salt_ugc], $output_mode, __FUNCTION__);
            if(strlen($CRNRSTN_PLAID_RESPONSE_RETURN) > 0){

                return $CRNRSTN_PLAID_RESPONSE_RETURN;

            }

        }

//        if(isset($this->asset_routing_data_key_lookup_ARRAY[$tmp_asset_family][$system_asset_constant])){
//
//            //
//            // FLIP INTEGER CONSTANT BITS.
//            $this->initialize_bit(CRNRSTN_ASSET_MAPPING);
//
//            //
//            // LET'S TRY USING CRNRSTN :: PLAID FOR RAW IMAGE AND URL RETURN. THIS IS DONE FOR $_GET[] NOW.
//            // MAYBE HTML WRAPPING CAN BE DONE HERE BY CRNRSTN :: EVERYTHING BUT THE IMAGE LINK IS HERE NOW.
//            $CRNRSTN_PLAID_RESPONSE_RETURN = $this->to_plaid(CRNRSTN_CHANNEL_RUNTIME, $system_asset_constant, $tmp_asset_family, $this->asset_routing_data_key_lookup_ARRAY[$tmp_asset_family][$system_asset_constant], $output_mode, __FUNCTION__);
//            if(strlen($CRNRSTN_PLAID_RESPONSE_RETURN) > 0){
//
//                return $CRNRSTN_PLAID_RESPONSE_RETURN;
//
//            }
//
//        }

        //error_log(__LINE__ . ' crnrstn NEED C-LEVEL AUTH CLEARANCE TO REMOVE THIS -->die();<--. GO FIND OUT AND SEE.');
        //error_log(__LINE__ . ' crnrstn A QUOTE FROM C-LEVEL: "You shall not pass!"');
//        die();

        /*
        [Mon May 29 13:46:12.031316 2023] [:error] [pid 66099] [client 172.16.225.1:52646] 12935 crnrstn
        $system_asset_constant[PHP_ELLIPSE].
        salt_ugc[php_logo].
        meta_ARRAY[Array\n(\n
            [output_mode_method_src] => 4056\n
            [asset_data_key] => PHP_ELLIPSE\n
            [asset_family] => system\n
            [filename] => php_logo\n
            [width] => \n
            [height] => 20\n
            [alt] => \n
            [title] => \n
            [hyperlink] => \n
            [target] => \n
            [raw_output_mode] => 7211\n
            [output_mode] => 7219\n
            [url_params_ARRAY] => \n

        )\n].

        */

        //
        // THE IMAGES SERVING ARCHITECTURE PREVIOUS
        // TO CRNRSTN :: PLAID...IS NOW CHANGING OR
        // IS BEING REDUCED TO A ROLE ON PAR WITH A
        // MOST INTELLIGENT STATIC FILE STORAGE DEV.
        //return $this->oCRNRSTN_ASSET_MGR->return_system_image($system_asset_constant, $width, $height, $hyperlink, $alt, $title, $target, $output_mode);

    }

    public function return_creative($media_element_key, $output_mode = NULL, $creative_mode = NULL){

        //
        // CRNRSTN :: PLAID.
        $this->cache_meta_ARRAY = $this->asset_data_meta($media_element_key);
        $this->cache_meta_ARRAY['source'] = __FUNCTION__;
        //$this->cache_meta_ARRAY['url_params_ARRAY'] = $url_params_ARRAY;

        return $this->oCRNRSTN_ASSET_MGR->return_creative($media_element_key, $output_mode, $creative_mode);

    }

    public function isset_param($super_global, $param){

        if(isset($super_global[$param])){

            return true;

        }else{

            return false;

        }

    }

//    public function reset_asset_request_meta(){
//
//        //
//        // ONLY USED FOR ASSETS/IMAGES. EXCLUDE DEEP LINK FUNCTIONALITY.
//        if($this->crnrstn_asset_family == 'module_key'){
//
//            return NULL;
//
//        }
//
//        //error_log(__LINE__ . ' crnrstn *OPERATION OMITTTED* reset_asset_request_meta [' . $this->asset_response_method_key . '] [' . $this->crnrstn_asset_family . '] [' . $this->crnrstn_asset_meta_path . ']');
//        //$this->asset_response_method_key = NULL;
//        //$this->crnrstn_asset_family = NULL;
//        //$this->crnrstn_asset_meta_path = NULL;
//
//    }

    public function initialize_request($request_ugc_val, $asset_family = NULL, $asset_meta_key = 'CRNRSTN_SYS', $asset_meta_path = NULL, $serial_override = NULL, $raw_output_mode = NULL, $output_mode = NULL){

        return self::$oCRNRSTN_RRS_MAP->initialize_request($request_ugc_val, $asset_family, $asset_meta_key, $asset_meta_path, $serial_override, $raw_output_mode, $output_mode);

    }

    public function add_cache_channel($name){

        self::$oCRNRSTN_RRS_MAP->add_cache_channel($name);

    }

    public function return_isactive_channels(){

        return self::$oCRNRSTN_RRS_MAP->return_isactive_channels();

    }

    public function return_cache_channels($return_active_channels = false){

        // Where, self::$data_channel_init_sequence = 'GPHSJCDROF';
        $tmp_channel_init_ARRAY = str_split(self::$data_channel_init_sequence);
        $tmp_channel_ARRAY = array();

//        if(isset(self::$channel_syntax_ARRAY)){
//
//            if(count(self::$channel_syntax_ARRAY) > 1){
//
//                return self::$channel_syntax_ARRAY;
//
//            }
//
//        }

        //
        // CHANNEL SEQUENCE CONTROLLER FOR ANY CHANNELS IN OUTPUT ARRAY.
        // ALWAYS HONOR THE ORDER OF OPERATIONS FOR DATA HANDLING IN SETTINGS, E.G. 'GPHSJCDROF'.
        foreach($tmp_channel_init_ARRAY as $alpha_ch_index => $channel_alpha){

            //
            // CHANNEL SEQUENCE IS VALIDATED (AND CONFIRMED [OR MADE] TO BE COMPLETE) AT DDO INPUT.
            // Sunday, October 15, 2023 @ 0236 hrs.
            if(isset(self::$channel_syntax_ARRAY[$channel_alpha])){

                if($return_active_channels == true){

                    if($this->get_channel_config($channel_alpha, 'cache_is_active') == true){

                        //error_log(__LINE__ . ' crnrstn MC-DDO CHANNEL ACTIVE [' . $channel_alpha . '] ' . $this->get_channel_config($channel_alpha, 'NAME') . ' MC-DDO CHANNEL.');

                        //
                        // RETURN ONLY ACTIVE DATA STORAGE CHANNELS IN THE SEQUENCE OF THEIR INITIALIZATION.
                        $tmp_channel_ARRAY[] = $this->get_channel_config($channel_alpha, 'AUTHORIZATION', 'PROFILE', 'PRIMARY', CRNRSTN_INTEGER);

                    }else{

                        //$tmp = strlen(array('324324'));
                        //error_log(__LINE__ . ' crnrstn MC-DDO CHANNEL INACTIVE [' . $channel_alpha . '] ' . $this->get_channel_config($channel_alpha, 'NAME') . ' MC-DDO CHANNEL.');

                    }

                }else{

                    //error_log(__LINE__ . ' crnrstn MC-DDO CHANNEL ACTIVE [' . $channel_alpha . '] ' . $this->get_channel_config($channel_alpha, 'NAME') . '.');

                    //
                    // RETURN ALL DATA STORAGE CHANNELS IN THE SEQUENCE OF THEIR INITIALIZATION.
                    $tmp_channel_ARRAY[] = self::$channel_syntax_ARRAY[$channel_alpha];

                }

            }

        }

        return $tmp_channel_ARRAY;

    }

    public function rrs_map_is_asset_return(){

        //
        // CRNRSTN :: RESPONSE RETURN SERIALIZATION MAP.
        return self::$oCRNRSTN_RRS_MAP->rrs_map_is_asset_return();

    }

    public function runtime_rrs_cache_is_active($output_method, $param0 = NULL, $param1 = NULL, $param2 = NULL, $param3 = NULL, $param4 = NULL, $param5 = NULL, $param6 = NULL, $param7 = NULL, $param8 = NULL, $param9 = NULL){

        //
        // CRNRSTN :: RESPONSE RETURN SERIALIZATION MAP.
        return self::$oCRNRSTN_RRS_MAP->runtime_rrs_cache_is_active($output_method, $param0, $param1, $param2, $param3, $param4, $param5, $param6, $param7, $param8, $param9);

    }

    public function finalize_ttl_secs($ttl){

        //
        // CHECK FOR NO TTL EXPIRE, [-1]
        if($ttl < 0){

            return $ttl;

        }

        $tmp_secs = time();
        $tmp_secs += (int) $ttl;

        return $tmp_secs;

    }

    public function initialize_response_map_cache($output_method, $output_mode = NULL, $param0 = NULL, $param1 = NULL, $param2 = NULL, $param3 = NULL, $param4 = NULL, $param5 = NULL, $param6 = NULL, $param7 = NULL, $param8 = NULL, $param9 = NULL, $param10 = NULL){

        error_log(__LINE__ . ' crnrstn DO I EVEN FIRE? Monday, June 5, 2023 @ 1130 hrs.');
        die();
        //
        // CRNRSTN :: RESPONSE RETURN SERIALIZATION MAP.
        switch($output_method){
            case 'return_html_favicon_head_meta':
                //('return_html_favicon_head_meta', CRNRSTN_FAVICON, $tmp_meta_ARRAY, $tmp_url);
                /*
                $tmp_meta_ARRAY['asset_data_key'] = $asset_data_key;
                $tmp_meta_ARRAY['asset_family'] = $tmp_asset_family;
                $tmp_meta_ARRAY['filename'] = $tmp_filename;
                $tmp_meta_ARRAY['width'] = $tmp_width;
                $tmp_meta_ARRAY['height'] = $tmp_height;
                $tmp_meta_ARRAY['alt'] = $tmp_alt;
                $tmp_meta_ARRAY['title'] = $tmp_title;
                $tmp_meta_ARRAY['hyperlink'] = $tmp_link;
                $tmp_meta_ARRAY['target'] = $tmp_target;
                $tmp_meta_ARRAY['raw_output_mode'] = $tmp_raw_output_mode;
                $tmp_meta_ARRAY['output_mode'] = $output_mode;

                */

                self::$oCRNRSTN_RRS_MAP->initialize_response_map_cache($output_method, $output_mode, $param0, $param1);

            break;
            case 'return_file_http_string':

                //
                // $output_method = 'return_file_http_string'
                // $param0 = $url
                self::$oCRNRSTN_RRS_MAP->initialize_response_map_cache($output_method, $output_mode, $param0);

            break;
            case 'return_image_html_wrapped_image_base64':

                //
                // $output_method = 'return_image_html_wrapped'
                // $param0 = $image_html
                // $param1 = $base64_filepath
                // $param2 = $height
                // $param3 = $alt
                // $param4 = $title
                // $param5 = $link
                // $param6 = $target
                // $param7 = $asset_family
                // $param8 = $output_mode
                // $param9 = $asset_mapping_mode
                // $param10 = $image_string
                self::$oCRNRSTN_RRS_MAP->initialize_response_map_cache($output_method, $output_mode, $param0, $param1, $param2, $param3, $param4, $param5, $param6, $param7, $param8, $param9, $param10);

            break;
            case 'return_image_html_wrapped':

                //
                // $output_method = 'return_image_html_wrapped'
                // $param0 = $filename
                // $param1 = $width
                // $param2 = $height
                // $param3 = $alt
                // $param4 = $title
                // $param5 = $link
                // $param6 = $target
                // $param7 = $asset_family
                // $param8 = $output_mode
                // $param9 = $asset_mapping_mode
                // $param10 = $image_string
                self::$oCRNRSTN_RRS_MAP->initialize_response_map_cache($output_method, $output_mode, $param0, $param1, $param2, $param3, $param4, $param5, $param6, $param7, $param8, $param9, $param10);

            break;
            case 'return_js_css_string_output':

                //
                // $output_method = 'return_js_css_string_output'
                // $param0 = $js_integer_constant
                // $param1 = $css_integer_constant
                // $param2 = $footer_html_output[boolean]
                // $param3 = $is_dev_mode[boolean]
                self::$oCRNRSTN_RRS_MAP->initialize_response_map_cache($output_method, $output_mode, $param0, $param1, $param2, $param3);

            break;
            case 'return_asset_data':

                //
                // $output_method = 'return_asset_data'
                // $param0 = $asset_meta_key
                // $param1 = $request_ugc_value
                // $param2 = $request_family
                // $param3 = $asset_meta_path
                self::$oCRNRSTN_RRS_MAP->initialize_response_map_cache($output_method, $output_mode, $param0, $param1, $param2, $param3);

            break;
            case 'return_css_string_output':
            case 'return_js_string_output':

                //
                // $output_method = 'return_file_string_output'
                // $param0 = $const
                // $param1 = $footer_html_output[boolean]
                // $param2 = $is_dev_mode[boolean]
                self::$oCRNRSTN_RRS_MAP->initialize_response_map_cache($output_method, $output_mode, $param0, $param1, $param2);

            break;
            case 'return_file_byte_chunked_buffer_output':

                //
                // $output_method = 'return_file_byte_chunked_buffer_output'
                // $param0 = $filepath
                // $param1 = $filename
                // $param2 = $file_extension
                //
                // initialize_response_map_cache('return_file_byte_chunked_buffer_output', $output_mode, $filepath, $filename, $file_extension)
                self::$oCRNRSTN_RRS_MAP->initialize_response_map_cache($output_method, $output_mode, $param0, $param1, $param2);

            break;
            default:

                $this->error_log('Unknown output method [' . $output_method . '] provided. Unable to return requested resource [' . $param0 . '] [' . $param1 . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
                //error_log(__LINE__ . ' crnrstn Unknown output method [' . $output_method . '] provided. Unable to return requested resource [' . $param0 . '] [' . $param1 . '].');

            break;

        }

    }

    public function return_file_http_string($url, $output_mode = NULL){

        return $this->oCRNRSTN_ASSET_MGR->return_file_http_string($url, $output_mode);

    }

    public function return_image_html_wrapped($tmp_filename, $tmp_width, $tmp_height, $tmp_alt, $tmp_title, $tmp_link, $tmp_target, $tmp_asset_family, $tmp_output_mode, $tmp_filename_override = NULL){

        return $this->oCRNRSTN_ASSET_MGR->return_image_html_wrapped($tmp_filename, $tmp_width, $tmp_height, $tmp_alt, $tmp_title, $tmp_link, $tmp_target, $tmp_asset_family, $tmp_output_mode, $tmp_filename_override);

    }

    public function return_js_css_string_output($js_integer_constant, $css_integer_constant, $footer_html_output, $is_dev_mode){

        return $this->oCRNRSTN_ASSET_MGR->return_js_css_string_output($js_integer_constant, $css_integer_constant, $footer_html_output, $is_dev_mode);

    }

    public function asset_data_meta($asset_data_key, $asset_family = NULL, $width_override = NULL, $height_override = NULL, $link_override = NULL, $alt_override = NULL, $title_override = NULL, $target_override = NULL, $path = NULL, $output_mode = CRNRSTN_FILE_MANAGEMENT){

        return $this->oCRNRSTN_ASSET_MGR->asset_data_meta($asset_data_key, $asset_family, $width_override, $height_override, $link_override, $alt_override, $title_override, $target_override, $path, $output_mode);

    }

    public function asset_data($request_ugc_value, $output_mode = CRNRSTN_FILE_MANAGEMENT){

        return $this->oCRNRSTN_ASSET_MGR->asset_data($request_ugc_value, NULL, NULL, NULL, NULL, NULL, NULL, $output_mode);

    }

    public function return_asset_data($request_ugc_value, $request_family, $asset_meta_key, $asset_meta_path, $channel = CRNRSTN_CHANNEL_RUNTIME){

        return $this->oCRNRSTN_ASSET_MGR->return_asset_data($request_ugc_value, $request_family, $asset_meta_key, $asset_meta_path, $channel);

    }

    public function return_css_string_output($const, $footer_html_output, $is_dev_mode){

        return $this->oCRNRSTN_ASSET_MGR->return_css_string_output($const, $footer_html_output, $is_dev_mode);

    }

    public function return_js_string_output($const, $footer_html_output, $is_dev_mode){

        return $this->oCRNRSTN_ASSET_MGR->return_js_string_output($const, $footer_html_output, $is_dev_mode);

    }

    public function return_file_byte_chunked_buffer_output($filepath_override = NULL, $filename = NULL, $file_extension = NULL, $output_mode = NULL, $channel = return_crnrstn_asset_family){

        //
        // TODO :: STRENGTHEN OVERRIDE PARAMETERS. AT LEAST ADD BASIC FILE CHECKS AND THROW 404 WITH AN ERROR MESSAGE.
        if(isset($filepath_override)){

            if(isset($filename) && isset($file_extension)){

                $tmp_filepath = $filepath_override;
                $tmp_filename = $filename;
                $tmp_file_extension = $file_extension;

            }else{

                $this->error_log('Unable to return file output due to missing data.', __LINE__, __METHOD__, __FILE__, CRNRSTN_BARNEY);

            }

        }else{

            $tmp_filepath = self::$oCRNRSTN_RRS_MAP->rrs_map_data_cache_return('filepath', $output_mode);
            $tmp_filename = self::$oCRNRSTN_RRS_MAP->rrs_map_data_cache_return('filename', $output_mode);
            $tmp_file_extension = self::$oCRNRSTN_RRS_MAP->rrs_map_data_cache_return('file_ext', $output_mode);

        }

        $this->oCRNRSTN_ASSET_MGR->return_file_byte_chunked_buffer_output($tmp_filepath, $tmp_filename, $tmp_file_extension, $output_mode, $channel);

    }

    public function rrs_map_data_cache_return($name, $filename = NULL, $asset_family = NULL, $response_serial = NULL){

        return self::$oCRNRSTN_RRS_MAP->rrs_map_data_cache_return($name, $filename, $asset_family, $response_serial);

    }

    public function return_response_map_asset_meta_path(){

        return self::$oCRNRSTN_RRS_MAP->return_response_map_asset_meta_path();

    }

    public function return_response_map_asset_meta_key(){

        return self::$oCRNRSTN_RRS_MAP->return_response_map_asset_meta_key();

    }

    public function return_response_map_ugc_value($data_override = NULL, $raw_output_mode = NULL, $output_mode = NULL){
        // $data_override = [filename] ...or even a map key.

        return self::$oCRNRSTN_RRS_MAP->return_response_map_ugc_value($data_override, $raw_output_mode, $output_mode);

    }

    public function return_crnrstn_asset_family($channel = CRNRSTN_CHANNEL_RUNTIME){

        return self::$oCRNRSTN_RRS_MAP->return_crnrstn_asset_family($channel);

    }

//    public function spooled_response_output(){
//
//        return self::$oCRNRSTN_RRS_MAP->spooled_response_output();
//
//    }

    public function create_pwd_hash_for_storage($user_submitted_password, $cost = 9){

        /**
         * CONSIDER RUNNING benchmark_bestPasswordHashCost() AND THEN UPDATE
         * THIS METHOD, ACCORDINGLY FOR 'cost' => ???
         * You want to set the highest cost that you can without slowing down
         * you server too much. 8-10 is a good baseline, and more is good if your servers
         * are fast enough. benchmark_bestPasswordHashCost() aims for ≤ 50 milliseconds
         * stretching time, which is a good baseline for systems handling interactive logins.
         */

        $options = [
            'cost' => $cost,
        ];

        return password_hash($user_submitted_password, PASSWORD_BCRYPT, $options);

    }

    //
    // RETURN HTTP/S PATH OF CURRENT SCRIPT
    public function current_location(){

        if(isset($_SERVER['HTTPS'])){

            if($_SERVER['HTTPS'] && ($_SERVER['HTTPS'] != 'off')){

                self::$requestProtocol = 'https://';

            }else{

                if(isset($_SERVER['HTTP_X_FORWARDED_PROTO'])){

                    if(!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https'){

                        self::$requestProtocol = 'https://';

                    }else{

                        self::$requestProtocol = 'http://';

                    }

                }else{

                    self::$requestProtocol = 'http://';

                }

            }

        }else{

            self::$requestProtocol = 'http://';

        }

        return self::$requestProtocol . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];

    }

    public function proper_version($system = 'CRNRSTN'){

        $system = trim(strtoupper($system));

        switch($system){
            case 'LINUX':

                return $this->version_linux();

            break;
            case 'APACHE':

                return 'Apache v' . $this->version_apache();

            break;
            case 'MYSQLI':

                return 'MySQLi v' . $this->version_mysqli();

            break;
            case 'PHP':

                return 'php v' . $this->version_php();

            break;
            case 'SOAP':

                return $this->version_soap();

            break;
            case 'OPENSSL':

                return 'OpenSSL v' . $this->version_openssl();

            break;
            case 'CRNRSTN':

                return 'CRNRSTN :: v' . $this->version_crnrstn();

            break;
            default:

                return 'UNKNOWN[' . $system . '] :: v[x].[y].[z]';

            break;

        }

    }

    public function byte_reporting($report_profile, $channel, $source, $data_len = NULL){

        switch($report_profile){
            case 'total_bytes_processed[r]':
                //READ

                return self::$oCRNRSTN_RRS_MAP->byte_reporting('total_bytes_processed[r]', $channel, $source);

            break;
            case 'channel_bytes_processed[r]':
                //READ

                return self::$oCRNRSTN_RRS_MAP->byte_reporting('channel_bytes_processed[r]', $channel, $source);

            break;
            case 'total_bytes_processed[w]':
                //WRITES

                foreach($channel as $ch_index => $ch_channel){

                    //
                    // EXTRACT REPORTING FOR CHANNEL BYTE STORAGE.
                    $tmp_total_bytes_processed[$ch_channel] = self::$oCRNRSTN_RRS_MAP->byte_reporting('total_bytes_processed[r]', $ch_channel, $source);

                    //
                    // INCREMENT BYTES PROCESSED BY CHANNEL.
                    $tmp_total_bytes_processed[$ch_channel] += (int) $data_len;

                    self::$oCRNRSTN_RRS_MAP->byte_reporting('total_bytes_processed[w]', $ch_channel, $source, $tmp_total_bytes_processed);

                }

            break;
            case 'channel_bytes_processed[w]':
                //WRITES

                //
                // EXTRACT REPORTING FOR CHANNEL BYTE STORAGE.
                $tmp_total_bytes_processed = self::$oCRNRSTN_RRS_MAP->byte_reporting('channel_bytes_processed[r]', $channel, $source);

                $tmp_total_bytes = $tmp_total_bytes_processed[$channel];
                $tmp_total_bytes += $data_len;

                $tmp_total_bytes_processed[$channel] = (int) $tmp_total_bytes;

                 // error_log(__LINE__ . '  crnrstn $channel[' . $this->get_channel_config($channel, 'NAME') . ']. tmp_total_bytes[' . print_r($tmp_total_bytes, true) . ']. ');
                 // error_log(__LINE__ . '  crnrstn $channel[' . $channel . ']. tmp_total_bytes[' . print_r($tmp_total_bytes, true) . ']. ');
                 // die();
                self::$oCRNRSTN_RRS_MAP->byte_reporting('channel_bytes_processed[w]', $channel, $source, $tmp_total_bytes_processed);

            break;

        }

        return true;

    }

    public function format_sql_interval($interval_str){

        /*
        Wednesday, October 4, 2023 @ 0025 hrs.

        https://dev.mysql.com/doc/refman/8.0/en/expressions.html
        The following table shows the expected form of the expr argument for each unit value.

        Table 9.2 Temporal Interval Expression and Unit Arguments
        unit Value	        Expected expr Format
        -----               -----
        MICROSECOND	        MICROSECONDS
        SECOND	            SECONDS
        MINUTE	            MINUTES
        HOUR	            HOURS
        DAY	                DAYS
        WEEK	            WEEKS
        MONTH	            MONTHS
        QUARTER	            QUARTERS
        YEAR	            YEARS
        SECOND_MICROSECOND	'SECONDS.MICROSECONDS'
        MINUTE_MICROSECOND	'MINUTES:SECONDS.MICROSECONDS'
        MINUTE_SECOND	    'MINUTES:SECONDS'
        HOUR_MICROSECOND	'HOURS:MINUTES:SECONDS.MICROSECONDS'
        HOUR_SECOND	        'HOURS:MINUTES:SECONDS'
        HOUR_MINUTE	        'HOURS:MINUTES'
        DAY_MICROSECOND	    'DAYS HOURS:MINUTES:SECONDS.MICROSECONDS'
        DAY_SECOND	        'DAYS HOURS:MINUTES:SECONDS'
        DAY_MINUTE	        'DAYS HOURS:MINUTES'
        DAY_HOUR	        'DAYS HOURS'
        YEAR_MONTH	        'YEARS-MONTHS'

        */

        try{

            $tmp_is_seconds = false;

            //
            // IS THIS JUST SECONDS?
            if(is_numeric($interval_str)){

                $tmp_is_seconds = true;

            }

            //
            // HANDLE BASE INTEGERS AS SECONDS.
            if($tmp_is_seconds == true){

                foreach(self::$sql_interval_ARRAY['UNITS']['VALUES'][self::$sql_interval_ARRAY['UNITS']['STRING_PATTERN']['SECOND']] as $tmp_unit => $tmp_format){

                    return $interval_str . ' ' . $tmp_unit;

                }

            }

            //
            // STRIP SPACES. UPPERCASE.
            $tmp_interval = $this->str_sanitize($interval_str, 'sql_interval');

            //
            // UPPERCASE.
            $tmp_interval_upper = strtoupper($interval_str);

            foreach(self::$sql_interval_ARRAY['UNITS']['STRING_PATTERN'] as $tmp_unit_str_ptrn => $unit_index){

                $tmp_pos_unit = strpos($tmp_interval, $tmp_unit_str_ptrn);
                if($tmp_pos_unit !== false){

                    //
                    // SUCCESSFUL MATCH ON SQL INTERVAL UNIT.
                    // ACQUIRE THE INTEGER/FLOAT VALUE VIA SPLITTING THE DATA ON UNIT.
                    $tmp_data_str_ARRAY = explode($tmp_unit_str_ptrn, $tmp_interval_upper);
                    foreach(self::$sql_interval_ARRAY['UNITS']['VALUES'][$unit_index] as $tmp_unit => $tmp_format){

                        return $tmp_data_str_ARRAY[0] . ' ' . $tmp_unit;

                    }

                    break 1;

                }

            }

            //
            // HOOOSTON...VE HAF PROBLEM!
            $this->error_log('CRNRSTN :: is unable to format the input data, ' . $interval_str . ', to a recognized SQL time interval. ' . $this->data_report($interval_str, 'CRNRSTN :: MC-DDO INPUT DATA REPORT |'), __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            throw new Exception('CRNRSTN :: is unable to format the input data, ' . $interval_str . ', to a recognized SQL time interval. ' . $this->data_report($interval_str, 'CRNRSTN :: MC-DDO INPUT DATA REPORT |'));

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return NULL;

        }

    }

    //
    // SOURCE :: https://www.php.net/manual/en/function.floatval
    // COMMENT :: https://www.php.net/manual/en/function.floatval.php#106367
    // AUTHOR :: PapaPinguoin :: https://www.php.net/manual/en/function.floatval.php#106367
    public function float_to_str($val){
        //public function remove_scientific_notation($val){

        // EN: To view the very large and very small numbers (eg from a database DECIMAL), without displaying scientific
        // notation, or leading zeros.

        // FR : Pour afficher les très grand et très petits nombres (ex. depuis une base de données DECIMAL), sans
        // afficher la notation scientifique, ni les zéros non significatifs.

        /*
        echo floattostr("0000000000000001");
        echo floattostr("1.00000000000000");
        echo floattostr("0.00000000001000");
        echo floattostr("0000.00010000000");
        echo floattostr("000000010000000000.00000000000010000000000");
        echo floattostr("-0000000000000.1");
        echo floattostr("-00000001.100000");

        // result
        // 1
        // 1
        // 0.00000000001
        // 0.0001
        // 10000000000.0000000000001
        // -0.1
        // -1.1

        */

        preg_match("#^([\+\-]|)([0-9]*)(\.([0-9]*?)|)(0*)$#", trim($val), $o);
        return $o[1].sprintf('%d',$o[2]).($o[3]!='.'?$o[3]:'');

    }

    public function data_reporting_bytes($data, $integer_mode_bytes = true){
        // USED BY FORMAT_BYTES; SO (BYTES) INTEGER IN...(BYTES) INTEGER OUT.
        // TODO :: ADD METHOD INPUT PARAMETER TO MODULATE INTEGER HANDLING BEHAVIOR.

        $bytes = 0;

        $tmp_data_type = $this->gettype($data,  CRNRSTN_INTEGER);

        switch($tmp_data_type){
            case CRNRSTN_STRING:

                //
                // SOURCE :: https://stackoverflow.com/questions/7568949/measure-string-size-in-bytes-in-php
                // AUTHOR :: Ulver :: https://stackoverflow.com/users/1773335/ulver
                // COMMENT :: https://stackoverflow.com/a/25299281
                //
                // Further to PhoneixS answer to get the correct length of string in bytes - Since mb_strlen()
                // is slower than strlen(), for the best performance one can check "mbstring.func_overload" ini
                // setting so that mb_strlen() is used only when it is really required:
                //
                // Thankfully, this check is no longer needed as of PHP 8.0.0. The function overloading
                // "feature" has been removed as of PHP 8.0.0, and deprecated in 7.2.0.
                // - Buttle Butkus, 2022, https://stackoverflow.com/a/7568984
                //
                // CRNRSTN :: PHP SUPPORT.
                // PHP 5 >= 5.5, PHP 6, PHP 7, PHP 8.
                $bytes = self::$mbstring_func_overload ? mb_strlen((string) $data, '8bit') : strlen((string) $data);

            break;
            case CRNRSTN_INT:
            case CRNRSTN_INTEGER:

                if($integer_mode_bytes !== false){

                    $bytes = (int) $data;

                }else{

                    //
                    // CRNRSTN :: PHP SUPPORT.
                    // PHP 5 >= 5.5, PHP 6, PHP 7, PHP 8.
                    $bytes = self::$mbstring_func_overload ? mb_strlen((string) $data, '8bit') : strlen((string) $data);

                }

            break;
            case CRNRSTN_BOOL:
            case CRNRSTN_BOOLEAN:

                $bytes = 1;

                /*
                SOURCE :: https://dev.to/shevchenkonik/memory-size-of-javascript-boolean-3mlj
                          Posted on Feb 20, 2020
                          [Originally published at shevchenkonik.com]
                AUTHOR :: Nik Shevchenko

                A boolean is actually 1 byte. But alignment may cause
                4 bytes to be used on a 32-bit platform or 8 bytes on
                a 64-bit platform. This old trick comes from the
                observation that allocated memory takes up at least 4
                or 8 bytes, and are aligned in the way that the least
                significant bit or three will be zero.

                In C++, the size of the type boolean is implementation-
                defined (expr.sizeof[p1]) and is usually equal to 1
                (the size of the type char, and the smallest size a
                type can have), but is not required to be
                (expr.sizeof[fn77]): in particular, in Visual Studio
                up to version 4.2, it was 4. More information about
                C++ boolean values is available at docs[expr.sizeof(7.6.2.4)].

                */

                $tmp_os_bit_size = $this->return_system_info('os_bit_size');
                switch($tmp_os_bit_size){
                    case 32:

                        $bytes = 4;

                    break;
                    case 64:

                        $bytes = 8;

                    break;
                    default:

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        $this->error_log('Unknown operating system bit size. 8 bytes will be assigned for BOOLEAN data; on 64-bit platforms, CRNRSTN :: reports BOOLEAN data as 8 bytes.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
                        $bytes = 8;

                    break;

                }

            break;
            case CRNRSTN_FLOAT:
            case CRNRSTN_DOUBLE:
                //NO CHANGE IS POSSIBLE WITHOUT DATA LOSS.

                if(!($integer_mode_bytes !== false)){

                    //
                    // CRNRSTN :: PHP SUPPORT.
                    // PHP 5 >= 5.5, PHP 6, PHP 7, PHP 8.
                    $bytes = self::$mbstring_func_overload ? mb_strlen((string) $data, '8bit') : strlen((string) $data);

                }

            break;
            case CRNRSTN_ARRAY:
            case CRNRSTN_OBJECT:
            case CRNRSTN_RESOURCE:
            case CRNRSTN_RESOURCE_CLOSED:
            case CRNRSTN_UNKNOWN_TYPE:

                $bytes = strlen(serialize($data));

            break;
            case CRNRSTN_NULL:

                /*
                SOURCE :: https://stackoverflow.com/questions/2430655/java-does-null-variable-require-space-in-memory
                COMMENT :: https://stackoverflow.com/a/2430672
                AUTHOR :: dsimcha :: https://stackoverflow.com/users/23903/dsimcha

                In Java, null is just a value that a reference (which is
                basically a restricted pointer) can have. It means that
                the reference refers to nothing. In this case you still
                consume the space for the reference. This is 4 bytes on
                32-bit systems or 8 bytes on 64-bit systems. However,
                you're not consuming any space for the class that the
                reference points to until you actually allocate an
                instance of that class to point the reference at.

                */

                $tmp_os_bit_size = $this->return_system_info('os_bit_size');
                switch($tmp_os_bit_size){
                    case 32:

                        $bytes = 4;

                    break;
                    case 64:

                        $bytes = 8;

                    break;
                    default:

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        $this->error_log('Unknown operating system bit size. 8 bytes will be assigned for NULL data; on 64-bit platforms, CRNRSTN :: reports NULL data as 8 bytes.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
                        $bytes = 8;

                    break;

                }

                break;

        }

        return $bytes;

    }

    //
    // SOURCE :: https://stackoverflow.com/questions/2510434/format-bytes-to-kilobytes-megabytes-gigabytes
    // COMMENT :: https://stackoverflow.com/a/2510459
    // AUTHOR :: Leo :: https://stackoverflow.com/users/227532/leo
    public function format_bytes($bytes, $precision_override = NULL, $SI_output_override = NULL, $always_bytes_out = false){

        try{

            //
            // CONVERT ALL INPUT DATUM INTO A MORE PROPER
            // INTEGER BYTES REPRESENTATION FOR PROPER
            // OUTPUT FORMATTING.
            //
            // Friday, December 8, 2023 @ 0019 hrs.
            $bytes = $this->data_reporting_bytes($bytes);

            //
            // CRNRSTN :: CONFIGURATION OVERRIDE.
            // FILE: _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php
            // SEE: byte_reporting_precision
            if(!isset($precision_override)){

                $precision_override = self::$byte_reporting_precision;

            }

            //
            // CRNRSTN :: CONFIGURATION SETTINGS OVERRIDE.
            // FILE: _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php
            // SEE: byte_reporting_units
            if(!isset($SI_output_override)){

                if(self::$byte_reporting_units == 'SI_METRIC'){

                    $SI_output_override = true;

                }

            }

            //
            // IF STRING, BASIC TIDY UP.
            if(is_string($bytes)){

                $bytes = trim($bytes);

            }

            //
            // INTEGER BYTES PROCESSING TO HUMAN READABLE ISO/IEC 80000-13 OR SI METRIC STRING DATA.
            // ISO/IEC 80000-13
            //      Part 13: Information science and technology
            //      The Standard also includes definitions for units relating to information technology, such as the
            //      erlang (E), bit (bit), octet (o), byte (B), baud (Bd), shannon (Sh), hartley (Hart) and the natural
            //      unit of information (nat).
            //
            //      Clause 4 of the Standard defines standard binary prefixes used to denote powers of 1024 as
            //      1024^1 (kibi-), 1024^2 (mebi-), 1024^3 (gibi-), 1024^4 (tebi-), 1024^5 (pebi-), 1024^6 (exbi-),
            //      1024^7 (zebi-) and 1024^8 (yobi-).
            //
            //      International System of Quantities
            //      Part 1 of ISO 80000 introduces the International System of Quantities and describes its relationship
            //      with the International System of Units (SI). Specifically, its introduction states "The system of
            //      quantities, including the relations among the quantities used as the basis of the units of the SI,
            //      is named the International System of Quantities, denoted 'ISQ', in all languages." It further
            //      clarifies that "ISQ is simply a convenient notation to assign to the essentially infinite and
            //      continually evolving and expanding system of quantities and equations on which all of modern science
            //      and technology rests. ISQ is a shorthand notation for the 'system of quantities on which the SI
            //      is based'."
            //
            // https://en.wikipedia.org/wiki/ISO/IEC_80000#Part_13:_Information_science_and_technology
            // This page was last edited on 12 August 2023, at 08:50 (UTC).
            //
            // International System of Units
            //
            //      The BIPM specifies 24 prefixes for the International System of Units (SI):
            //      SI prefixes
            //      Prefix	            Base 10	    Decimal	Adoption
            //      Name	Symbol
            //      quetta	Q	        10^30	    1000000000000000000000000000000	    2022
            //      ronna	R	        10^27	    1000000000000000000000000000        2022
            //      yotta	Y	        10^24	    1000000000000000000000000	        1991
            //      zetta	Z	        10^21	    1000000000000000000000              1991
            //      exa	    E	        10^18	    1000000000000000000	                1975
            //      peta	P	        10^15	    1000000000000000                    1975
            //      tera	T	        10^12	    1000000000000	                    1960
            //      giga	G	        10^9	    1000000000                          1960
            //      mega	M	        10^6	    1000000	                            1873
            //      kilo	k	        10^3	    1000	                            1795
            //      hecto	h	        10^2	    100                                 1795
            //      deca	da	        10^1	    10                                  1795
            //      —	    —	        10^0	    1	                                —
            //      deci	d	        10^−1	    0.1	                                1795
            //      centi	c	        10^−2	    0.01                                1795
            //      milli	m	        10^−3	    0.001                               1795
            //      micro	μ	        10^−6	    0.000001	                        1873
            //      nano	n	        10^−9	    0.000000001	                        1960
            //      pico	p	        10^−12	    0.000000000001                      1960
            //      femto	f	        10^−15	    0.000000000000001	                1964
            //      atto	a	        10^−18	    0.000000000000000001                1964
            //      zepto	z	        10^−21	    0.000000000000000000001	            1991
            //      yocto	y	        10^−24	    0.000000000000000000000001          1991
            //      ronto	r	        10^−27	    0.000000000000000000000000001	    2022
            //      quecto	q	        10^−30	    0.000000000000000000000000000001    2022
            //
            //      Notes
            //      Prefixes adopted before 1960 already existed before SI. The introduction of the CGS system was
            //      in 1873.
            //
            // https://en.wikipedia.org/wiki/International_System_of_Units
            // This page was last edited on 26 September 2023, at 19:58 (UTC).
            if(is_numeric($bytes)){

                if($always_bytes_out == true){

                    //
                    // BYTES IN; BYTES OUT. ALWAYS.
                    return $bytes;

                }

                $bytes = $bytes * 1;

                //
                // CRNRSTN v2.00.0000 :: MODS
                // SEE :: https://en.wikipedia.org/wiki/Binary_prefix
                // SEE ALSO :: ISO/IEC 80000 family of standards (November 1, 2009)
                // https://en.wikipedia.org/wiki/ISO/IEC_80000#Information_science_and_technology
                // SEE COMMENT BY DEVATOR [https://stackoverflow.com/users/659731/devator] JUST
                // BENEATH THE METHOD [format_bytes()] AUTHOR'S RESPONSE AT SOURCE LINK. THIS IS MY
                // IMPETUS TO INCLUDE THE ABOVE LINKS TO ADDITIONAL MATERIAL FROM WIKIPEDIA INTO
                // THIS SOURCE CODE.
                if($SI_output_override == true){

                    //
                    // SI :: METRIC.
                    $units = self::$byte_units_ARRAY['SI_METRIC']['UNITS'];
                    $units_power = 1000;

                }else{

                    //
                    // IEC :: ISO 80000-13 OR IEC 80000-13.
                    $units = self::$byte_units_ARRAY['ISO_80000']['UNITS'];
                    $units_power = 1024;

                }

                $bytes = max($bytes, 0);
                $pow = floor(($bytes ? log($bytes) : 0) / log($units_power));
                $pow = min($pow, count($units) - 1);

                $bytes /= pow($units_power, $pow);

                $tmp_number = round($bytes, $precision_override);
                $tmp_number = $this->number_format_keep_precision($tmp_number);

                //
                // BYTES :: HUMAN READABLE.
                return $tmp_number . ' ' . $units[$pow];

            }

            /*
            CRNRSTN :: SI_METRIC (Decimal)
            -----
            Value	    Metric
            1000	    kB	kilobyte
            1000^2	    MB	megabyte
            1000^3	    GB	gigabyte
            1000^4	    TB	terabyte
            1000^5	    PB	petabyte
            1000^6	    EB	exabyte
            1000^7	    ZB	zettabyte
            1000^8	    YB	yottabyte
            1000^9	    RB	ronnabyte
            1000^10	    QB	quettabyte

            CRNRSTN :: ISO_80000 (Binary)
            -----
            Value	    IEC	            Memory
            1024	    KiB	kibibyte	KB	kilobyte
            1024^2	    MiB	mebibyte	MB	megabyte
            1024^3	    GiB	gibibyte	GB	gigabyte
            1024^4	    TiB	tebibyte	TB	terabyte
            1024^5	    PiB	pebibyte	    –
            1024^6	    EiB	exbibyte	    –
            1024^7	    ZiB	zebibyte	    –
            1024^8	    YiB	yobibyte	    –
                            –
                            –

            https://en.wikipedia.org/wiki/Byte#Multiple-byte_units
            This page was last edited on 30 August 2023, at 16:54 (UTC).

            */

            //
            // HUMAN READABLE STRING BYTES PROCESSING TO INTEGER DATA.
            $tmp_bytes_human_str_to_lower = $this->str_sanitize($bytes, 'string_to_bytes');

            //$tmp_detection_track_breadcrumb_ARRAY = array();
            $tmp_input_byte_unit_matched = NULL;
            $tmp_unit_system = NULL;
            $tmp_unit_index = NULL;

            //
            // IS THERE AN ISO/IEC 80000-13 2 CHAR/FULL TEXT UNIT MATCH TO INPUT DATA?
            foreach(self::$byte_units_ARRAY['ISO_80000']['STRING_PATTERN']['ISO_UNITS_EXPONENTIAL'] as $unit_pattern => $unit_word){

                $tmp_iso_short_pos = strpos($tmp_bytes_human_str_to_lower, $unit_pattern);
                $tmp_iso_full_pos = strpos($tmp_bytes_human_str_to_lower, $unit_word);
                if(($tmp_iso_short_pos !== false) || ($tmp_iso_full_pos !== false)){

                    //
                    // WE HAVE ISO 80000 INPUT.
                    $tmp_input_byte_unit_matched = $unit_pattern;
                    if(isset(self::$byte_units_ARRAY['ISO_80000']['CONTROL_PATTERN'][$unit_pattern])){

                        //
                        // IS THERE A MATCH?
                        if($tmp_iso_full_pos !== false){

                            //
                            // EXTRACT THE NUMBER.
                            $tmp_str_explode_ARRAY = explode($unit_word, $tmp_bytes_human_str_to_lower);
                            $tmp_number = $tmp_str_explode_ARRAY[0];
                            //$tmp_detection_track_breadcrumb_ARRAY[] = '<br>' . __LINE__ . ' ISO STRING MATCH ON: ' . $unit_word . '. ';

                        }else{

                            //
                            // EXTRACT THE NUMBER.
                            $tmp_str_explode_ARRAY = explode($unit_pattern, $tmp_bytes_human_str_to_lower);
                            $tmp_number = $tmp_str_explode_ARRAY[0];
                            //$tmp_detection_track_breadcrumb_ARRAY[] = '<br>' . __LINE__ . ' ISO STRING MATCH ON: ' . $unit_pattern . '. ';

                        }

                        $tmp_unit_system = 'ISO_80000';
                        $tmp_unit_index = self::$byte_units_ARRAY['ISO_80000']['CONTROL_PATTERN'][$unit_pattern];

                    }

                    break 1;

                }

            }

            //
            // CHECK FOR SI METRIC UNIT 2 CHAR AND FULL-TEXT MATCH TO INPUT DATA, IF NO MATCH YET.
            if(!isset($tmp_input_byte_unit_matched)){

                //
                // IS THERE AN SI METRIC 2 CHAR/FULL TEXT UNIT MATCH?
                foreach(self::$byte_units_ARRAY['SI_METRIC']['STRING_PATTERN']['SI_UNITS_EXPONENTIAL'] as $unit_pattern => $unit_word){

                    $tmp_si_short_pos = strpos($tmp_bytes_human_str_to_lower, $unit_pattern);
                    $tmp_si_full_pos = strpos($tmp_bytes_human_str_to_lower, $unit_word);

                    //
                    // ACCELERATE FULL STRING (WORD) MATCHES ON EXPONENTIAL SI METRIC UNITS.
                    if($tmp_si_full_pos !== false){

                        //
                        // EXTRACT THE NUMBER.
                        $tmp_str_explode_ARRAY = explode($unit_word, $tmp_bytes_human_str_to_lower);
                        $tmp_number = $tmp_str_explode_ARRAY[0];

                        $tmp_input_byte_unit_matched = $unit_pattern;
                        //$tmp_detection_track_breadcrumb_ARRAY[] = '<br>' . __LINE__ . ' SI STRING [FULL] MATCH ON: ' . $unit_word . '. ';

                        $tmp_unit_system = 'SI_METRIC';
                        $tmp_unit_index = self::$byte_units_ARRAY['SI_METRIC']['CONTROL_PATTERN'][$unit_pattern];

                        break 1;

                    }

                    //
                    // POSSIBLE SI UNITS MATCH.
                    if($tmp_si_short_pos !== false){

                        //
                        // WE MAY HAVE SI METRIC INPUT.
                        $tmp_input_byte_unit_matched = $unit_pattern;
                        if(isset(self::$byte_units_ARRAY['SI_METRIC']['CONTROL_PATTERN'][$unit_pattern])){

                            //$tmp_detection_track_breadcrumb_ARRAY[] = '<br>' . __LINE__ . ' SI STRING MATCH ON: ' . $unit_pattern . '. ';

                            //
                            // THESE UNITS COULD COLLIDE WITH VALID BASIC BITCH BYTES STRING PATTERNS.
                            if((self::$byte_units_ARRAY['SI_METRIC']['CONTROL_PATTERN'][$unit_pattern] == 4) ||
                                (self::$byte_units_ARRAY['SI_METRIC']['CONTROL_PATTERN'][$unit_pattern] == 6) ||
                                (self::$byte_units_ARRAY['SI_METRIC']['CONTROL_PATTERN'][$unit_pattern] == 8)){

                                //
                                // WE LOOK FOR A POSITIVE IDENTIFICATION OF BASIC BITCH BYTES STRING PATTERNS
                                // OF "bytes" AND "byte". THE DATA SUPPOSEDLY...LOOKS LIKE, "123456 TB", "123456 XB",
                                // OR "123456 YB", BUT THE MATCHED PATTERNS ARE LITERALLY ONLY: "t", "e", OR "y".
                                //
                                // WHEN "BYTES" IS SPELLED CORRECTLY (AND I MEAN...ANYTHING CLOSE TO IT), LIKE WHEN
                                // E.G. MAX POST SIZE="123456 BYTES"....BASICALLY ANY OF THE STRING PATTERNS FOR
                                // Terabyte, Exabyte, OR Yottabyte COULD ALSO SCORE A POSITIVE MATCH ON THAT CRNRSTN ::
                                // SETTINGS CONFIGURATION DATA.
                                //
                                // SADLY,...AND ON PAPER...max_post_size = "123456 YB"
                                // IS NOTHING CLOSE TO max_post_size = "123456 bytes",
                                // MAN. AND YEAH, THEY BOTH HAVE A "y".
                                //
                                // Slater Being My Favorite ‘Dazed And Confused’
                                // Character For (almost) 8 Minutes Straight [, Man!]
                                // https://www.youtube.com/watch?v=7QmLhd2L8do

                                //
                                // CHECK FOR POSITIVE BYTES STRING MATCH BEFORE AUTHORIZING THE SELECTIONS OF
                                // TB (Terabyte), EB (Exabyte), AND YB (Yottabyte) EXPONENTIALS DUE TO POTENTIAL STRING
                                // ALGORITHM COLLISIONS WITH BASIC BITCH BYTE DETECTION.
                                foreach(self::$byte_units_ARRAY['ISO_80000']['STRING_PATTERN']['UNITS_BYTES_POSITIVE'] as $unit_pattern_iso => $control_index_int){

                                    $tmp_iso_short_pos = strpos($tmp_bytes_human_str_to_lower, $unit_pattern_iso);

                                    if($tmp_iso_short_pos !== false){

                                        //
                                        // EXTRACT THE NUMBER.
                                        $tmp_str_explode_ARRAY = explode($unit_pattern_iso, $tmp_bytes_human_str_to_lower);
                                        $tmp_number = $tmp_str_explode_ARRAY[0];

                                        //$tmp_detection_track_breadcrumb_ARRAY[] = '<br>' . __LINE__ . ' ISO STRING [BYTES POSITIVE] MATCH ON: ' . $unit_pattern_iso . '. ';

                                        //
                                        // A FINAL DOUBLE, TRIPLE CHECK. CHECK FOR LITERAL POSITIVE MATCHES ON
                                        // TB (Terabyte), EB (Exabyte), AND YB (Yottabyte).
                                        foreach(self::$byte_units_ARRAY['SI_METRIC']['STRING_PATTERN']['UNITS_EXPONENTIAL_POSITIVE'] as $unit_pattern_si => $control_index_si_int){

                                            $tmp_si_short_pos = strpos($tmp_bytes_human_str_to_lower, $unit_pattern_si);
                                            if($tmp_si_short_pos !== false){

                                                //
                                                // EXTRACT THE NUMBER.
                                                $tmp_str_explode_ARRAY = explode($unit_pattern_si, $tmp_bytes_human_str_to_lower);
                                                $tmp_number = $tmp_str_explode_ARRAY[0];

                                                //
                                                // POSITIVE MATCH ON LITERAL SI METRIC EXPONENTIAL. USE THIS.
                                                $tmp_input_byte_unit_matched = $control_index_si_int;
                                                //$tmp_detection_track_breadcrumb_ARRAY[] = '<br>' . __LINE__ . ' SI FULL STRING MATCH ON: ' . $unit_pattern_si . '. ';

                                                $tmp_unit_system = 'SI_METRIC';
                                                $tmp_unit_index = $control_index_si_int;

                                                break 2;

                                            }

                                        }

                                        //
                                        // THERE WAS A POSITIVE FULL STRING MATCH ON "BYTES". BEFORE HONORING
                                        // THIS, AND IN ORDER TO HAVE LESS CHANCE OF ILLNESS...AND SHORING UP
                                        // AGAINST FUTURE LAMENTATION, WE NEEDED TO CHECK (ABOVE) FIRST FOR
                                        // STRING COLLISIONS WITH OTHER FULL STRING ISO/IEC 80000 AND SI
                                        // METRIC UNITS. AT THIS POINT, GO AHEAD AND JUST FORCE BYTES.
                                        // THEN EJECT.
                                        $tmp_input_byte_unit_matched = self::$byte_units_ARRAY['ISO_80000']['STRING_PATTERN']['UNITS_BYTES_POSITIVE'][$unit_pattern_iso];
                                        //$tmp_detection_track_breadcrumb_ARRAY[] = '<br>' . __LINE__ . ' ISO BYTES POSITIVE ON: ' . $unit_pattern_iso;

                                        $tmp_unit_system = 'ISO_80000';
                                        $tmp_unit_index = $control_index_int;

                                        break 2;

                                    }

                                }

                            }

                            if(!isset($tmp_unit_system)){

                                //
                                // EXTRACT THE NUMBER.
                                $tmp_str_explode_ARRAY = explode($unit_pattern, $tmp_bytes_human_str_to_lower);
                                $tmp_number = $tmp_str_explode_ARRAY[0];

                                $tmp_unit_system = 'SI_METRIC';
                                $tmp_unit_index = self::$byte_units_ARRAY['SI_METRIC']['CONTROL_PATTERN'][$unit_pattern];

                            }

                        }

                        break 1;

                    }

                }

            }

            if(!isset($tmp_input_byte_unit_matched)){

                //
                // IF NO MATCH YET, CHECK FOR BASIC BITCH BYTES...AS STRING INPUT...? DUDE!?! I HOPE THAT
                // THIS IS GRUNT WORK INPUT FROM ANOTHER COMPUTER SYSTEM (E.G. UGC FROM CRNRSTN :: MESSENGER
                // UI INTERACT USER-TO-BOT BASIC BANTER/CHIT-CHAT.
                //
                // "500000000000 bytes to tb, slave" ...[THEN PRESSES ENTER TO SEND MESSAGE]
                foreach(self::$byte_units_ARRAY['ISO_80000']['STRING_PATTERN']['ISO_UNITS_BYTES'] as $unit_pattern_iso => $unit_word_iso){

                    $tmp_iso_short_pos = strpos($tmp_bytes_human_str_to_lower, $unit_pattern_iso);
                    if($tmp_iso_short_pos !== false){

                        //
                        // EXTRACT THE NUMBER.
                        $tmp_str_explode_ARRAY = explode($unit_pattern_iso, $tmp_bytes_human_str_to_lower);
                        $tmp_number = $tmp_str_explode_ARRAY[0];

                        //
                        // self::$byte_units_ARRAY['ISO_80000']['CONTROL_PATTERN'][$unit_pattern] FOR BYTES IS 0;
                        $tmp_input_byte_unit_matched = self::$byte_units_ARRAY['ISO_80000']['CONTROL_PATTERN'][$unit_pattern_iso];
                        //$tmp_detection_track_breadcrumb_ARRAY[] = '<br>' . __LINE__ . ' ISO STRING MATCH ON: ' . $unit_pattern_iso . '. ';

                        $tmp_unit_system = 'ISO_80000';
                        $tmp_unit_index = self::$byte_units_ARRAY['ISO_80000']['CONTROL_PATTERN'][$unit_pattern_iso];

                        break 1;

                    }

                }

            }

            if(!isset($tmp_input_byte_unit_matched)){

                //
                // HOOOSTON...VE HAF PROBLEM!
                //throw new Exception('Unable to determine ');
                $this->error_log('CRNRSTN :: is unable to convert the ' . strtoupper(gettype($bytes)) . ' input data, ' . $bytes . ', to integer bytes.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

                return '';

            }

            //
            // BYTES (0) WILL ASSUME THE SYSTEM OF UNITS AS INDICATED BY
            // CRNRSTN :: CONFIGURATION SETTINGS.
            if($tmp_unit_index == 0){

                $tmp_unit_system = self::$byte_reporting_units;

            }

            //
            // BYTES :: NOT HUMAN READABLE.
            return $this->to_bytes($tmp_number, $tmp_unit_index, $tmp_unit_system);

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            //
            // RETURN FALSE.
            return false;

        }

    }

    //
    // SOURCE :: https://stackoverflow.com/questions/11807115/php-convert-kb-mb-gb-tb-etc-to-bytes
    // COMMENT :: https://stackoverflow.com/a/17364338
    // AUTHOR :: Kristian Williams :: https://stackoverflow.com/users/1382046/kristian-williams
    private function to_bytes($number, $power, $system = 'ISO_80000'){

        //
        // ARE WE WORKING WITH A NUMBER?
        if(!is_numeric($number)){

            //
            // IT WOULD CERTAINLY APPEAR THAT THIS
            // IS NOT A VALID NUMBER FOR THE
            // REQUESTED OPERATION.
            //
            // WE SHALL RUN AN INVALID CALCULATION.
            //
            // THIS MAY BE THE ONLY WAY THAT AN
            // APPLICATION WHICH ABSOLUTELY LOVES
            // NUMBERS (AS MUCH AS CRNRSTN :: HAS
            // BEEN LOVING THE NUMBERS LATELY, AND
            // EVEN IN THE MIDST OF "THESE ECONOMIC
            // TIMES" AT THAT)...COULD EVEN BE ABLE
            // TO ACQUIRE AN AUTHENTIC NaN (PLEASE
            // READ AS "BAD DATA", OR EVEN BETTER,
            // ...A PROPER SHIT VALUE) VALUE THAT
            // CAN BE RELIABLY RETURNED WITH
            // CONFIDENCE BY CRNRSTN ::
            //
            // CRNRSTN :: <3's
            //          ...CRNRSTN_INTEGER's 4LIFE!
            //
            // SEE, https://www.php.net/manual/en/function.is-nan.php
            return sqrt(-1);

        }

        //
        // AVOID DATA LOSS.
        // DO NOT CAST $number TO AN INTEGER (int), AND BYPASS
        // TRUNCATION OF DOUBLE/FLOAT VALUES.
        return $number * pow(self::$byte_units_ARRAY[$system]['BASE'], $power);
        // return (int) $iUnits * pow(1024, $aUnits[$sUnit]);

    }

    public function number_format_keep_precision($number, $dec_places = 0, $dec_point = '.', $thou_separate = ','){

        if($dec_places > 0){

            return number_format($number, $dec_places, $dec_point, $thou_separate);

        }else{

            //
            // SOURCE :: https://www.php.net/manual/en/function.number-format.php
            // AUTHOR :: stm555 at hotmail dot com :: https://www.php.net/manual/en/function.number-format.php#52311
            $broken_number = explode($dec_point, $number);
            if(isset($broken_number[1])){

                return number_format($broken_number[0], 0, $dec_point, $thou_separate) . $dec_point . $broken_number[1];

            }else{

                return number_format($broken_number[0], 0, $dec_point, $thou_separate);

            }

        }

    }

    //
    // SOURCE :: https://www.php.net/manual/en/function.highlight-string.php
    // AUTHOR :: stanislav dot eckert at vizson dot de :: https://www.php.net/manual/en/function.highlight-string.php#118550
    public function highlight_text($text, $theme_profile = NULL){

        switch($theme_profile){
            case CRNRSTN_UI_GLASS_DARK_COPY:
            case CRNRSTN_UI_GLASS_LIGHT_COPY:
            case CRNRSTN_UI_TERMINAL:
            case CRNRSTN_UI_WOOD:
            case CRNRSTN_UI_PHP:
            case CRNRSTN_UI_HTML:
            case CRNRSTN_UI_DARKNIGHT:
            case CRNRSTN_UI_DAYLIGHT:
            case CRNRSTN_UI_FEATHER:
            case CRNRSTN_UI_GREYSKY:
            case CRNRSTN_UI_RANDOM:
            default:

                //
                // ALONE AND SAD WITH A NICE CUP OF COFFEE, A RACK MOUNTED
                // DUAL-VIDEO CARD MAC PRO, AND FOUR (4) APPLE PRO DISPLAYS.
                ini_set('highlight.comment', $this->theme_attributes_ARRAY[$theme_profile]['highlight.comment']);
                ini_set('highlight.default', $this->theme_attributes_ARRAY[$theme_profile]['highlight.default']);
                ini_set('highlight.html', $this->theme_attributes_ARRAY[$theme_profile]['highlight.html']);
                ini_set('highlight.keyword', $this->theme_attributes_ARRAY[$theme_profile]['highlight.keyword']);
                ini_set('highlight.string', $this->theme_attributes_ARRAY[$theme_profile]['highlight.string']);

            break;

        }

        $text = trim($text);
        $text = highlight_string("<?php " . $text, true);  // highlight_string() requires opening PHP tag or otherwise it will not colorize the text
        $text = trim($text);
        $text = preg_replace("|^\\<code\\>\\<span style\\=\"color\\: #[a-fA-F0-9]{0,6}\"\\>|", '', $text, 1);  // remove prefix
        $text = preg_replace("|\\</code\\>\$|", '', $text, 1);  // remove suffix 1
        $text = trim($text);  // remove line breaks
        $text = preg_replace("|\\</span\\>\$|", '', $text, 1);  // remove suffix 2
        $text = trim($text);  // remove line breaks
        $text = preg_replace("|^(\\<span style\\=\"color\\: #[a-fA-F0-9]{0,6}\"\\>)(&lt;\\?php&nbsp;)(.*?)(\\</span\\>)|", "\$1\$3\$4", $text);  // remove custom added "<?php "

        return $text;

    }

    private function crcINT($value){

        $value = crc32($value);
        return sprintf('%u', $value);

    }

    //
    // SOURCE :: https://www.php.net/manual/en/function.str-split.php
    // AUTHOR :: qeremy [atta] gmail [dotta] com :: https://www.php.net/manual/en/function.str-split.php#113274
    public function str_split_unicode($str, $length = 1){

        $tmp = preg_split('~~u', $str, -1, PREG_SPLIT_NO_EMPTY);

        if($length > 1){

            $chunks = array_chunk($tmp, $length);

            foreach($chunks as $i => $chunk){

                $chunks[$i] = join('', (array)$chunk);

            }

            $tmp = $chunks;

        }

        return $tmp;

    }

    //
    // SOURCE :: https://stackoverflow.com/questions/13076480/php-get-actual-maximum-upload-size
    // AUTHOR :: meustrus :: https://stackoverflow.com/users/710377/meustrus
    // COMMENT :: https://stackoverflow.com/a/25370978
    // -----
    // Drupal has this implemented fairly elegantly:
    // Returns a file size limit in bytes based on the PHP upload_max_filesize
    // and post_max_size.
    public function file_upload_max_size($crnrstn_bypass = false){

        static $max_size = -1;

        //
        // THE CRNRSTN :: BYPASS IS NECESSARY TO PREVENT INFINITE LOOPS WHEN TRYING TO READ THIS
        // SYSTEM VALUE IN THE MIDST OF CRNRSTN :: CONFIGURATION INITIALIZATION.
        if(!($crnrstn_bypass !== false)){

            //
            // READS TOUCH THE CRNRSTN :: MULTI-CHANNEL RRS MAP SITUATION.
            $post_max_size = $this->parse_size($this->ini_get('post_max_size'));
            $upload_max = $this->parse_size($this->ini_get('upload_max_filesize'));

        }else{

            $post_max_size = $this->parse_size(ini_get('post_max_size'));
            $upload_max = $this->parse_size(ini_get('upload_max_filesize'));

        }

        if($max_size < 0){

            //
            // START WITH post_max_size.
            if($post_max_size > 0){

                $max_size = $post_max_size;

            }

            //
            // IF upload_max_size IS LESS, THEN REDUCE. EXCEPT IF upload_max_size IS
            // ZERO, WHICH INDICATES NO LIMIT.
            if($upload_max > 0 && $upload_max < $max_size){

                $max_size = $upload_max;

            }

        }

        return $max_size;

    }

    private function parse_size($size){

        $unit = preg_replace('/[^bkmgtpezy]/i', '', $size);     // Remove the non-unit characters from the size.
        $size = preg_replace('/[^0-9\.]/', '', $size);          // Remove the non-numeric characters from the size.

        if($unit){

            // Find the position of the unit in the ordered string which is the power of magnitude to multiply a kilobyte by.
            return round($size * pow(1024, stripos('bkmgtpezy', $unit[0])));

        }else{

            return round($size);

        }

    }

    //    private function fileMove_DF($ftp_stream, $SOURCE_filePath, $oEndpoint_serial_SOURCE, $oEndpoint_serial_DESTINATION, $oElectrum_STATS, $SOURCE_filePath_ORIGINAL=NULL){
    public function file_local_send_by_ftp($ftp_stream_target, $file_source_path, $oEndpoint_serial_SOURCE, $oEndpoint_serial_DESTINATION, $oElectrum_STATS){

        $continue_process = false;
        $tmp_stats_DESTINATION_ARRAY = array();
        $tmp_stats_dest_path = '';
        #$tmp_stats_DESTINATION_ARRAY['FTP_DIR_PATH']
        #$tmp_stats_DESTINATION_ARRAY['MKSUB_DIR']
        #$tmp_stats_DESTINATION_ARRAY['DESTINATION_FILEPATH']
        #$tmp_stats_DESTINATION_ARRAY['SPLIT_DIR']

        //$tmp_stats_DESTINATION_ARRAY = $oElectrum_STATS->return_DF_destination_stats_array($oEndpoint_serial_SOURCE, $oEndpoint_serial_DESTINATION, $file_source_path);
        //$tmp_stats_dest_path = $oElectrum_STATS->return_destination_stats_path($oEndpoint_serial_SOURCE, $oEndpoint_serial_DESTINATION);
        //self::$oCRNRSTN_USR->error_log('oWheel :: Run ftp_mksubdirs=>[ftp_root_dir_path=' . $ftp_root_dir_path.'][tmp_mksubdir_destination_path=' . $tmp_mksubdir_destination_path.']', __LINE__, __METHOD__, __FILE__, 'CRNRSTN_oELECTRUM_FILE_TRANSFER');

        if(is_dir($file_source_path)){

            //self::$oCRNRSTN_USR->error_log('oWheel :: Run ftp_mksubdirs=>[source_filepath=' . $file_source_path.']', __LINE__, __METHOD__, __FILE__, 'CRNRSTN_oELECTRUM_FILE_TRANSFER');
            error_log(__LINE__ . ' ' . __METHOD__ . ' crnrstn die().');
            die();
            //$this->ftp_mksubdirs($ftp_stream_target, $tmp_stats_DESTINATION_ARRAY['FTP_DIR_PATH'], $tmp_stats_DESTINATION_ARRAY['MKSUB_DIR']);

            $continue_process = true;

        }else{

            error_log(__LINE__ . ' ' . __METHOD__ . ' crnrstn die().');
            die();
            if(isset($SOURCE_filePath_ORIGINAL)){

                $SOURCE_filepath_for_DESTINATION = $SOURCE_filePath_ORIGINAL;

            }else{

                $SOURCE_filepath_for_DESTINATION = $file_source_path;

            }

            $tmp_slashChar = $this->return_slashChar($tmp_stats_DESTINATION_ARRAY['FTP_DIR_PATH']);

            $tmp_split_ARRAY = explode($tmp_slashChar, $tmp_stats_DESTINATION_ARRAY['FTP_DIR_PATH']);
            $tmp_split_cnt = sizeof($tmp_split_ARRAY);

            $tmp_dir_split_ARRAY = explode($tmp_split_ARRAY[$tmp_split_cnt - 2], $tmp_stats_DESTINATION_ARRAY['DESTINATION_FILEPATH']);

            $tmp_dir_sect_ARRAY = explode($tmp_slashChar, $tmp_dir_split_ARRAY[1]);
            $tmp_sect_cnt = sizeof($tmp_dir_sect_ARRAY);

            #$tmp_dir_sect_ARRAY[$tmp_sect_cnt-2] = wethrbug
            $tmp_dest_file_section_ARRAY = explode($tmp_dir_sect_ARRAY[$tmp_sect_cnt - 2], $SOURCE_filepath_for_DESTINATION);

            # [tmp_dir_split_ARRAY[1]=/a_custom_folder_name/20201013_16-52-26/wethrbug/
            $tmp_sect_array = explode($tmp_slashChar, $tmp_dir_split_ARRAY[1]);
            $tmp_cnt = sizeof($tmp_sect_array);

            $tmp_cut_dir = $tmp_sect_array[$tmp_cnt - 2];

            $tmp_source_sect_ARRAY = explode($tmp_cut_dir, $file_source_path);
            //$tmp_dir = dirname($tmp_source_sect_ARRAY[1]);

            $tmp_file_dest = rtrim($tmp_dir_split_ARRAY[1], $tmp_slashChar) . $tmp_dest_file_section_ARRAY[1];
            $tmp_file_cap = basename($tmp_file_dest);

            $tmp_file_dirpath_final = rtrim($tmp_file_dest, $tmp_file_cap);
            $tmp_stats_DESTINATION_ARRAY['FTP_DIR_PATH'] = rtrim($tmp_stats_DESTINATION_ARRAY['FTP_DIR_PATH'], $tmp_slashChar);
            //$tmp_dfile = $tmp_stats_DESTINATION_ARRAY['FTP_DIR_PATH'].$SOURCE_filepath_for_DESTINATION;
            $tmp_dfile = $tmp_stats_dest_path;
            $tmp_dfile = rtrim($tmp_dfile, $tmp_slashChar);
            //self::$oCRNRSTN_USR->error_log('oWheel :: SLASH CHAR = ' . $tmp_slashChar, __LINE__, __METHOD__, __FILE__, 'CRNRSTN_oELECTRUM_FILE_TRANSFER');

            $tmp_dfile_array = explode($tmp_slashChar, $tmp_stats_DESTINATION_ARRAY['DESTINATION_FILEPATH']);
            $tmp_dfile_sect_cnt = sizeof($tmp_dfile_array);

            //self::$oCRNRSTN_USR->error_log('oWheel :: EXPLODE [' . $tmp_stats_DESTINATION_ARRAY['DESTINATION_FILEPATH'].'] ON ' . $tmp_dfile_sect_cnt, __LINE__, __METHOD__, __FILE__, 'CRNRSTN_oELECTRUM_FILE_TRANSFER');

            $tmp_dfile_bi_path_ARRAY = explode($tmp_dfile_array[$tmp_dfile_sect_cnt - 2], $SOURCE_filepath_for_DESTINATION);

            $tmp_dfile .= $tmp_dfile_bi_path_ARRAY[1];
            //self::$oCRNRSTN_USR->error_log('oWheel :: Run ftp_mksubdirs=> [DESTINATION_FILEPATH]=' . $tmp_stats_DESTINATION_ARRAY['DESTINATION_FILEPATH'].' | [FTP_DIR_PATH]=' . $tmp_stats_DESTINATION_ARRAY['FTP_DIR_PATH']. ' on tmp_split_ARRAY[tmp_split_cnt-2]=' . $tmp_split_ARRAY[$tmp_split_cnt-2], __LINE__, __METHOD__, __FILE__, 'CRNRSTN_oELECTRUM_FILE_TRANSFER');
            //self::$oCRNRSTN_USR->error_log('oWheel :: Run ftp_mksubdirs @ ' . $tmp_stats_DESTINATION_ARRAY['FTP_DIR_PATH'].' for =>[' . $tmp_stats_DESTINATION_ARRAY['FTP_DIR_PATH'].$tmp_file_dirpath_final, __LINE__, __METHOD__, __FILE__, 'CRNRSTN_oELECTRUM_FILE_TRANSFER');

            if($this->ftp_mksubdirs($ftp_stream_target, $tmp_slashChar, $tmp_stats_DESTINATION_ARRAY['FTP_DIR_PATH'] . $tmp_file_dirpath_final) == true){

                //self::$oCRNRSTN_USR->error_log('oWheel :: ftp_mksubdirs SUCCESS', __LINE__, __METHOD__, __FILE__, 'CRNRSTN_oELECTRUM_FILE_TRANSFER');

            }else{

                $error = error_get_last();

                //
                // WE USE FTP_CHDIR TO SEE IF WE NEED TO CALL FTP_MKDIR. IT IS OK (OR EXPECTED) TO GET FTP_CHDIR ERRORS HERE.
                $pos_ignore_err = strpos($error['message'], 'ftp_chdir()');
                if($pos_ignore_err == false){

                    self::$oCRNRSTN_USR->error_log('oWheel :: ftp_mksubdirs ERROR :: ' . $error['message'], __LINE__, __METHOD__, __FILE__, 'CRNRSTN_oELECTRUM_FILE_TRANSFER');

                }
            }

            if(substr($tmp_dfile, -1) == $tmp_slashChar){

                $tmp_dfile = rtrim($tmp_dfile, $tmp_slashChar) . $tmp_slashChar;
                $tmp_dfile_fname = basename($SOURCE_filepath_for_DESTINATION);
                $tmp_dfile = $tmp_dfile . $tmp_dfile_fname;

            }

            //self::$oCRNRSTN_USR->error_log('oWheel :: SEE [' . $SOURCE_filepath_for_DESTINATION.']. Now run ftp_put LOCAL FILE=>[' . $SOURCE_filepath_for_DESTINATION.'] to DEST FILE=>[' . $tmp_dfile . ']', __LINE__, __METHOD__, __FILE__, 'CRNRSTN_oELECTRUM_FILE_TRANSFER');

            if(ftp_put($ftp_stream_target, $tmp_dfile, $SOURCE_filepath_for_DESTINATION, FTP_BINARY)){

                $continue_process = true;
                //self::$oCRNRSTN_USR->error_log('oWheel FF - 2/2 (or DF 1 of 1) :: Successfully uploaded LOCAL FILE=>[' . $SOURCE_filepath_for_DESTINATION.'] to DEST FILE=>[' . $tmp_dfile . ']', __LINE__, __METHOD__, __FILE__, 'CRNRSTN_oELECTRUM_FILE_TRANSFER');

            }else{

                $error = error_get_last();
                self::$oCRNRSTN_USR->error_log('oWheel FF - 2/2 (or DF 1 of 1) :: ERROR uploading LOCAL FILE=>[' . $SOURCE_filepath_for_DESTINATION . '] to DEST FILE=>[' . $tmp_dfile . '] :: ' . $error['message'], __LINE__, __METHOD__, __FILE__, 'CRNRSTN_oELECTRUM_FILE_TRANSFER');

                $this->is_error_on_transfer = true;
                $this->error_on_transfer_message = $error['message'] . ' <= Error experienced while pushing local file [' . $SOURCE_filepath_for_DESTINATION . '] to FTP destination[{FTP_OR_LOCAL_DETAIL}] as file=>[' . $tmp_dfile . '].';

            }

        }

        return $continue_process;

    }


    public function return_ascii_art($ascii_key, $channel_char, $is_HTML = true, $selection_override = NULL){
        // Wednesday, November 22, 2023 @ 0157 hrs.

        $tmp_oCRNRSTN_ASCII = new crnrsn_ascii_art($this);

        return $tmp_oCRNRSTN_ASCII->return_art($ascii_key, $channel_char, $is_HTML, $selection_override);

    }

    # #
    # SOURCE
    # http://patorjk.com/software/taag/#p=display&f=Doh&t=CRNRSTN%20%3A%3A
    public function return_CRNRSTN_ASCII_ART($index = NULL){

        $tmp_crnrstnART[0] = '      ___           <span style="color:#F90000;">___</span>           ___           ___           ___                         ___
     /\__\         <span style="color:#F90000;">/\  \</span>         /\  \         /\  \         /\__\                       /\  \
    /:/  /        <span style="color:#F90000;">/::\  \</span>        \:\  \       /::\  \       /:/ _/_         ___          \:\  \          ___         ___
   /:/  /        <span style="color:#F90000;">/:/\:\__\</span>        \:\  \     /:/\:\__\     /:/ /\  \       /\__\          \:\  \        /\__\       /\__\
  /:/  /  ___   <span style="color:#F90000;">/:/ /:/  /</span>    _____\:\  \   /:/ /:/  /    /:/ /::\  \     /:/  /      _____\:\  \       \/__/       \/__/
 /:/__/  /\__\ <span style="color:#F90000;">/:/_/:/__/</span>___ /::::::::\__\ /:/_/:/__/___ /:/_/:/\:\__\   /:/__/      /::::::::\__\
 \:\  \ /:/  / <span style="color:#F90000;">\:\/:::::/  / </span>\:\~~\~~\/__/ \:\/:::::/  / \:\/:/ /:/  /  /::\  \      \:\~~\~~\/__/       ___         ___
  \:\  /:/  /   <span style="color:#F90000;">\::/~~/~~~~</span>   \:\  \        \::/~~/~~~~   \::/ /:/  /  /:/\:\  \      \:\  \            /\__\       /\__\
   \:\/:/  /     <span style="color:#F90000;">\:\~~\</span>        \:\  \        \:\~~\        \/_/:/  /   \/__\:\  \      \:\  \           \/__/       \/__/
    \::/  /       <span style="color:#F90000;">\:\__\</span>        \:\__\        \:\__\         /:/  /         \:\__\      \:\__\
     \/__/         <span style="color:#F90000;">\/__/</span>         \/__/         \/__/         \/__/           \/__/       \/__/
	



<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Isometric2
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Isometric2&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';

        $tmp_crnrstnART[1] = '      ___           <span style="color:#F90000;">___</span>           ___           ___           ___                       __
     /  /\         <span style="color:#F90000;">/  /\</span>         /__/\         /  /\         /  /\          ___        /__/\
    /  /:/        <span style="color:#F90000;">/  /::\</span>        \  \:\       /  /::\       /  /:/_        /  /\       \  \:\          ___        ___
   /  /:/        <span style="color:#F90000;">/  /:/\:\</span>        \  \:\     /  /:/\:\     /  /:/ /\      /  /:/        \  \:\        /__/\      /__/\
  /  /:/  ___   <span style="color:#F90000;">/  /:/~/:/</span>    _____\__\:\   /  /:/~/:/    /  /:/ /::\    /  /:/     _____\__\:\       \__\/      \__\/
 /__/:/  /  /\ <span style="color:#F90000;">/__/:/ /:/___ /</span>__/::::::::\ /__/:/ /:/___ /__/:/ /:/\:\  /  /::\    /__/::::::::\
 \  \:\ /  /:/ <span style="color:#F90000;">\  \:\/:::::/</span> \  \:\~~\~~\/ \  \:\/:::::/ \  \:\/:/~/:/ /__/:/\:\   \  \:\~~\~~\/       ___        ___
  \  \:\  /:/   <span style="color:#F90000;">\  \::/~~~~</span>   \  \:\  ~~~   \  \::/~~~~   \  \::/ /:/  \__\/  \:\   \  \:\  ~~~       /__/\      /__/\
   \  \:\/:/     <span style="color:#F90000;">\  \:\</span>        \  \:\        \  \:\        \__\/ /:/        \  \:\   \  \:\           \__\/      \__\/
    \  \::/       <span style="color:#F90000;">\  \:\</span>        \  \:\        \  \:\         /__/:/          \__\/    \  \:\
     \__\/         <span style="color:#F90000;">\__\/</span>         \__\/         \__\/         \__\/                     \__\/




<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Isometric3
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Isometric3&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';

        $tmp_crnrstnART[4] = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;___&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">___</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;___&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;___&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;___&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;___&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/\__\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">/\&nbsp;&nbsp;\</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/\__\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;/:/&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">/::\&nbsp;&nbsp;\</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/::\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/:/&nbsp;_/_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;___&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;/:/&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">/:/\:\__\</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/:/\:\__\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/:/&nbsp;/\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/\__\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::::::&nbsp;&nbsp;::::::&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;/:/&nbsp;&nbsp;/&nbsp;&nbsp;___&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">/:/&nbsp;/:/&nbsp;&nbsp;/</span>&nbsp;&nbsp;&nbsp;&nbsp;_____\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;/:/&nbsp;/:/&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;/:/&nbsp;/::\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/:/&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_____\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::::::&nbsp;&nbsp;::::::&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;/:/__/&nbsp;&nbsp;/\__\&nbsp;<span&nbsp;style="color:#F90000;">/:/_/:/__/</span>___&nbsp;/::::::::\__\&nbsp;/:/_/:/__/___&nbsp;/:/_/:/\:\__\&nbsp;&nbsp;&nbsp;/:/__/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/::::::::\__\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;\:\&nbsp;&nbsp;\&nbsp;/:/&nbsp;&nbsp;/&nbsp;<span&nbsp;style="color:#F90000;">\:\/:::::/&nbsp;&nbsp;/&nbsp;</span>\:\~~\~~\/__/&nbsp;\:\/:::::/&nbsp;&nbsp;/&nbsp;\:\/:/&nbsp;/:/&nbsp;&nbsp;/&nbsp;&nbsp;/::\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\~~\~~\/__/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;\:\&nbsp;&nbsp;/:/&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">\::/~~/~~~~</span>&nbsp;&nbsp;&nbsp;\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\::/~~/~~~~&nbsp;&nbsp;&nbsp;\::/&nbsp;/:/&nbsp;&nbsp;/&nbsp;&nbsp;/:/\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::::::&nbsp;&nbsp;::::::&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;\:\/:/&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">\:\~~\</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\~~\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/_/:/&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;\/__\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::::::&nbsp;&nbsp;::::::&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;\::/&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">\:\__\</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\__\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\__\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/:/&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\__\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\:\__\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/__/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">\/__/</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/__/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/__/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/__/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/__/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/__/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>




<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Isometric2
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Isometric2&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';

        $tmp_crnrstnART[2] = '        CCCCCCCCCCCCC<span style="color:#F90000;">RRRRRRRRRRRRRRRRR</span>   NNNNNNNN        NNNNNNNNRRRRRRRRRRRRRRRRR      SSSSSSSSSSSSSSS TTTTTTTTTTTTTTTTTTTTTTTNNNNNNNN        NNNNNNNN
     CCC::::::::::::C<span style="color:#F90000;">R::::::::::::::::R</span>  N:::::::N       N::::::NR::::::::::::::::R   SS:::::::::::::::ST:::::::::::::::::::::TN:::::::N       N::::::N
   CC:::::::::::::::C<span style="color:#F90000;">R::::::RRRRRR:::::R</span> N::::::::N      N::::::NR::::::RRRRRR:::::R S:::::SSSSSS::::::ST:::::::::::::::::::::TN::::::::N      N::::::N
  C:::::CCCCCCCC::::C<span style="color:#F90000;">RR:::::R     R:::::R</span>N:::::::::N     N::::::NRR:::::R     R:::::RS:::::S     SSSSSSST:::::TT:::::::TT:::::TN:::::::::N     N::::::N
 C:::::C       CCCCCC  <span style="color:#F90000;">R::::R     R:::::R</span>N::::::::::N    N::::::N  R::::R     R:::::RS:::::S            TTTTTT  T:::::T  TTTTTTN::::::::::N    N::::::N
C:::::C                <span style="color:#F90000;">R::::R     R:::::R</span>N:::::::::::N   N::::::N  R::::R     R:::::RS:::::S                    T:::::T        N:::::::::::N   N::::::N      ::::::  ::::::
C:::::C                <span style="color:#F90000;">R::::RRRRRR:::::R</span> N:::::::N::::N  N::::::N  R::::RRRRRR:::::R  S::::SSSS                 T:::::T        N:::::::N::::N  N::::::N      ::::::  ::::::
C:::::C                <span style="color:#F90000;">R:::::::::::::RR</span>  N::::::N N::::N N::::::N  R:::::::::::::RR    SS::::::SSSSS            T:::::T        N::::::N N::::N N::::::N      ::::::  ::::::
C:::::C                <span style="color:#F90000;">R::::RRRRRR:::::R</span> N::::::N  N::::N:::::::N  R::::RRRRRR:::::R     SSS::::::::SS          T:::::T        N::::::N  N::::N:::::::N
C:::::C                <span style="color:#F90000;">R::::R</span>     <span style="color:#F90000;">R:::::R</span>N::::::N   N:::::::::::N  R::::R     R:::::R       SSSSSS::::S         T:::::T        N::::::N   N:::::::::::N
C:::::C                <span style="color:#F90000;">R::::R</span>     <span style="color:#F90000;">R:::::R</span>N::::::N    N::::::::::N  R::::R     R:::::R            S:::::S        T:::::T        N::::::N    N::::::::::N
 C:::::C       CCCCCC  <span style="color:#F90000;">R::::R</span>     <span style="color:#F90000;">R:::::R</span>N::::::N     N:::::::::N  R::::R     R:::::R            S:::::S        T:::::T        N::::::N     N:::::::::N      ::::::  ::::::
  C:::::CCCCCCCC::::C<span style="color:#F90000;">RR:::::R</span>     <span style="color:#F90000;">R:::::R</span>N::::::N      N::::::::NRR:::::R     R:::::RSSSSSSS     S:::::S      TT:::::::TT      N::::::N      N::::::::N      ::::::  ::::::
   CC:::::::::::::::C<span style="color:#F90000;">R::::::R</span>     <span style="color:#F90000;">R:::::R</span>N::::::N       N:::::::NR::::::R     R:::::RS::::::SSSSSS:::::S      T:::::::::T      N::::::N       N:::::::N      ::::::  ::::::
     CCC::::::::::::C<span style="color:#F90000;">R::::::R</span>     <span style="color:#F90000;">R:::::R</span>N::::::N        N::::::NR::::::R     R:::::RS:::::::::::::::SS       T:::::::::T      N::::::N        N::::::N
        CCCCCCCCCCCCC<span style="color:#F90000;">RRRRRRRR</span>     <span style="color:#F90000;">RRRRRRR</span>NNNNNNNN         NNNNNNNRRRRRRRR     RRRRRRR SSSSSSSSSSSSSSS         TTTTTTTTTTT      NNNNNNNN         NNNNNNN




<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Doh
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Doh&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';

        $tmp_crnrstnART[5] = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CCCCCCCCCCCCC<span&nbsp;style="color:#F90000;">RRRRRRRRRRRRRRRRR</span>&nbsp;&nbsp;&nbsp;NNNNNNNN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NNNNNNNNRRRRRRRRRRRRRRRRR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SSSSSSSSSSSSSSS&nbsp;TTTTTTTTTTTTTTTTTTTTTTTNNNNNNNN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NNNNNNNN<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CCC::::::::::::C<span&nbsp;style="color:#F90000;">R::::::::::::::::R</span>&nbsp;&nbsp;N:::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::NR::::::::::::::::R&nbsp;&nbsp;&nbsp;SS:::::::::::::::ST:::::::::::::::::::::TN:::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N<br>
&nbsp;&nbsp;&nbsp;CC:::::::::::::::C<span&nbsp;style="color:#F90000;">R::::::RRRRRR:::::R</span>&nbsp;N::::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::NR::::::RRRRRR:::::R&nbsp;S:::::SSSSSS::::::ST:::::::::::::::::::::TN::::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N<br>
&nbsp;&nbsp;C:::::CCCCCCCC::::C<span&nbsp;style="color:#F90000;">RR:::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::R</span>N:::::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::NRR:::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::RS:::::S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SSSSSSST:::::TT:::::::TT:::::TN:::::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N<br>
&nbsp;C:::::C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CCCCCC&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::R</span>N::::::::::N&nbsp;&nbsp;&nbsp;&nbsp;N::::::N&nbsp;&nbsp;R::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::RS:::::S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTTTTT&nbsp;&nbsp;T:::::T&nbsp;&nbsp;TTTTTTN::::::::::N&nbsp;&nbsp;&nbsp;&nbsp;N::::::N<br>
C:::::C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::R</span>N:::::::::::N&nbsp;&nbsp;&nbsp;N::::::N&nbsp;&nbsp;R::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::RS:::::S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T:::::T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N:::::::::::N&nbsp;&nbsp;&nbsp;N::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::::::&nbsp;&nbsp;::::::<br>
C:::::C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R::::RRRRRR:::::R</span>&nbsp;N:::::::N::::N&nbsp;&nbsp;N::::::N&nbsp;&nbsp;R::::RRRRRR:::::R&nbsp;&nbsp;S::::SSSS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T:::::T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N:::::::N::::N&nbsp;&nbsp;N::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::::::&nbsp;&nbsp;::::::<br>
C:::::C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R:::::::::::::RR</span>&nbsp;&nbsp;N::::::N&nbsp;N::::N&nbsp;N::::::N&nbsp;&nbsp;R:::::::::::::RR&nbsp;&nbsp;&nbsp;&nbsp;SS::::::SSSSS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T:::::T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N&nbsp;N::::N&nbsp;N::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::::::&nbsp;&nbsp;::::::<br>
C:::::C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R::::RRRRRR:::::R</span>&nbsp;N::::::N&nbsp;&nbsp;N::::N:::::::N&nbsp;&nbsp;R::::RRRRRR:::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SSS::::::::SS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T:::::T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N&nbsp;&nbsp;N::::N:::::::N<br>
C:::::C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R::::R</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R:::::R</span>N::::::N&nbsp;&nbsp;&nbsp;N:::::::::::N&nbsp;&nbsp;R::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SSSSSS::::S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T:::::T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N&nbsp;&nbsp;&nbsp;N:::::::::::N<br>
C:::::C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R::::R</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R:::::R</span>N::::::N&nbsp;&nbsp;&nbsp;&nbsp;N::::::::::N&nbsp;&nbsp;R::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S:::::S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T:::::T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N&nbsp;&nbsp;&nbsp;&nbsp;N::::::::::N<br>
&nbsp;C:::::C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CCCCCC&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R::::R</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R:::::R</span>N::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N:::::::::N&nbsp;&nbsp;R::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S:::::S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T:::::T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N:::::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::::::&nbsp;&nbsp;::::::<br>
&nbsp;&nbsp;C:::::CCCCCCCC::::C<span&nbsp;style="color:#F90000;">RR:::::R</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R:::::R</span>N::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::::NRR:::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::RSSSSSSS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S:::::S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TT:::::::TT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::::::&nbsp;&nbsp;::::::<br>
&nbsp;&nbsp;&nbsp;CC:::::::::::::::C<span&nbsp;style="color:#F90000;">R::::::R</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R:::::R</span>N::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N:::::::NR::::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::RS::::::SSSSSS:::::S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T:::::::::T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N:::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::::::&nbsp;&nbsp;::::::<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CCC::::::::::::C<span&nbsp;style="color:#F90000;">R::::::R</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">R:::::R</span>N::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::NR::::::R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R:::::RS:::::::::::::::SS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T:::::::::T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N::::::N<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CCCCCCCCCCCCC<span&nbsp;style="color:#F90000;">RRRRRRRR</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">RRRRRRR</span>NNNNNNNN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NNNNNNNRRRRRRRR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RRRRRRR&nbsp;SSSSSSSSSSSSSSS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTTTTTTTTTT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NNNNNNNN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NNNNNNN<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
<br>



<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Doh
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Doh&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';

        $tmp_crnrstnART[3] = ' ######  <span style="color:#F90000;">########</span>  ##    ## ########   ######  ######## ##    ##     ##   ##
##    ## <span style="color:#F90000;">##     ##</span> ###   ## ##     ## ##    ##    ##    ###   ##    #### ####
##       <span style="color:#F90000;">##     ##</span> ####  ## ##     ## ##          ##    ####  ##     ##   ##
##       <span style="color:#F90000;">########</span>  ## ## ## ########   ######     ##    ## ## ##
##       <span style="color:#F90000;">##   ##</span>   ##  #### ##   ##         ##    ##    ##  ####     ##   ##
##    ## <span style="color:#F90000;">##    ##</span>  ##   ### ##    ##  ##    ##    ##    ##   ###    #### ####
 ######  <span style="color:#F90000;">##     ##</span> ##    ## ##     ##  ######     ##    ##    ##     ##   ##




<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Banner3
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Banner3&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';

        $tmp_crnrstnART[6] = '<br>
<br>
&nbsp;######&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">########</span>&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;########&nbsp;&nbsp;&nbsp;######&nbsp;&nbsp;########&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;<br>
##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;<span&nbsp;style="color:#F90000;">##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##</span>&nbsp;###&nbsp;&nbsp;&nbsp;##&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;###&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;####&nbsp;####&nbsp;<br>
##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##</span>&nbsp;####&nbsp;&nbsp;##&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;####&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;<br>
##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">########</span>&nbsp;&nbsp;##&nbsp;##&nbsp;##&nbsp;########&nbsp;&nbsp;&nbsp;######&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;##&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">##&nbsp;&nbsp;&nbsp;##</span>&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;####&nbsp;##&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;####&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;<br>
##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;<span&nbsp;style="color:#F90000;">##&nbsp;&nbsp;&nbsp;&nbsp;##</span>&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;###&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;###&nbsp;&nbsp;&nbsp;&nbsp;####&nbsp;####&nbsp;<br>
&nbsp;######&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##</span>&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;######&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;&nbsp;##&nbsp;&nbsp;<br>
<br>



<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Banner3
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Banner3&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';

        $tmp_crnrstnART[4] = '   _|_|_|  <span style="color:#F90000;">_|_|_|</span>    _|      _|  _|_|_|      _|_|_|  _|_|_|_|_|  _|      _|
 _|        <span style="color:#F90000;">_|    _|</span>  _|_|    _|  _|    _|  _|            _|      _|_|    _|      _|  _|
 _|        <span style="color:#F90000;">_|_|_|</span>    _|  _|  _|  _|_|_|      _|_|        _|      _|  _|  _|
 _|        <span style="color:#F90000;">_|    _|</span>  _|    _|_|  _|    _|        _|      _|      _|    _|_|
   _|_|_|  <span style="color:#F90000;">_|    _|</span>  _|      _|  _|    _|  _|_|_|        _|      _|      _|      _|  _|




<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Block
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Block&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';

        $tmp_crnrstnART[7] = '<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;_|_|_|&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">_|_|_|</span>&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;_|_|_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|_|_|&nbsp;&nbsp;_|_|_|_|_|&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">_|&nbsp;&nbsp;&nbsp;&nbsp;_|</span>&nbsp;&nbsp;_|_|&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|_|&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;_|&nbsp;&nbsp;<br>
&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">_|_|_|</span>&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;_|&nbsp;&nbsp;_|&nbsp;&nbsp;_|_|_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;_|&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">_|&nbsp;&nbsp;&nbsp;&nbsp;_|</span>&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;_|_|&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;_|_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;_|_|_|&nbsp;&nbsp;<span&nbsp;style="color:#F90000;">_|&nbsp;&nbsp;&nbsp;&nbsp;_|</span>&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;_|_|_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_|&nbsp;&nbsp;_|&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
<br>



<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Block
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Block&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';

        $tmp_crnrstnART[-1] = '          _             <span style="color:#F90000;">_</span>           _             _          _          _            _
        /\ \           <span style="color:#F90000;">/\ \</span>        /\ \     _    /\ \       / /\       /\ \         /\ \     _    _   _
       /  \ \         <span style="color:#F90000;">/  \ \</span>      /  \ \   /\_\ /  \ \     / /  \      \_\ \       /  \ \   /\_\ /\_\/\_\
      / /\ \ \       <span style="color:#F90000;">/ /\ \ \</span>    / /\ \ \_/ / // /\ \ \   / / /\ \__   /\__ \     / /\ \ \_/ / / \/_/\/_/
     / / /\ \ \     <span style="color:#F90000;">/ / /\ \_\</span>  / / /\ \___/ // / /\ \_\ / / /\ \___\ / /_ \ \   / / /\ \___/ /
    / / /  \ \_\   <span style="color:#F90000;">/ / /_/ / /</span> / / /  \/____// / /_/ / / \ \ \ \/___// / /\ \ \ / / /  \/____/
   / / /    \/_/  <span style="color:#F90000;">/ / /__\/ /</span> / / /    / / // / /__\/ /   \ \ \     / / /  \/_// / /    / / /
  / / /          <span style="color:#F90000;">/ / /_____/</span> / / /    / / // / /_____/_    \ \ \   / / /      / / /    / / /    _   _
 / / /________  <span style="color:#F90000;">/ / /\ \ \</span>  / / /    / / // / /\ \ \ /_/\__/ / /  / / /      / / /    / / /   /_/\/_/\
/ / /_________\<span style="color:#F90000;">/ / /  \ \ \</span>/ / /    / / // / /  \ \ \\\ \/___/ /  /_/ /      / / /    / / /    \_\/\_\/
\/____________/<span style="color:#F90000;">\/_/    \_\/</span>\/_/     \/_/ \/_/    \_\/ \_____\/   \_\/       \/_/     \/_/




<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Impossible
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Impossible&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';


        $tmp_crnrstnART[-2] = ' _______  <span style="color:#F90000;">______</span>    __    _  ______    _______  _______  __    _    ___   ___
|       |<span style="color:#F90000;">|    _ |</span>  |  |  | ||    _ |  |       ||       ||  |  | |  |   | |   |
|       |<span style="color:#F90000;">|   | ||</span>  |   |_| ||   | ||  |  _____||_     _||   |_| |  |___| |___|
|       |<span style="color:#F90000;">|   |_||_</span> |       ||   |_||_ | |_____   |   |  |       |   ___   ___
|      _|<span style="color:#F90000;">|    __  |</span>|  _    ||    __  ||_____  |  |   |  |  _    |  |   | |   |
|     |_ <span style="color:#F90000;">|   |  | |</span>| | |   ||   |  | | _____| |  |   |  | | |   |  |___| |___|
|_______|<span style="color:#F90000;">|___|  |_|</span>|_|  |__||___|  |_||_______|  |___|  |_|  |__|




<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Modular
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Modular&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';


        $tmp_crnrstnART[-3] = '
<span style="color:#F90000;">        (        )  (    (               )</span>
<span style="color:#F90000;">   (    )\ )  ( /(  )\ ) )\ )  *   )  ( /(</span>
<span style="color:#F90000;">   )\  (()/(  )\())(()/((()/(` )  /(  )\())</span>
<span style="color:#F90000;"> (((_)  /(_))((_)\  /(_))/(_))( )(_))((_)\</span>
 <span style="color:#F90000;">)\</span>___ <span style="color:#F90000;">(_))</span>   _<span style="color:#F90000;">((</span>_<span style="color:#F90000;">)(</span>_<span style="color:#F90000;">)) (</span>_<span style="color:#F90000;">)) (</span>_<span style="color:#F90000;">(</span>_<span style="color:#F90000;">())</span>  _<span style="color:#F90000;">((</span>_<span style="color:#F90000;">)</span>  _  _
<span style="color:#F90000;">((</span>/ __|<span style="color:#F90000;">| _ \</span> | \| || _ \/ __||_   _| | \| | (_)(_)
 | (__ <span style="color:#F90000;">|   /</span> | .` ||   /\__ \  | |   | .` |  _  _
  \___|<span style="color:#F90000;">|_|_\</span> |_|\_||_|_\|___/  |_|   |_|\_| (_)(_)




<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Fire Font
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Fire%20Font-k&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';

        $tmp_crnrstnART[-4] = '
    _______   <span style="color:#F90000;">.-------.</span>    ,---.   .--..-------.       .-\'\'\'-. ,---------. ,---.   .--.          _ _    _ _
   /   __  \  <span style="color:#F90000;">|  _ _   \</span>   |    \  |  ||  _ _   \     / _     \\           \|    \  |  |         ( ` )  ( ` )
  | ,_/  \__) <span style="color:#F90000;">| ( \' )  |</span>   |  ,  \ |  || ( \' )  |    (`\' )/`--\' `--.  ,---\'|  ,  \ |  |        (_{;}_)(_{;}_)
,-./  )       <span style="color:#F90000;">|(_ o _) /</span>   |  |\_ \|  ||(_ o _) /   (_ o _).       |   \   |  |\_ \|  |         (_,_)  (_,_)
\  \'_ \'`)   <span style="color:#F90000;">  | (_,_).\' __</span> |  _( )_\  || (_,_).\' __  (_,_). \'.     :_ _:   |  _( )_\  |
 > (_)  )  __ <span style="color:#F90000;">|  |\ \  |  |</span>| (_ o _)  ||  |\ \  |  |.---.  \  :    (_I_)   | (_ o _)  |           _      _
(  .  .-\'_/  )<span style="color:#F90000;">|  | \ `\'   /</span>|  (_,_)\  ||  | \ `\'   /\    `-\'  |   (_(=)_)  |  (_,_)\  |         _( )_  _( )_
 `-\'`-\'     /<span style="color:#F90000;"> |  |  \    / </span>|  |    |  ||  |  \    /  \       /     (_I_)   |  |    |  |        (_ o _)(_ o _)
   `._____.\'  <span style="color:#F90000;">\'\'-\'   `\'-\'</span>  \'--\'    \'--\'\'\'-\'   `\'-\'    `-...-\'      \'---\'   \'--\'    \'--\'         (_,_)  (_,_)




<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Flower Power
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Flower%20Power&t=CRNRSTN%20%3A%3A
DATE :: Sunday, Jul 31, 2022 @ 0949 hrs ::
-->
';


        $tmp_crnrstnART[-5] = '
   _____ <span style="color:#F90000;">_____</span>  _   _ _____   _____ _______ _   _
  / ____<span style="color:#F90000;">|   __ \</span>| \ | |  __ \ / ____|__   __| \ | |  _ _
 | |    <span style="color:#F90000;">|  |__) |</span>  \| | |__) | (___    | |  |  \| | (_|_)
 | |    <span style="color:#F90000;">|  __  /</span>| . ` |  _  / \___ \   | |  | . ` |
 | |____<span style="color:#F90000;">|  | \ \</span>| |\  | | \ \ ____) |  | |  | |\  |  _ _
  \_____<span style="color:#F90000;">|__|  \_\</span>_| \_|_|  \_\_____/   |_|  |_| \_| (_|_)




<!--
ASCII ARTWORK GENERATED BY CRNRSTN :: v' . self::$version_crnrstn . '
ARTWORK TITLE :: Big
TIMESTAMP :: ' . $this->return_micro_time() . '

CREATIVE SOURCE :: http://patorjk.com/software/taag/#p=display&f=Big&t=CRNRSTN%20%3A%3A
DATE :: Thursday, August 25, 2022 @ 0948 hrs ::
-->
';

        if(!isset($index)){

            return $tmp_crnrstnART[rand(-5, 4)];

        }else{

            return $tmp_crnrstnART[$index];

        }

    }

    //
    // SOURCE :: https://stackoverflow.com/questions/58058663/how-to-get-the-ubuntu-version-via-php
    // COMMENT :: https://stackoverflow.com/a/58058896
    // AUTHOR :: Kevin :: https://stackoverflow.com/users/3859027/kevin
    private function initialize_linux_profile(){

        try{

            //error_log('[4031] crnrstn :: linux flavor :: ' . parse_ini_string(shell_exec('cat /etc/lsb-release'))['DISTRIB_RELEASE']);

            /*
            DISTRIB_ID=Ubuntu
            DISTRIB_RELEASE=18.04
            DISTRIB_CODENAME=bionic
            DISTRIB_DESCRIPTION="Ubuntu 18.04.1 LTS"
            */

            $tmp_version_linux = parse_ini_string(shell_exec('cat /etc/lsb-release'))['DISTRIB_DESCRIPTION'];

            //self::$oCRNRSTN_CONFIG_MGR->input_data_value($tmp_version_linux, 'version_linux');

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_version_linux, 'version_linux', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    private function initialize_apache_profile(){

        try{

            $tmp_SERVER_SOFTWARE = strtolower(trim($_SERVER['SERVER_SOFTWARE']));

            $version_ARRAY = explode('apache/', $tmp_SERVER_SOFTWARE);

            $version = explode('.', $version_ARRAY[1]);

            //
            // POWERED BY APACHE IMAGE DRIVER
            //$this->version_apache_sysimg = (double) $version[0] . '.' . $version[1];
            if(isset($version[1])){

                $tmp_version_apache_sysimg = (double) $version[0] . '.' . $version[1];
                //self::$oCRNRSTN_CONFIG_MGR->input_data_value($tmp_version_apache_sysimg, 'version_apache_sysimg');

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_version_apache_sysimg, 'version_apache_sysimg', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }else{

                $tmp_version_apache_sysimg = (double) $version[0];
                //self::$oCRNRSTN_CONFIG_MGR->input_data_value($tmp_version_apache_sysimg, 'version_apache_sysimg');

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_version_apache_sysimg, 'version_apache_sysimg', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            $patch = '';
            $tmp_array = str_split($version[2]);
            $tmp_size = sizeof($tmp_array);

            for($i = 0; $i < $tmp_size; $i++){

                if(is_numeric($tmp_array[$i])){

                    $patch .= $tmp_array[$i];

                }else{

                    $i = $tmp_size + 1;

                }

            }

            if(strlen($patch) > 0){

                $tmp_version_apache = $version[0] . '.' . $version[1] . '.' . $patch;
                //self::$oCRNRSTN_CONFIG_MGR->input_data_value($tmp_version_apache, 'version_apache');

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_version_apache, 'version_apache', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }else{

                $tmp_version_apache = $version[0] . '.' . $version[1];
                //self::$oCRNRSTN_CONFIG_MGR->input_data_value($tmp_version_apache, 'version_apache');

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_version_apache, 'version_apache', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            //
            // SELECT APACHE SERVER SETTINGS

            /*
            HTTP_HOST
            HTTP_CONNECTION
            HTTP_USER_AGENT
            HTTP_ACCEPT
            HTTP_ACCEPT_ENCODING
            HTTP_ACCEPT_LANGUAGE
            HTTP_COOKIE
            SERVER_SIGNATURE
            SERVER_SOFTWARE
            SERVER_NAME
            SERVER_ADDR
            SERVER_PORT
            REMOTE_ADDR
            DOCUMENT_ROOT
            REQUEST_SCHEME
            SCRIPT_FILENAME
            GATEWAY_INTERFACE
            SERVER_PROTOCOL
            REQUEST_METHOD
            QUERY_STRING
            REQUEST_URI
            SCRIPT_NAME

            */

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    private function initialize_php_profile(){

        try{

            //
            // PHP VERSION
            // PHP_VERSION_ID is available as of PHP 5.2.7
            if(!defined('PHP_VERSION_ID')){

                $version = explode('.', PHP_VERSION);

                $patch = '';
                $tmp_array = str_split($version[2]);
                $tmp_size = sizeof($tmp_array);

                for($i = 0; $i < $tmp_size; $i++){

                    if(is_numeric($tmp_array[$i])){

                        $patch .= $tmp_array[$i];

                    }else{

                        $i = $tmp_size + 1;

                    }

                }

                if(strlen($patch) > 0){

                    define('PHP_RELEASE_VERSION', (int)$patch);

                }else{

                    define('PHP_RELEASE_VERSION', 0);

                }

                define('PHP_VERSION_ID', ($version[0] * 10000 + $version[1] * 100 + (int)$patch));
                define('PHP_MAJOR_VERSION', $version[0]);
                define('PHP_MINOR_VERSION', $version[1]);
                //define('PHP_RELEASE_VERSION', $version[2]);

                $tmp_version_php = PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION . '.' . PHP_RELEASE_VERSION;
                //ARCH_0--> $this->consume_ddo_system_param($tmp_version_php, 'version_php', 0);
                //ARCH_1--> self::$oCRNRSTN_CONFIG_MGR->input_data_value($tmp_version_php, 'version_php');

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                error_log(__LINE__ . ' ' . __METHOD__ . ' SETTING PHP VERSION.');
                //die();

                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_version_php, 'version_php', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }else{

                //
                // WE ARE AT LEAST PHP v5.2.7
                $tmp_version_php = PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION . '.' . PHP_RELEASE_VERSION;
                //$this->consume_ddo_system_param($tmp_version_php, 'version_php', 0);
                //self::$oCRNRSTN_CONFIG_MGR->input_data_value($tmp_version_php, 'version_php');

                //
                // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
                // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
                // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
                //
                // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
                // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
                // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
                // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
                // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
                //
                // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
                // - $oCRNRSTN->err_message_queue_push(),
                // - $oCRNRSTN->err_message_queue_retrieve(),
                // - $oCRNRSTN->err_message_queue_clear(), AND
                // - $oCRNRSTN->get_err_message_count().
                //
                // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
                //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
                //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
                //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
                //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
                //		        EXPIRATION TTL.
                //
                //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
                if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_version_php, 'version_php', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    throw new Exception($this->err_message_queue_retrieve());

                }

            }

            //
            // SELECT PHP INI SETTINGS
            /*
            ini_get('post_max_size')
            ini_get('display_errors')
            ini_get('register_globals')

            allow_url_fopen bool
            This option enables the URL-aware fopen wrappers that enable accessing URL object like files. Default wrappers are provided for the access of remote files using the ftp or http protocol, some extensions like zlib may register additional wrappers.

            allow_url_include bool
            This option allows the use of URL-aware fopen wrappers with the following functions: include, include_once, require, require_once.

            default_charset string
            "UTF-8" is the default value and its value is used as the default character encoding for htmlentities(), html_entity_decode() and htmlspecialchars() if the encoding parameter is omitted. The value of default_charset will also be used to set the default character set for iconv functions if the iconv.input_encoding, iconv.output_encoding and iconv.internal_encoding configuration options are unset, and for mbstring functions if the mbstring.http_input mbstring.http_output mbstring.internal_encoding configuration option is unset.
            All versions of PHP will use this value as the charset within the default Content-Type header sent by PHP if the header isn't overridden by a call to header().
            Setting default_charset to an empty value is not recommended.

            default_mimetype string
            By default, PHP will output a media type using the Content-Type header. To disable this, simply set it to be empty.
            PHP's built-in default media type is set to text/html.

            default_socket_timeout int
            Default timeout (in seconds) for socket based streams. Specifying a negative value means an infinite timeout.

            fbsql.batchsize???

            file_uploads bool
            Whether or not to allow HTTP file uploads. See also the upload_max_filesize, upload_tmp_dir, and post_max_size directives.

            log_errors_max_len int
            Set the maximum length of log_errors in bytes. In error_log information about the source is added. The default is 1024 and 0 allows to not apply any maximum length at all. This length is applied to logged errors, displayed errors and also to $php_errormsg, but not to explicitly called functions such as error_log().
            When an int is used, the value is measured in bytes. Shorthand notation, as described in this FAQ, may also be used.

            max_execution_time int
            This sets the maximum time in seconds a script is allowed to run before it is terminated by the parser. This helps prevent poorly written scripts from tying up the server. The default setting is 30. When running PHP from the command line the default setting is 0.
            On non Windows systems, the maximum execution time is not affected by system calls, stream operations etc. Please see the set_time_limit() function for more details.
            Your web server can have other timeout configurations that may also interrupt PHP execution. Apache has a Timeout directive and IIS has a CGI timeout function. Both default to 300 seconds. See your web server documentation for specific details.

            max_input_vars int
            How many input variables may be accepted (limit is applied to $_GET, $_POST and $_COOKIE superglobal separately). Use of this directive mitigates the possibility of denial of service attacks which use hash collisions. If there are more input variables than specified by this directive, an E_WARNING is issued, and further input variables are truncated from the request.

            max_input_time int
            This sets the maximum time in seconds a script is allowed to parse input data, like POST and GET. Timing begins at the moment PHP is invoked at the server and ends when execution begins. The default setting is -1, which means that max_execution_time is used instead. Set to 0 to allow unlimited time.

            memcache.chunk_size int
            Data will be transferred in chunks of this size, setting the value lower requires more network writes. Try increasing this value to 32768 if noticing otherwise inexplicable slowdowns.

            memcache.protocol string

            memory_limit int
            This sets the maximum amount of memory in bytes that a script is allowed to allocate. This helps prevent poorly written scripts for eating up all available memory on a server. Note that to have no memory limit, set this directive to -1.
            When an int is used, the value is measured in bytes. Shorthand notation, as described in this FAQ, may also be used.

            mysql.allow_persistent bool
            Whether to allow persistent connections to MySQL.

            mysql.max_persistent int
            The maximum number of persistent MySQL connections per process.

            mysql.max_links int
            The maximum number of MySQL connections per process, including persistent connections.

            mysql.default_port string
            The default TCP port number to use when connecting to the database server if no other port is specified. If no default is specified, the port will be obtained from the MYSQL_TCP_PORT environment variable, the mysql-tcp entry in /etc/services or the compile-time MYSQL_PORT constant, in that order. Win32 will only use the MYSQL_PORT constant.

            mysql.default_socket string
            The default socket name to use when connecting to a local database server if no other socket name is specified.

            mysql.default_host string
            The default server host to use when connecting to the database server if no other host is specified. Doesn't apply in SQL safe mode.

            mysql.default_user string
            The default user name to use when connecting to the database server if no other name is specified. Doesn't apply in SQL safe mode.

            mysql.default_password string
            The default password to use when connecting to the database server if no other password is specified. Doesn't apply in SQL safe mode.

            mysql.connect_timeout int
            Connect timeout in seconds. On Linux this timeout is also used for waiting for the first answer from the server.

            mysqli.allow_persistent int
            Enable the ability to create persistent connections using mysqli_connect().

            mysqli.max_persistent int
            Maximum of persistent connections that can be made. Set to 0 for unlimited.

            mysqli.max_links int
            The maximum number of MySQL connections per process.

            mysqli.default_port int
            The default TCP port number to use when connecting to the database server if no other port is specified. If no default is specified, the port will be obtained from the MYSQL_TCP_PORT environment variable, the mysql-tcp entry in /etc/services or the compile-time MYSQL_PORT constant, in that order. Win32 will only use the MYSQL_PORT constant.

            mysqli.default_socket string
            The default socket name to use when connecting to a local database server if no other socket name is specified.

            mysqli.default_host string
            The default server host to use when connecting to the database server if no other host is specified.

            mysqli.default_user string
            The default user name to use when connecting to the database server if no other name is specified.

            mysqli.default_pw string
            The default password to use when connecting to the database server if no other password is specified.

            mysqlnd.collect_statistics bool
            Enables the collection of various client statistics which can be accessed through mysqli_get_client_stats(), mysqli_get_connection_stats(), and are shown in mysqlnd section of the output of the phpinfo() function as well.
            This configuration setting enables all MySQL Native Driver statistics except those relating to memory management.

            mysqlnd.collect_memory_statistics bool
            Enable the collection of various memory statistics which can be accessed through mysqli_get_client_stats(), mysqli_get_connection_stats(), and are shown in mysqlnd section of the output of the phpinfo() function as well.
            This configuration setting enables the memory management statistics within the overall set of MySQL Native Driver statistics.

            mysqlnd.log_mask int
            Defines which queries will be logged. The default 0, which disables logging. Define using an integer, and not with PHP constants. For example, a value of 48 (16 + 32) will log slow queries which either use 'no good index' (SERVER_QUERY_NO_GOOD_INDEX_USED = 16) or no index at all (SERVER_QUERY_NO_INDEX_USED = 32). A value of 2043 (1 + 2 + 8 + ... + 1024) will log all slow query types.
            The types are as follows: SERVER_STATUS_IN_TRANS=1, SERVER_STATUS_AUTOCOMMIT=2, SERVER_MORE_RESULTS_EXISTS=8, SERVER_QUERY_NO_GOOD_INDEX_USED=16, SERVER_QUERY_NO_INDEX_USED=32, SERVER_STATUS_CURSOR_EXISTS=64, SERVER_STATUS_LAST_ROW_SENT=128, SERVER_STATUS_DB_DROPPED=256, SERVER_STATUS_NO_BACKSLASH_ESCAPES=512, and SERVER_QUERY_WAS_SLOW=1024.

            mysqlnd.mempool_default_size int
            Default size of the mysqlnd memory pool, which is used by result sets.

            mysqlnd.net_read_timeout int
            mysqlnd and the MySQL Client Library, libmysqlclient use different networking APIs. mysqlnd uses PHP streams, whereas libmysqlclient uses its own wrapper around the operating level network calls. PHP, by default, sets a read timeout of 60s for streams. This is set via php.ini, default_socket_timeout. This default applies to all streams that set no other timeout value. mysqlnd does not set any other value and therefore connections of long running queries can be disconnected after default_socket_timeout seconds resulting in an error message 2006 - MySQL Server has gone away. The MySQL Client Library sets a default timeout of 24 * 3600 seconds (1 day) and waits for other timeouts to occur, such as TCP/IP timeouts. mysqlnd now uses the same very long timeout. The value is configurable through a new php.ini setting: mysqlnd.net_read_timeout. mysqlnd.net_read_timeout gets used by any extension (ext/mysql, ext/mysqli, PDO_MySQL) that uses mysqlnd. mysqlnd tells PHP Streams to use mysqlnd.net_read_timeout. Please note that there may be subtle differences between MYSQL_OPT_READ_TIMEOUT from the MySQL Client Library and PHP Streams, for example MYSQL_OPT_READ_TIMEOUT is documented to work only for TCP/IP connections and, prior to MySQL 5.1.2, only for Windows. PHP streams may not have this limitation. Please check the streams documentation, if in doubt.

            mysqlnd.net_cmd_buffer_size int
            mysqlnd allocates an internal command/network buffer of mysqlnd.net_cmd_buffer_size (in php.ini) bytes for every connection. If a MySQL Client Server protocol command, for example, COM_QUERY (normal query), does not fit into the buffer, mysqlnd will grow the buffer to the size required for sending the command. Whenever the buffer gets extended for one connection, command_buffer_too_small will be incremented by one.
            If mysqlnd has to grow the buffer beyond its initial size of mysqlnd.net_cmd_buffer_size bytes for almost every connection, you should consider increasing the default size to avoid re-allocations.
            The default buffer size is 4096 bytes, which is the smallest value possible.
            The value can also be set using mysqli_options(link, MYSQLI_OPT_NET_CMD_BUFFER_SIZE, size).

            mysqlnd.net_read_buffer_size int
            Maximum read chunk size in bytes when reading the body of a MySQL command packet. The MySQL client server protocol encapsulates all its commands in packets. The packets consist of a small header and a body with the actual payload. The size of the body is encoded in the header. mysqlnd reads the body in chunks of MIN(header.size, mysqlnd.net_read_buffer_size) bytes. If a packet body is larger than mysqlnd.net_read_buffer_size bytes, mysqlnd has to call read() multiple times.
            The value can also be set using mysqli_options(link, MYSQLI_OPT_NET_READ_BUFFER_SIZE, size).

            post_max_size int
            Sets max size of post data allowed. This setting also affects file upload. To upload large files, this value must be larger than upload_max_filesize. Generally speaking, memory_limit should be larger than post_max_size. When an int is used, the value is measured in bytes. Shorthand notation, as described in this FAQ, may also be used. If the size of post data is greater than post_max_size, the $_POST and $_FILES superglobals are empty. This can be tracked in various ways, e.g. by passing the $_GET variable to the script processing the data, i.e. <form action="edit.php?processed=1">, and then checking if $_GET['processed'] is set.
            Note: PHP allows shortcuts for byte values, including K (kilo), M (mega) and G (giga). PHP will do the conversions automatically if you use any of these. Be careful not to exceed the 32 bit signed integer limit (if you're using 32bit versions) as it will cause your script to fail.

            precision int
            The number of significant digits displayed in floating point numbers. -1 means that an enhanced algorithm for rounding such numbers will be used.

            realpath_cache_size int
            Determines the size of the realpath cache to be used by PHP. This value should be increased on systems where PHP opens many files, to reflect the quantity of the file operations performed.
            The size represents the total number of bytes in the path strings stored, plus the size of the data associated with the cache entry. This means that in order to store longer paths in the cache, the cache size must be larger. This value does not directly control the number of distinct paths that can be cached.
            The size required for the cache entry data is system dependent.

            realpath_cache_ttl int
            Duration of time (in seconds) for which to cache realpath information for a given file or directory. For systems with rarely changing files, consider increasing the value.

            session.name string
            session.name specifies the name of the session which is used as cookie name. It should only contain alphanumeric characters. Defaults to PHPSESSID. See also session_name().

            session.gc_maxlifetime int
            session.gc_maxlifetime specifies the number of seconds after which data will be seen as 'garbage' and potentially cleaned up. Garbage collection may occur during session start (depending on session.gc_probability and session.gc_divisor).
            Note: If different scripts have different values of session.gc_maxlifetime but share the same place for storing the session data then the script with the minimum value will be cleaning the data. In this case, use this directive together with session.save_path.

            session.use_cookies bool
            session.use_cookies specifies whether the module will use cookies to store the session id on the client side. Defaults to 1 (enabled).

            session.use_only_cookies bool
            session.use_only_cookies specifies whether the module will only use cookies to store the session id on the client side. Enabling this setting prevents attacks involved passing session ids in URLs. Defaults to 1 (enabled) since PHP 5.3.0.

            session.cookie_lifetime int
            session.cookie_lifetime specifies the lifetime of the cookie in seconds which is sent to the browser. The value 0 means "until the browser is closed." Defaults to 0. See also session_get_cookie_params() and session_set_cookie_params().
            Note: The expiration timestamp is set relative to the server time, which is not necessarily the same as the time in the client's browser.

            session.cookie_path string
            session.cookie_path specifies path to set in the session cookie. Defaults to /. See also session_get_cookie_params() and session_set_cookie_params().

            session.cookie_domain string
            session.cookie_domain specifies the domain to set in the session cookie. Default is none at all meaning the host name of the server which generated the cookie according to cookies specification. See also session_get_cookie_params() and session_set_cookie_params().

            session.cookie_secure bool
            session.cookie_secure specifies whether cookies should only be sent over secure connections. Defaults to off. See also session_get_cookie_params() and session_set_cookie_params().

            session.cookie_httponly bool
            Marks the cookie as accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. This setting can effectively help to reduce identity theft through XSS attacks (although it is not supported by all browsers).

            session.cookie_samesite string (Available as of PHP 7.3.0.)
            Allows servers to assert that a cookie ought not to be sent along with cross-site requests. This assertion allows user agents to mitigate the risk of cross-origin information leakage, and provides some protection against cross-site request forgery attacks. Note that this is not supported by all browsers. An empty value means that no SameSite cookie attribute will be set. Lax and Strict mean that the cookie will not be sent cross-domain for POST requests; Lax will sent the cookie for cross-domain GET requests, while Strict will not.

            session.cache_limiter string
            session.cache_limiter specifies the cache control method used for session pages. It may be one of the following values: nocache, private, private_no_expire, or public. Defaults to nocache. See also the session_cache_limiter() documentation for information about what these values mean.

            session.cache_expire int
            session.cache_expire specifies time-to-live for cached session pages in minutes, this has no effect for nocache limiter. Defaults to 180. See also session_cache_expire().

            session.sid_length int (Available as of PHP 7.1.0.)
            session.sid_length allows you to specify the length of session ID string. Session ID length can be between 22 to 256. The default is 32. If you need compatibility you may specify 32, 40, etc. Longer session ID is harder to guess. At least 32 chars are recommended.
            Tip :: Compatibility Note: Use 32 instead of session.hash_function=0 (MD5) and session.hash_bits_per_character=4, session.hash_function=1 (SHA1) and session.hash_bits_per_character=6. Use 26 instead of session.hash_function=0 (MD5) and session.hash_bits_per_character=5. Use 22 instead of session.hash_function=0 (MD5) and session.hash_bits_per_character=6. You must configure INI values to have at least 128 bits in session ID. Do not forget to set an appropriate value for session.sid_bits_per_character, otherwise you will have weaker session ID.
            Note: This setting is introduced in PHP 7.1.0.

            session.sid_bits_per_character int (Available as of PHP 7.1.0.)
            session.sid_per_character allows you to specify the number of bits in encoded session ID character. The possible values are '4' (0-9, a-f), '5' (0-9, a-v), and '6' (0-9, a-z, A-Z, "-", ","). The default is 4. The more bits results in stronger session ID. 5 is recommended value for most environments.
            Note: This setting is introduced in PHP 7.1.0.

            session.upload_progress.enabled bool
            Enables upload progress tracking, populating the $_SESSION variable. Defaults to 1, enabled.

            session.upload_progress.cleanup bool
            Cleanup the progress information as soon as all POST data has been read (i.e. upload completed). Defaults to 1, enabled.
            Note: It is highly recommended to keep this feature enabled.

            session.upload_progress.prefix string
            A prefix used for the upload progress key in the $_SESSION. This key will be concatenated with the value of $_POST[ini_get("session.upload_progress.name")] to provide a unique index. Defaults to "upload_progress_".

            session.upload_progress.name string
            The name of the key to be used in $_SESSION storing the progress information. See also session.upload_progress.prefix. If $_POST[ini_get("session.upload_progress.name")] is not passed or available, upload progressing will not be recorded. Defaults to "PHP_SESSION_UPLOAD_PROGRESS".

            session.upload_progress.freq mixed
            Defines how often the upload progress information should be updated. This can be defined in bytes (i.e. "update progress information after every 100 bytes"), or in percentages (i.e. "update progress information after receiving every 1% of the whole filesize"). Defaults to "1%".

            session.upload_progress.min_freq int
            The minimum delay between updates, in seconds. Defaults to "1" (one second).

            SMTP string
            Used under Windows only: host name or IP address of the SMTP server PHP should use for mail sent with the mail() function.

            smtp_port int
            Used under Windows only: Number of the port to connect to the server specified with the SMTP setting when sending mail with mail(); defaults to 25.

            upload_max_filesize int
            The maximum size of an uploaded file.
            When an int is used, the value is measured in bytes. Shorthand notation, as described in this FAQ, may also be used.

            max_file_uploads int
            The maximum number of files allowed to be uploaded simultaneously. Starting with PHP 5.3.4, upload fields left blank on submission do not count towards this limit.

            variables_order string
            Sets the order of the EGPCS (Environment, Get, Post, Cookie, and Server) variable parsing. For example, if variables_order is set to "SP" then PHP will create the superglobals $_SERVER and $_POST, but not create $_ENV, $_GET, and $_COOKIE. Setting to "" means no superglobals will be set.
            Warning :: In both the CGI and FastCGI SAPIs, $_SERVER is also populated by values from the environment; S is always equivalent to ES regardless of the placement of E elsewhere in this directive.
            Note: The content and order of $_REQUEST is also affected by this directive.

            zend.multibyte bool
            Enables parsing of source files in multibyte encodings. Enabling zend.multibyte is required to use character encodings like SJIS, BIG5, etc that contain special characters in multibyte string data. ISO-8859-1 compatible encodings like UTF-8, EUC, etc do not require this option.
            Enabling zend.multibyte requires the mbstring extension to be available.
            */

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    public function openssl_get_md_methods($exclude_weak = true, $exclude_ecb = true){

        return $this->oCRNRSTN_ENV->openssl_get_md_methods($exclude_weak, $exclude_ecb);

    }

    public function set_openssl_digest_profile($openssl_cipher_profile = NULL, $data_key = 'openssl_cipher', $data_type_family = 'CRNRSTN::RESOURCE'){

        $this->oCRNRSTN_ENV->set_openssl_digest_profile($openssl_cipher_profile, $data_key, $data_type_family);

    }

    public function set_openssl_cipher_profile($openssl_cipher_profile = NULL, $data_key = 'openssl_cipher', $data_type_family = 'CRNRSTN::RESOURCE'){

        return $this->oCRNRSTN_ENV->set_openssl_cipher_profile($openssl_cipher_profile, $data_key, $data_type_family);

    }

    public function openssl_get_cipher_methods($exclude_weak = true, $exclude_ecb = true){

//        if(!isset($this->oCRNRSTN_ENV)){
//
//            //
//            // INITIALIZATION OF CRNRSTN :: ENVIRONMENT.
//            $this->oCRNRSTN_ENV = new crnrstn_environment($this);
//
//            //
//            // INITIALIZATION OF CRNRSTN :: USER.
//            $this->oCRNRSTN_USR = $this->oCRNRSTN_ENV->return_ENV_oCRNRSTN_USR();
//
//        }

        $this->oCRNRSTN_ENV->openssl_get_cipher_methods($exclude_weak, $exclude_ecb);

    }

    //
    // SOURCE :: https://www.php.net/manual/en/openssl.constversion.php
    // AUTHOR :: fontajos at phpeppershop dot com :: https://www.php.net/manual/en/openssl.constversion.php#119283
    // OPENSSL_VERSION_NUMBER parser, works from OpenSSL v.0.9.5b+ (e.g. for use with version_compare())
    // OPENSSL_VERSION_NUMBER is a numeric release version identifier for OpenSSL
    // Syntax: MNNFFPPS: major minor fix patch status (HEX)
    // The status nibble meaning: 0 => development, 1 to e => betas, f => release
    // Examples:
    // - 0x000906023 => 0.9.6b beta 3
    // - 0x00090605f => 0.9.6e release
    // - 0x1000103f  => 1.0.1c
    /**
     * @param OpenSSL version identifier as hex value $openssl_version_number
     */
    private function initialize_openssl_profile($patch_as_number = false, $openssl_version_number = null){

        try{

            if(is_null($openssl_version_number)) $openssl_version_number = OPENSSL_VERSION_NUMBER;

            //$this->error_log('openssl_version_number ::' . $openssl_version_number, __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
            //error_log('[lnum 3993] [crnrstn] openssl_version_number ::' . $openssl_version_number);
            $openssl_numeric_identifier = str_pad((string)dechex($openssl_version_number), 8, '0', STR_PAD_LEFT);
            //error_log('[lnum 3995] [crnrstn] openssl_numeric_identifier ::' . $openssl_numeric_identifier);

            $openssl_version_parsed = array();
            $preg = '/(?<major>[[:xdigit:]])(?<minor>[[:xdigit:]][[:xdigit:]])(?<fix>[[:xdigit:]][[:xdigit:]])';
            $preg .= '(?<patch>[[:xdigit:]][[:xdigit:]])(?<type>[[:xdigit:]])/';

            preg_match_all($preg, $openssl_numeric_identifier, $openssl_version_parsed);

            $openssl_version = false;
            if(!empty($openssl_version_parsed)){
                $alphabet = array(1 => 'a', 2 => 'b', 3 => 'c', 4 => 'd', 5 => 'e', 6 => 'f', 7 => 'g', 8 => 'h', 9 => 'i',
                    10 => 'j', 11 => 'k', 12 => 'l', 13 => 'm', 14 => 'n', 15 => 'o', 16 => 'p', 17 => 'q', 18 => 'r',
                    19 => 's', 20 => 't', 21 => 'u', 22 => 'v', 23 => 'w', 24 => 'x', 25 => 'y', 26 => 'z');
                $openssl_version = intval($openssl_version_parsed['major'][0]) . '.';
                $openssl_version .= intval($openssl_version_parsed['minor'][0]) . '.';
                $openssl_version .= intval($openssl_version_parsed['fix'][0]);

                if(!$patch_as_number && array_key_exists(intval($openssl_version_parsed['patch'][0]), $alphabet)){

                    //error_log('[lnum 4097] [crnrstn] openssl_version ::' . $openssl_version . ' + ' . $alphabet[intval($openssl_version_parsed['patch'][0])]);
                    $openssl_version .= $alphabet[intval($openssl_version_parsed['patch'][0])]; // ideal for text comparison

                }else{

                    $tmp_val = intval($openssl_version_parsed['patch'][0]);

                    if($tmp_val != 0){

                        //error_log('[lnum 4106] [crnrstn] openssl_version ::' . $openssl_version . ' + ' . intval($openssl_version_parsed['patch'][0]));
                        $openssl_version .= '.' . intval($openssl_version_parsed['patch'][0]); // ideal for version_compare

                    }

                }

            }

            $tmp_version_openssl = $openssl_version;
            //self::$oCRNRSTN_CONFIG_MGR->input_data_value($tmp_version_openssl, 'version_openssl');

            //
            // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
            // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
            // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
            //
            // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
            // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
            // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
            // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
            // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
            //
            // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
            // - $oCRNRSTN->err_message_queue_push(),
            // - $oCRNRSTN->err_message_queue_retrieve(),
            // - $oCRNRSTN->err_message_queue_clear(), AND
            // - $oCRNRSTN->get_err_message_count().
            //
            // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
            //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
            //	            CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
            //		        SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
            //	            ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
            //		        EXPIRATION TTL.
            //
            //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
            if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', $tmp_version_openssl, 'version_openssl', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){

                //
                // HOOOSTON...VE HAF PROBLEM!
                throw new Exception($this->err_message_queue_retrieve());

            }

        }catch(Exception $e){

            //
            // LET CRNRSTN :: HANDLE THIS PER THE LOGGING PROFILE CONFIGURATION FOR THIS SERVER.
            $this->catch_exception($e, LOG_ERR, __METHOD__, __NAMESPACE__);

            return false;

        }

    }

    //public function return_openssl_digest_method(){
//
    //    return self::$openssl_preferred_digest;
//
    //}
//
//    private function ____initialize_digest_profile(){
//        /*
//
//        GENERATING LAMP ENVIRONMENT ::
//        Ubuntu 18.04.1 LTS
//        Apache v2.4.29
//        MySQLi v5.7.38
//        php v7.0.33
//        OpenSSL v1.1.1
//        NuSOAP v0.9.5
//
//        $digests             = openssl_get_md_methods();
//        $digests_and_aliases = openssl_get_md_methods(true);
//        $digest_aliases      = array_diff($digests_and_aliases, $digests);
//
//        $digests->Array(
//            [0] => blake2b512
//            [1] => blake2s256
//            [2] => md4
//            [3] => md5
//            [4] => md5-sha1
//            [5] => ripemd160
//            [6] => sha1
//            [7] => sha224
//            [8] => sha256
//            [9] => sha3-224
//            [10] => sha3-256
//            [11] => sha3-384
//            [12] => sha3-512
//            [13] => sha384
//            [14] => sha512
//            [15] => sha512-224
//            [16] => sha512-256
//            [17] => shake128
//            [18] => shake256
//            [19] => sm3
//            [20] => whirlpool
//        )
//
//        $digest_aliases->Array(
//            [0] => RSA-MD4
//            [1] => RSA-MD5
//            [2] => RSA-RIPEMD160
//            [3] => RSA-SHA1
//            [4] => RSA-SHA1-2
//            [5] => RSA-SHA224
//            [6] => RSA-SHA256
//            [7] => RSA-SHA3-224
//            [8] => RSA-SHA3-256
//            [9] => RSA-SHA3-384
//            [10] => RSA-SHA3-512
//            [11] => RSA-SHA384
//            [12] => RSA-SHA512
//            [13] => RSA-SHA512/224
//            [14] => RSA-SHA512/256
//            [15] => RSA-SM3
//            [18] => id-rsassa-pkcs1-v1_5-with-sha3-224
//            [19] => id-rsassa-pkcs1-v1_5-with-sha3-256
//            [20] => id-rsassa-pkcs1-v1_5-with-sha3-384
//            [21] => id-rsassa-pkcs1-v1_5-with-sha3-512
//            [23] => md4WithRSAEncryption
//            [26] => md5WithRSAEncryption
//            [27] => ripemd
//            [29] => ripemd160WithRSA
//            [30] => rmd160
//            [32] => sha1WithRSAEncryption
//            [34] => sha224WithRSAEncryption
//            [36] => sha256WithRSAEncryption
//            [42] => sha384WithRSAEncryption
//            [45] => sha512-224WithRSAEncryption
//            [47] => sha512-256WithRSAEncryption
//            [48] => sha512WithRSAEncryption
//            [52] => sm3WithRSAEncryption
//            [53] => ssl3-md5
//            [54] => ssl3-sha1
//        )
//
//        //
//        // 06/29/2022 @ 1953 hrs
//        self::$openssl_preferred_digest_ARRAY = array('sha256', 'sha224', 'sha384', 'sha512', 'sha512-224', 'sha512-256', 'RSA-SHA224', 'RSA-SHA256', 'RSA-SHA384', 'RSA-SHA512', 'RSA-SHA512/224', 'RSA-SHA512/256', 'md5', 'sha1', 'RSA-MD5', 'RSA-SHA1');
//
//        [Wed Jun 29 22:52:40.959376 2022] [:error] [pid 39310] [client 172.16.225.1:65098]
//        2677 env $secret_key[hello-there-mr-encryption-key] openssl_digest_profile->sha256
//
//        [Wed Jun 29 22:52:40.959389 2022] [:error] [pid 39310] [client 172.16.225.1:65098]
//        2679 env $secret_key[\x91Uz\xf1\xe3\x1e\xaa]\nJ2\xe2\n\xfd9\x99,\x10\xc7\xbe\t\xef0=\x9f\xe2d\x13y\xf8\x12@] openssl_digest_profile->sha256
//
//        */
//
//        $tmp_sys_digests_methods_ARRAY = openssl_get_md_methods();
//        $tmp_found_digest_match = false;
//
//        foreach(self::$openssl_preferred_digest_ARRAY as $index_pref_digest => $pref_digest_method){
//
//            foreach($tmp_sys_digests_methods_ARRAY as $index_sys_digest => $sys_digest_method){
//
//                if(strtolower($sys_digest_method) == strtolower($pref_digest_method)){
//
//                    $this->error_log('The selected preferred OpenSSL digest is [' . $sys_digest_method . '][PREF=' . $index_pref_digest . '/SYS=' . $index_sys_digest . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                    $tmp_found_digest_match = true;
//                    self::$openssl_preferred_digest = $sys_digest_method;
//                    //self::$oCRNRSTN_CONFIG_MGR->input_data_value(self::$openssl_preferred_digest, 'openssl_preferred_digest');
//
//                    //
//                    // Wednesday, October 18, 2023 @ 0405 hrs.
//                    //
//                    // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
//                    // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
//                    // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
//                    //
//                    // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
//                    // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
//                    // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
//                    // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
//                    // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
//                    //
//                    // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
//                    //  - $oCRNRSTN->err_message_queue_push(),
//                    //  - $oCRNRSTN->err_message_queue_retrieve(),
//                    //  - $oCRNRSTN->err_message_queue_clear(), AND
//                    //  - $oCRNRSTN->get_err_message_count().
//                    //
//                    // Monday, December 11, 2023 @ 1100 hrs.
//                    //
//                    // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
//                    //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
//                    //	          CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
//                    //		      SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
//                    //	          ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
//                    //		      EXPIRATION TTL.
//                    //
//                    //              NULL IS THE DEFAULT FOR THIS $message_override INPUT.
//                    if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', self::$openssl_preferred_digest, 'openssl_preferred_digest', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){
//
//                        //
//                        // HOOOSTON...VE HAF PROBLEM!
//                        throw new Exception($this->err_message_queue_retrieve());
//
//                    }
//
//                    break 2;
//
//                }
//
//            }
//
//        }
//
//        if(!($tmp_found_digest_match == true)){
//
//            $tmp_digests_and_aliases = openssl_get_md_methods(true);
//            $tmp_digest_aliases_ARRAY = array_diff($tmp_digests_and_aliases, $tmp_sys_digests_methods_ARRAY);
//
//            foreach($tmp_digest_aliases_ARRAY as $index_sys_digest => $sys_digest_method){
//
//                foreach(self::$openssl_preferred_digest_ARRAY as $index_pref_digest => $pref_digest_method){
//
//                    if(strtoupper($sys_digest_method) == strtoupper($pref_digest_method)){
//
//                        $this->error_log('The selected preferred OpenSSL digest (via alias) is [' . $sys_digest_method . '][PREF=' . $index_pref_digest . '/SYS=' . $index_sys_digest . '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//
//                        self::$openssl_preferred_digest = $sys_digest_method;
//
//                        //
//                        // Wednesday, October 18, 2023 @ 0406 hrs.
//                        //
//                        // THE CRNRSTN :: CONFIGURATION MANAGER WILL INPUT CLEAN UGC DATA
//                        // OR LOOK FOR THE BEST AND MOST ELEGANT (PLEASE READ AS GRACEFUL)
//                        // DEGRADATION PATHWAYS TO A VANILLA DEFAULT.
//                        //
//                        // ON CRITICAL ERR, $oCRNRSTN->config_ugc_input_clean_data() RETURNS
//                        // NULL, AND A SYSTEM EXCEPTION IS THROWN. OTHERWISE, IF THE INPUT
//                        // DATA IS NOT VALID BUT CAN BE OVERRIDDEN WITH A SETTINGS DEFAULT,
//                        // AN ON THE FLY PATCH IS MADE, AND A SYSTEM NOTIFICATION WITH
//                        // DETAILS ABOUT THE INTERNAL OVERRIDE IS QUIETLY CAPTURED.
//                        //
//                        // CURRENTLY IN DEVELOPMENT UNDER CRNRSTN :: LOGGING ARE:
//                        //  - $oCRNRSTN->err_message_queue_push(),
//                        //  - $oCRNRSTN->err_message_queue_retrieve(),
//                        //  - $oCRNRSTN->err_message_queue_clear(), AND
//                        //  - $oCRNRSTN->get_err_message_count().
//                        //
//                        //  Monday, December 11, 2023 @ 1100 hrs.
//                        //
//                        // PLEASE NOTE: $oCRNRSTN->err_message_queue_retrieve() CAN RECEIVE
//                        //              AN ERR MESSAGE OUTPUT OVERRIDE AS INPUT. ALSO OF NOTE...TO
//                        //	          CRNRSTN :: ESPECIALLY...IS THAT ACCEPTABLE INPUT CAN INCLUDE DATA
//                        //		      SUCH AS EMPTY STRING, SOAP ERROR OBJECT, OR EVEN AN OpenSSL v1.1.1
//                        //	          ENCRYPTED JSON PACKET CONTAINING SESSION META AND A CACHE
//                        //		      EXPIRATION TTL.
//                        //
//                        //             NULL IS THE DEFAULT FOR THIS $message_override INPUT.
//                        if(!($tmp_result = $this->config_ugc_input_clean_data(__FUNCTION__ . '_string', self::$openssl_preferred_digest, 'openssl_preferred_digest', 'CRNRSTN::RESOURCE::CONFIGURATION', 0))){
//
//                            //
//                            // HOOOSTON...VE HAF PROBLEM!
//                            throw new Exception($this->err_message_queue_retrieve());
//
//                        }
//
//                        break 2;
//
//                    }
//
//                }
//
//            }
//
//        }
//
//    }


    public function proper_response_return($response = NULL, $header_options_array = NULL, $crnrstn_response_profile_key = NULL){

        return $this->oCRNRSTN_ENV->proper_response_return($response, $header_options_array, $crnrstn_response_profile_key);

    }

    public function return_back_link(){

        return '';

    }

    public function process_for_filename($filename){

        return $this->oCRNRSTN_ASSET_MGR->process_for_filename($filename);

    }

    public function explode_url($uri){

        /*
        parse_url()
        This function is intended specifically for the purpose of
        parsing URLs and not URIs. However, to comply with PHP's
        backwards compatibility requirements it makes an exception
        for the file:// scheme where triple slashes (file:///...)
        are allowed. For any other scheme this is invalid.

        This function may not give correct results for relative URLs.

        array(8){
            ["scheme"]=>
            string(4) "http"
            ["host"]=>
            string(8) "hostname"
            ["port"]=>
            int(9090)
            ["user"]=>
            string(8) "username"
            ["pass"]=>
            string(8) "password"
            ["path"]=>
            string(5) "/path"
            ["query"]=>
            string(9) "arg=value"
            ["fragment"]=>
            string(6) "anchor"
        }


        $str = "first=value&arr[]=foo+bar&arr[]=baz";

        parse_str($str, $output);
        echo $output['first'];  // value
        echo $output['arr'][0]; // foo bar
        echo $output['arr'][1]; // baz

        */

        $tmp_scheme = '';
        $tmp_host = '';
        $tmp_path = '';
        $tmp_url_parse_array = $this->mb_parse_url($uri);

        $tmp_uri_ARRAY = array();

        if(isset($tmp_url_parse_array['scheme'])){

            $tmp_scheme = $tmp_url_parse_array['scheme'];

        }

        if(isset($tmp_url_parse_array['host'])){

            $tmp_host = $tmp_url_parse_array['host'];

        }

        if(isset($tmp_url_parse_array['path'])){

            $tmp_path = $tmp_url_parse_array['path'];

        }

        $tmp_uri_ARRAY['root'] = $tmp_scheme . '://' . $tmp_host . $tmp_path;

        //error_log(__LINE__ . ' user $tmp_url_parse_array=' . print_r($tmp_url_parse_array, true));

        if(isset($tmp_url_parse_array['query'])){

            parse_str($tmp_url_parse_array['query'], $params_ARRAY);

            $tmp_uri_ARRAY['param'] = $params_ARRAY;

        }else{

            $params_ARRAY = array();
            $tmp_uri_ARRAY['param'] = $params_ARRAY;

        }

        return $tmp_uri_ARRAY;

    }

    public function append_url_param($param_ARRAY, $tunnel_encrypt = true, $no_encrypt_param_ARRAY = NULL, $include_no_encrypt = true){

        //error_log(__LINE__ . ' user append_url_param=' . print_r($param_ARRAY, true));

        if($this->is_ssl() == true){

            $tmp_lnk = 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];

        }else{

            $tmp_lnk = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];

        }

        $tmp_lnk_explode_ARRAY = $this->explode_url($tmp_lnk);

        /*
        $tmp_lnk_explode_ARRAY['root']
        $tmp_lnk_explode_ARRAY['param']

        echo $tmp_lnk_explode_ARRAY['param']['first'];  // value
        echo $tmp_lnk_explode_ARRAY['param']['arr'][0]; // foo bar
        echo $tmp_lnk_explode_ARRAY['param']['arr'][1]; // baz
        */

        $tmp_flag_param_ARRAY = array();
        $tmp_encrypted_params_pipe = '';
        $tmp_return_str = $tmp_lnk_explode_ARRAY['root'];

        $param_concatenator = '?';

        //
        // ADD ANY *NEW* URL PARAMS
        foreach($param_ARRAY as $key => $value){

            //if(!isset($tmp_flag_param_ARRAY[$this->return_param_name($value)]) && ($key != 'crnrstn_encrypt_tunnel')){
            if($this->return_param_name($value) != 'crnrstn_encrypt_tunnel'){

                $tmp_flag_param_ARRAY[$this->return_param_name($value)] = 1;

                $tmp_return_str .= $param_concatenator . $this->url_param_append($value, $tunnel_encrypt);

                if($tunnel_encrypt == true){

                    $tmp_encrypted_params_pipe .= $key . '|';

                }

                if($param_concatenator == '?'){

                    $param_concatenator = '&';

                }

            }

        }

        if(isset($no_encrypt_param_ARRAY) && $include_no_encrypt == true){

            foreach($no_encrypt_param_ARRAY as $key => $value){

                //if(!isset($tmp_flag_param_ARRAY[$this->return_param_name($value)]) && ($key != 'crnrstn_encrypt_tunnel')){
                if($this->return_param_name($value) != 'crnrstn_encrypt_tunnel'){

                    $tmp_flag_param_ARRAY[$this->return_param_name($value)] = 1;

                    $tmp_return_str .= $param_concatenator . $this->url_param_append($value, false);

                    if($tunnel_encrypt == true){

                        $tmp_encrypted_params_pipe .= $key . '|';

                    }

                    if($param_concatenator == '?'){

                        $param_concatenator = '&';

                    }

                }

            }

        }

        //
        // KEEP ALL ORIGINAL URL PARAMS
        foreach($tmp_lnk_explode_ARRAY['param'] as $key00 => $value00){

            if(!isset($tmp_flag_param_ARRAY[$key00]) && ($key00 != 'crnrstn_encrypt_tunnel')){

                if(isset($no_encrypt_param_ARRAY) && $include_no_encrypt == false){

                    $tmp_spoiled = false;

                    foreach($no_encrypt_param_ARRAY as $key01 => $value01){

                        if($key01 == $key00){

                            $tmp_spoiled = true;

                        }

                    }

                    if(!($tmp_spoiled == true)){

                        $tmp_flag_param_ARRAY[$key00] = 1;

                        $tmp_return_str .= $param_concatenator . $this->url_param_append($key00 . '=' . $value00, $tunnel_encrypt);

                        if($tunnel_encrypt == true){

                            $tmp_encrypted_params_pipe .= $key00 . '|';

                        }

                        if($param_concatenator == '?'){

                            $param_concatenator = '&';

                        }

                    }

                }else{

                    $tmp_flag_param_ARRAY[$key00] = 1;

                    $tmp_return_str .= $param_concatenator . $this->url_param_append($key00 . '=' . $value00, $tunnel_encrypt);

                    if($tunnel_encrypt == true){

                        $tmp_encrypted_params_pipe .= $key00 . '|';

                    }

                    if($param_concatenator == '?'){

                        $param_concatenator = '&';

                    }

                }

            }

        }

        if(isset($no_encrypt_param_ARRAY)){

            foreach($no_encrypt_param_ARRAY as $key => $value00){

                $tmp_flag_param_ARRAY[$this->return_param_name($value00)] = 1;

                $tmp_return_str .= $param_concatenator . $this->url_param_append($value00, false);

            }

        }

        if($tunnel_encrypt == true){

            $tmp_return_str .= $param_concatenator . 'crnrstn_encrypt_tunnel=' . urlencode($this->data_encrypt($tmp_encrypted_params_pipe));

        }

        return $tmp_return_str;

    }

    private function url_param_append($param_str, $tunnel_encrypt){

        if($tunnel_encrypt == true){

            $tmp_str = '';
            $tmp_array = explode('=', $param_str);

            $tmp_str .= $tmp_array[0];
            $tmp_str .= '=';

            if(isset($tmp_array[1])){

                //
                // EXCLUDE crnrstn_m FROM ENCRYPTION FOR LINK IDENTIFICATION WITHIN ANALYTICS
                if($tmp_array[0] != 'crnrstn_m'){

                    $tmp_str .= urlencode($this->data_encrypt($tmp_array[1]));

                }else{

                    $tmp_str .= $tmp_array[1];

                }

            }else{

                $tmp_str .= $this->data_encrypt('');

            }

            return $tmp_str;

        }else{

            $tmp_str = '';
            $tmp_array = explode('=', $param_str);

            $tmp_str .= $tmp_array[0];
            $tmp_str .= '=';

            if(isset($tmp_array[1])){

                $tmp_str .= urlencode($tmp_array[1]);

            }

            return $tmp_str;

        }

    }

    private function return_param_name($param_str){

        $tmp_array = explode('=', $param_str);

        return $tmp_array[0];

    }

    public function return_server_response_code($response_code, $crnrstn_html_burn = NULL){


        $tmp_curr_headers_ARRAY = headers_list();
        $tmp_crnrstn_signature_headers_ARRAY = $this->header_signature_options_return();

        //
        // ENSURE ALL SIGNATURE HEADERS ARE IN PLACE AND CONTINUE
        $this->header_options_add($tmp_crnrstn_signature_headers_ARRAY);

        //
        // ADD PRE-EXISTING HEADER OPTIONS AFTER DEFAULT FOR OVERWRITE
        $this->header_options_add($tmp_curr_headers_ARRAY);

        $this->header_options_apply();

        //
        // Source: http://php.net/manual/en/function.http-response-code.php
        // Source of source: Wikipedia "List_of_HTTP_status_codes"
        $http_status_codes = array(100 => 'Continue', 101 => 'Switching Protocols', 102 => 'Processing', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 207 => 'Multi-Status', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Found', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 306 => '(Unused)', 307 => 'Temporary Redirect', 308 => 'Permanent Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 418 => 'I\'m a teapot', 419 => 'Authentication Timeout', 420 => 'Enhance Your Calm', 422 => 'Unprocessable Entity', 423 => 'Locked', 424 => 'Failed Dependency', 424 => 'Method Failure', 425 => 'Unordered Collection', 426 => 'Upgrade Required', 428 => 'Precondition Required', 429 => 'Too Many Requests', 431 => 'Request Header Fields Too Large', 444 => 'No Response', 449 => 'Retry With', 450 => 'Blocked by Windows Parental Controls', 451 => 'Unavailable For Legal Reasons', 494 => 'Request Header Too Large', 495 => 'Cert Error', 496 => 'No Cert', 497 => 'HTTP to HTTPS', 499 => 'Client Closed Request', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', 506 => 'Variant Also Negotiates', 507 => 'Insufficient Storage', 508 => 'Loop Detected', 509 => 'Bandwidth Limit Exceeded', 510 => 'Not Extended', 511 => 'Network Authentication Required', 598 => 'Network read timeout error', 599 => 'Network connect timeout error');

        if(!isset($crnrstn_html_burn)){
            /*
            There are two special-case header calls. The first is a header that starts with
            the string "HTTP/" (case is not significant), which will be used to figure out the
            HTTP status code to send. For example, if you have configured Apache to use a PHP
            script to handle requests for missing files (using the ErrorDocument directive),
            you may want to make sure that your script generates the proper status code.
            */
            header($_SERVER['SERVER_PROTOCOL'] . ' ' . $response_code . ' ' . $http_status_codes[$response_code]);
            exit();

        }

        header($_SERVER['SERVER_PROTOCOL'] . ' ' . $response_code . ' ' . $http_status_codes[$response_code]);

        $str = '<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    ' . $this->return_creative('CRNRSTN_FAVICON') . '
    <title>' . $response_code . ' ' . $http_status_codes[$response_code] . '</title>
</head>
<body style="background-color: #FFF; width:100%; text-align: left; margin:0px auto;">
<div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px; border-bottom: 2px solid #F90000;"></div>
<div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px; border-bottom: 1px solid #DB1717;"></div>

<div style=\'width:96%; margin:0 0 0 0; padding:6px 2% 0 2%; color:#FFF; font-family:"trebuchet MS", Verdana, sans-serif;background-color:#BEBEBE; height:30px; line-height: 28px;\'><h1 style="font-size: 30px; overflow: hidden; height:23px; padding-top:7px; margin-top: 0;">Server Error</h1></div>
<div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px; border-top: 2px solid #FFF;"></div>

<div style="height:5px; ' . $this->return_creative('BG_ELEMENT_RESPONSE_CODE', CRNRSTN_BASE64) . ' background-repeat: repeat-x;">
    <div style="display:block; clear:both; height:0; line-height:0; overflow:hidden; width:100%; font-size:1px;"></div>
</div>

<div style="padding:100px 0 300px 100px; float:left; font-family:arial; font-weight:bold; font-size:11px;">' . $response_code . ' ' . $http_status_codes[$response_code] . '</div>
<!--
<div style="position:absolute; padding:200px 0 0 10px; float:left;"><pre>

' . $crnrstn_html_burn . '

</pre></div>
-->
<div style="padding:16px 2% 0 0; float:right; width:260px;">
    <div style="float:right; ">
        ' . $this->return_component_branding_creative(true, CRNRSTN_HTML & CRNRSTN_ASSET_MODE_BASE64) . '
    </div>
</div>

<div style="float:right; padding:420px 0 0 0; margin:0; width:100%;">
    <div style="position: absolute; width:100%; text-align: right; /*background-color: #FFF;*/ padding-top: 20px;">
        ' . $this->return_creative('J5_WOLF_PUP_RAND') . '
    </div>
</div>

<div style="height:0; width:100%; clear:both; display: block; overflow: hidden;"></div>

</body>
</html>';

        echo $str;

        exit();
    }

    //
    // SOURCE :: https://stackoverflow.com/questions/5100189/use-php-to-check-if-page-was-accessed-with-ssl
    // COMMENT :: https://stackoverflow.com/a/10307798
    // AUTHOR :: Saeven :: https://stackoverflow.com/users/887067/saeven
    public function is_ssl(){

        if(!empty($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] != 'off')){

            $this->is_SSL = true;
            return true;

        }

        if(!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https'){

            $this->is_SSL = true;
            return true;

        }

        $this->is_SSL = false;

        return false;

    }

    public function return_total_bytes_stored(){

        //
        // THIS WILL BREAK...BUT THINGS ARE CHANGING.
        //
        // Thursday, November 23, 2023 @ 0158 hrs.
        return self::$oCRNRSTN_CONFIG_MGR->oCRNRSTN_DDO->return_total_bytes_stored();

    }

    public function isvalid_ssdtla_session_data($data_key){

        return self::$oSESSION_MGR->isvalid_ssdtla_session_data($data_key);

    }

    public function get_ssdtla_session_resource($data_key){

        return self::$oSESSION_MGR->get_ssdtla_session_resource($data_key);

    }

    public function add_ssdtla_resource($data_key, $data_value, $data_type_family = 'CRNRSTN::RESOURCE', $data_authorization_profile = NULL, $index = NULL, $ttl = NULL, $spool_resource = false){

        error_log(__LINE__ . ' crnrstn ' . __METHOD__ . ' DO WE STILL RUN THIS ARCHITECTURE? die();');

        die();
        $env_key = NULL;

        switch($data_authorization_profile){
            case CRNRSTN_AUTHORIZE_ALL:
            case CRNRSTN_AUTHORIZE_SESSION:
            case CRNRSTN_AUTHORIZE_SESSION & CRNRSTN_AUTHORIZE_RUNTIME:

                //
                // INITIALIZE TTL.
                if(!isset($ttl)){

                    $ttl = $this->get_resource('ssdtla_session_data_ttl', 0, 'CRNRSTN::RESOURCE::GENERAL_SETTINGS');

                }

                //
                // BASIC STORAGE.
                $this->oCRNRSTN_ENV->add_ssdtla_resource($data_key, $data_value, $data_type_family, $data_authorization_profile, $index, $ttl, $spool_resource);

            break;
            default:

                $this->env_key($env_key);

                //
                // CRNRSTN_AUTHORIZE_RUNTIME
                $this->add_resource($data_key, $data_value, $data_type_family, $data_authorization_profile, $index, $ttl, $spool_resource, $env_key);

            break;

        }

    }

    public function hash_file($file_path = NULL, $algorithm_override = NULL, $binary = false, $runtime_acceleration = false, $session_acceleration_key = NULL){

        $tmp_key = 'CRNRSTN_SESSION_ACCELERATED::' . $session_acceleration_key;

        if(isset($session_acceleration_key) && !isset($file_path)){

            //error_log(__LINE__ . ' crnrstn ***BEING CHEEKY*** [' . $this->get_ssdtla_session_resource($tmp_key) . '].');
            //if($this->isvalid_ssdtla_session_data($tmp_key) == true){

            if($this->isset_resource('data_value', $tmp_key, 'CRNRSTN::RESOURCE::HASH_ACCELERATION') == true){

                //error_log(__LINE__ . ' crnrstn HOT SESSION STRAIGHT RETURN[' . $this->get_ssdtla_session_resource($tmp_key) . '].');
                //return $this->get_ssdtla_session_resource($tmp_key);

                return $this->get_resource($tmp_key, 0, 'CRNRSTN::RESOURCE::HASH_ACCELERATION');

            }

            //error_log(__LINE__ . ' crnrstn ***TIME TO UPDATE SESSION*** [' . $this->get_ssdtla_session_resource($tmp_key) . '].');

        }else{

            if(isset($session_acceleration_key)){

                //if($this->isvalid_ssdtla_session_data($tmp_key) == true){
                if($this->isset_resource('data_value', $tmp_key, 'CRNRSTN::RESOURCE::HASH_ACCELERATION') == true){

                    //error_log(__LINE__ . ' crnrstn HOT SESSION STRAIGHT RETURN[' . $this->get_ssdtla_session_resource($tmp_key) . '].');
                    //return $this->get_ssdtla_session_resource($tmp_key);

                    return $this->get_resource($tmp_key, 0, 'CRNRSTN::RESOURCE::HASH_ACCELERATION');

                }

                if(strlen($file_path) > 0){

                    if(is_file($file_path)){

                        //$tmp_date_lastmodified = filemtime($file_path);

                        $tmp_hash_val = $this->hash_file($file_path, $algorithm_override, $binary);
                        //error_log(__LINE__ . ' crnrstn **SLOW** HASH RETURN FOR SESSION STORAGE [' . $session_acceleration_key . ']. [' . $tmp_hash_val . ']');

                        //
                        // TODO :: GET THIS BEHIND SESSION CHANNEL.
                        // DATA SHOULD BE HANDLED THROUGH THE CRNRSTN :: DDO, AS IT IS WITH CONFIG INFO.
                        // THIS IS AN EARLY USE OF WHAT HAS NOW BECOME THE CRNRSTN :: MULTI-CHANNEL DDO APPLICATION ARCHITECTURE.
                        // $this->add_ssdtla_resource($tmp_key, $tmp_hash_val, NULL, CRNRSTN_AUTHORIZE_SESSION);

                        //
                        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA OBJECT (MC-DDO) SERVICES LAYER.
                        // # # C # R # N # R # S # T # N # : : # # # #
                        // CRNRSTN :: UGC DATA INPUT [HASH ACCELERATION]
                        $tmp_output = $this->add_resource($tmp_key, $tmp_hash_val, 'CRNRSTN::RESOURCE::HASH_ACCELERATION', CRNRSTN_AUTHORIZE_SESSION, 0);

                        return $tmp_hash_val;

                    }

                }

                return '';

            }

        }

        //
        // THE "FILES PROCESSED" HASH VERSIONING (IN MEMORY)
        // hash_acceleration_ARRAY IS DUAL-KEYED ON FILE SIZE
        // AND DATE LAST MODIFIED.
        // TODO :: REMOVE THIS TODO WHEN WINDOWS COMPATIBILITY TESTING IS COMPLETE.
        //
        // Friday, December 1, 2023 @ 0953 hrs.
        $tmp_filesize = filesize($file_path);
        $tmp_date_lastmodfied = filemtime($file_path);

        //
        // LOAD CRNRSTN :: SYSTEM DEFAULT HASHING ALGORITHM.
        if(!isset($algorithm_override)){

            //$algorithm_override = self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'][self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER]];
            $algorithm_override = self::$hmac_hash_algorithm_ARRAY['DEFAULT']['NAME'];

        }

        //
        // INITIALIZE BYTE COUNT BY HASH.
        if(!isset($this->total_bytes_hashed_ARRAY[$algorithm_override])){

            $this->total_bytes_hashed_ARRAY[$algorithm_override] = 0;

        }

        //
        // THE FILE SIZE AND LAST MODIFIED DATE MUST BE
        // UNCHANGED IN ORDER FOR APPLICATION ACCELERATION
        // TO FIRE.
        if($runtime_acceleration == true){

            if(isset($this->hash_acceleration_ARRAY[$file_path][$tmp_date_lastmodfied][$tmp_filesize])){

                //error_log(__LINE__ . ' crnrstn HOT RUNTIME STRAIGHT RETURN [' . $this->hash_acceleration_ARRAY[$file_path][$tmp_date_lastmodfied][$tmp_filesize] . '].');
                return $this->hash_acceleration_ARRAY[$file_path][$tmp_date_lastmodfied][$tmp_filesize];

            }

        }

        $this->total_bytes_hashed_ARRAY[$algorithm_override] += $tmp_filesize;
        $tmp_hash_val = hash_file($algorithm_override, $file_path, $binary);

        //
        // TRACK ACCESSED CONFIGURATION FILES BY
        // THE ACQUIRED FILE VERSIONING HASH.
        self::$system_files_version_hash_ARRAY[$file_path] = $tmp_hash_val;

        //error_log(__LINE__ . ' crnrstn **SLOW** HASH RETURN algorithm[' . $algorithm_override . ']. hash_val[' . $tmp_hash_val . ']. [' . $file_path . '].');

        if($runtime_acceleration == true){

            //error_log(__LINE__ . ' crnrstn **NEUTRAL** HASH RUNTIME STORE [' . $tmp_hash_val . '].');
            $this->hash_acceleration_ARRAY[$file_path][$tmp_date_lastmodfied][$tmp_filesize] = $tmp_hash_val;

        }

        return $tmp_hash_val;

    }

    public function hash($data = NULL, $algorithm_override = NULL, $binary = false, $runtime_acceleration = false, $session_acceleration_key = NULL){

        $tmp_key = 'CRNRSTN_SESSION_ACCELERATED::' . $session_acceleration_key;

        if(isset($session_acceleration_key) && !isset($data)){

            //error_log(__LINE__ . ' crnrstn ***BEING CHEEKY*** [' . $this->get_ssdtla_session_resource($tmp_key) . '].');

            if($this->isvalid_ssdtla_session_data($tmp_key) == true){

                //error_log(__LINE__ . ' crnrstn HOT SESSION STRAIGHT RETURN[' . $this->get_ssdtla_session_resource($tmp_key) . '].');
                return $this->get_ssdtla_session_resource($tmp_key);

            }

            //error_log(__LINE__ . ' crnrstn ***TIME TO UPDATE SESSION*** [' . $this->get_ssdtla_session_resource($tmp_key) . '].');

        }else{

            if(isset($session_acceleration_key)){

                if($this->isvalid_ssdtla_session_data($tmp_key) == true){

                    //error_log(__LINE__ . ' crnrstn HOT SESSION STRAIGHT RETURN[' . $this->get_ssdtla_session_resource($tmp_key) . '].');
                    return $this->get_ssdtla_session_resource($tmp_key);

                }

                if(isset($data)){

                    $tmp_hash_val = $this->hash($data, $algorithm_override, $binary);
                    //error_log(__LINE__ . ' crnrstn **SLOW** HASH RETURN FOR SESSION STORAGE [' . $session_acceleration_key . ']. [' . $tmp_hash_val . ']');

                    //
                    // TODO :: GET THIS BEHIND SESSION CHANNEL.
                    // DATA SHOULD BE HANDLED THROUGH THE CRNRSTN :: DDO, AS IT IS WITH CONFIG INFO.
                    // THIS IS AN EARLY USE OF WHAT HAS NOW BECOME THE CRNRSTN :: MULTI-CHANNEL DDO APPLICATION ARCHITECTURE.
                    $this->add_ssdtla_resource($tmp_key, $tmp_hash_val, NULL, CRNRSTN_AUTHORIZE_SESSION);

                    return $tmp_hash_val;

                }

                return '';

            }

        }

        if(!isset($algorithm_override)){

            //$algorithm_override = self::$hmac_hash_algorithm_ARRAY['OPTIONS']['SERVER'][self::$hmac_hash_algorithm_ARRAY['DEFAULT'][CRNRSTN_INTEGER]];
            $algorithm_override = self::$hmac_hash_algorithm_ARRAY['DEFAULT']['NAME'];

        }

        if(!isset($this->total_bytes_hashed_ARRAY[$algorithm_override])){

            $this->total_bytes_hashed_ARRAY[$algorithm_override] = 0;

        }

        if($runtime_acceleration == true){

            if(isset($this->hash_acceleration_ARRAY[$data])){

                //error_log(__LINE__ . ' crnrstn HOT RUNTIME STRAIGHT RETURN [' . $this->hash_acceleration_ARRAY[$data] . '].');
                return $this->hash_acceleration_ARRAY[$data];

            }

        }

        $this->total_bytes_hashed_ARRAY[$algorithm_override] += $this->return_cache_bytes_size($data);

        switch($algorithm_override){
            case 'crc32':

                $tmp_hash_val = $this->crcINT($data);

            break;
            default:

                $tmp_hash_val = hash($algorithm_override, $data, $binary);

            break;

        }

        //error_log(__LINE__ . ' crnrstn **SLOW** HASH RETURN algorithm[' . $algorithm_override . ']. hash_val[' . $tmp_hash_val . ']. [' . $data . '].');

        if($runtime_acceleration == true){

            //error_log(__LINE__ . ' crnrstn **NEUTRAL** HASH RUNTIME STORE [' . $tmp_hash_val . '].');
            $this->hash_acceleration_ARRAY[$data] = $tmp_hash_val;

        }

        return $tmp_hash_val;

    }

//    // https://www.php.net/manual/en/function.parse-url.php
//    public function resolve_url($base, $url, $mb_safe = true){
//        if(!strlen($base)) return $url;
//        // Step 2
//        if(!strlen($url)) return $base;
//        // Step 3
//        if(preg_match('!^[a-z]+:!i', $url)) return $url;
//
//        if($mb_safe){
//
//            $base = $this->mb_parse_url($base);
//
//        }else{
//
//            $base = parse_url($base);
//
//        }
//
//        if($url{0} == "#"){
//            // Step 2 (fragment)
//            $base['fragment'] = substr($url, 1);
//            return unparse_url($base);
//        }
//        unset($base['fragment']);
//        unset($base['query']);
//        if(substr($url, 0, 2) == "//"){
//            // Step 4
//            return unparse_url(array(
//                'scheme'=>$base['scheme'],
//                'path'=>$url,
//            ));
//        }else if($url{0} == "/"){
//            // Step 5
//            $base['path'] = $url;
//        }else{
//            // Step 6
//            $path = explode('/', $base['path']);
//            $url_path = explode('/', $url);
//            // Step 6a: drop file from base
//            array_pop($path);
//            // Step 6b, 6c, 6e: append url while removing "." and ".." from
//            // the directory portion
//            $end = array_pop($url_path);
//            foreach($url_path as $segment){
//                if($segment == '.'){
//                    // skip
//                }else if($segment == '..' && $path && $path[sizeof($path)-1] != '..'){
//                    array_pop($path);
//                }else{
//                    $path[] = $segment;
//                }
//            }
//            // Step 6d, 6f: remove "." and ".." from file portion
//            if($end == '.'){
//                $path[] = '';
//            }else if($end == '..' && $path && $path[sizeof($path)-1] != '..'){
//                $path[sizeof($path)-1] = '';
//            }else{
//                $path[] = $end;
//            }
//            // Step 6h
//            $base['path'] = join('/', $path);
//
//        }
//        // Step 7
//        return unparse_url($base);
//    }

    /**
     * UTF-8 aware parse_url() replacement.
     *
     * @return array
     *
     * SOURCE :: https://www.php.net/manual/en/function.parse-url.php
     * AUTHOR :: lauris () lauris ! lv :: https://www.php.net/manual/en/function.parse-url.php#114817
     */
    private function mb_parse_url($url){

        $enc_url = preg_replace_callback(
            '%[^:/@?&=#]+%usD',
            function ($matches)
            {
                return urlencode($matches[0]);
            },
            $url
        );

        $parts = parse_url($enc_url);

        if($parts === false){

            throw new \InvalidArgumentException('Malformed URL: ' . $url);

        }

        foreach($parts as $name => $value){

            $parts[$name] = urldecode($value);

        }

        return $parts;

    }

    //
    // SOURCE :: http://php.net/manual/en/function.readfile.php
    public function readfile_chunked($filename, $retbytes = true){

        return $this->oCRNRSTN_ASSET_MGR->readfile_chunked($filename, $retbytes);

    }

    //
    // SOURCE :: https://www.php.net/manual/en/function.rtrim.php
    // AUTHOR :: pinkgothic at gmail dot com :: https://www.php.net/manual/en/function.rtrim.php#95802
    public function strrtrim($message, $strip){

        // break message apart by strip string
        $lines = explode($strip, $message);
        $last = '';

        // pop off empty strings at the end
        do{

            $last = array_pop($lines);

        }while(empty($last) && (count($lines)));

        // re-assemble what remains
        return implode($strip, array_merge($lines, array($last)));

    }

    public function generate_file_system_manager(){

        //
        // CURRENTLY, CALLED FROM THE ASSET MANAGER WHEN SYSTEM INTEGRATIONS SUPPORT IS REQUIRED.
        return new crnrstn_file_system_integrations_manager($this);

    }

    public function validate_DIR_endpoint($dir_path, $endpoint_type = 'DESTINATION', $permissions_chmod = 775){

        switch($endpoint_type){
            case 'SOURCE':

                if(is_dir($dir_path)){

                    //
                    // SOURCE - LOCAL_DIR
                    if(is_readable($dir_path)){

                        return true;

                    }else{

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        $this->error_log('CRNRSTN :: has experienced permissions related errors attempting to read from the source directory, ' . $dir_path . '.');

                    }

                }else{

                    //
                    // HOOOSTON...VE HAF PROBLEM!
                    $this->error_log('CRNRSTN :: has experienced errors attempting to find the source directory, ' . $dir_path . ', within the local file system.');

                }

            break;
            default:

                //
                // DESTINATION - LOCAL_DIR
                if(is_dir($dir_path)){

                    if(is_writable($dir_path)){

                        //error_log(__LINE__ . ' crnrstn ' . __METHOD__ . ' THE DIRECTORY [' . $dir_path . '] IS WRITABLE!');

                        return true;

                    }else{

                        //error_log(__LINE__ . ' crnrstn ' . __METHOD__ . ' THE DIRECTORY IS **NOT** WRITABLE!');

                        //
                        // ATTEMPT TO CHANGE PERMISSIONS AND CHECK AGAIN
                        // BEFORE COMPLETELY GIVING UP
                        $tmp_current_perms = substr(decoct( fileperms($dir_path) ), 2);
                        $tmp_configuration_serial_hash = self::$oCRNRSTN_n->config_serial_hash;

                        $this->err_message_queue_push(NULL, 'CRNRSTN :: has experienced permissions related error as the destination directory, ' . $dir_path . ' (' . $tmp_current_perms . '), is NOT writable to ' . $permissions_chmod . ', and furthermore ');
                        if(chmod($dir_path, $permissions_chmod)){
                            $this->err_message_queue_clear();
                            return true;

                        }else{

                            $tmp_current_perms = substr(decoct( fileperms($dir_path) ), 2);

                            //
                            // HOOOSTON...VE HAF PROBLEM!
                            $this->error_log('CRNRSTN :: has experienced permissions related error as the destination directory, ' . $dir_path . ', is NOT writable with current permissions as ' . $tmp_current_perms . '.');

                        }

                    }

                }else{

                    //
                    // ATTEMPT TO MAKE DIRECTORY
                    // BEFORE COMPLETELY GIVING UP
                    if(!($this->mkdir_r($dir_path, $permissions_chmod) == true)){

                        $permissions_chmod = octdec( str_pad($permissions_chmod,4,'0',STR_PAD_LEFT) );

                        //
                        // HOOOSTON...VE HAF PROBLEM!
                        $this->error_log('CRNRSTN :: has experienced error as the destination directory, ' . $dir_path . ', does NOT exist, and it could NOT be created as ' . $permissions_chmod . '.');

                    }else{

                        return true;

                    }

                }

            break;

        }

        return false;

    }

    //
    // SOURCE :: https://gist.github.com/jefferyrdavis/5992282
    // COMMENT :: https://gist.github.com/jefferyrdavis/5992282?permalink_comment_id=2643413#gistcomment-2643413
    // AUTHOR :: FranciscoG :: https://gist.github.com/FranciscoG
    public function is_valid_zipcode($zipcode){

        //
        // SUPPORT FOR CRNRSTN :: WETHRBUG
        // Tuesday, October 3, 2023 @ 2019 hrs.
        return self::$oCRNRSTN_PERFORMANCE_REGULATOR->is_valid_zipcode($zipcode);

    }

    public function resource_filecache_version($file_path){

        $file_cache_version_str = '420.00.' . filesize($file_path) . '.' . filemtime($file_path).'.5';

        return $file_cache_version_str;

    }

    private function path_no_slash_dot($path){

        $tmp_path_array = $this->str_split_unicode($path);
        $tmp_path_array_rev = array_reverse($tmp_path_array);

        if($tmp_path_array_rev[0] == '.' && $tmp_path_array_rev[1] == '/'){

            return false;

        }else{

            return true;

        }

    }

    private function find_deepest_empty_dir($results, $is_dir_status_array, $results_pos, $tmp_dirPath_flag_ARRAY = NULL, $prev_result_pos = NULL, $prev_result_path = NULL){

        $tmp_results_cnt = sizeof($results);
        for($search_pos = $results_pos; $search_pos < $tmp_results_cnt; $search_pos++){

            if($is_dir_status_array[$search_pos] == 1){

                //
                // WE HAVE A DIRECTORY RESULT.
                if($this->path_no_slash_dot($results[$search_pos]) == true){

                    //
                    // DIRECTORY WITH GOOD FORMAT.
                    if(!isset($prev_result_path)){

                        $prev_result_pos = $search_pos;
                        $prev_result_path = $results[$search_pos];
                        $current_result_path = $results[$search_pos];

                    }else{

                        $current_result_path = $results[$search_pos];
                        $pos = strpos($current_result_path, $prev_result_path);

                        if($pos !== false){

                            //
                            // TRANSITION CURRENT TO PREVIOUS.
                            $prev_result_pos = $search_pos;
                            $prev_result_path = $current_result_path;

                        }else{

                            //
                            // BURN CURRENT PATH
                            if(!isset($tmp_dirPath_flag_ARRAY[$prev_result_path])){

                                //error_log(__LINE__. ' crnrstn [' . $search_pos . '] BURN DIR ->' . $prev_result_path);
                                $tmp_deepest_empty_dir_ARRAY['burn_result_path'] = $prev_result_path;
                                $tmp_deepest_empty_dir_ARRAY['results_pos'] = $search_pos;

                                //$tmp_dirPath_flag_ARRAY[0] = $prev_result_path;
                                $tmp_deepest_empty_dir_ARRAY['flag_array'][0] = $prev_result_path;

                                return $tmp_deepest_empty_dir_ARRAY;

                            }else{

                                return NULL;

                            }

                        }

                    }

                }

            }else{

                //
                // WE HAVE FILE. SKIP DIRECTORY.

            }

        }

        return NULL;

    }

    //
    // SOURCE :: http://php.net/manual/en/class.recursivedirectoryiterator.php
    // AUTHOR :: http://php.net/manual/en/class.recursivedirectoryiterator.php#85805
    public function scandir_system_integrations($directory, $endpoint_serial = NULL, $return_files_only = false){

        //
        // TRY TO BE CAREFUL WITH THIS METHOD. THIS IS R&D KIT BUILT
        // FOR A ONE-OFF. WELL, SHE IS TIED TO CONFIG SETTINGS...THERE IS POTENTIAL...MAYBE NOT HERE?
        //
        // TODO :: WE ARE LOOKING TO LOW-LEVEL SPLICE THIS R&D INTO CRNRSTN :: FILE HANDLING
        // PROTOCOLS. THIS IS NOW IN DEVELOPMENT; SEE $this->scandir(), $this->fwrite(), ET AL.
        //
        // THERE ARE NO MEMORY USAGE LIMITS IN PLACE AT THE MOMENT.
        // SORRY! PLZ, GIVE US A SECOND TO GET THIS PERFORMANCE
        // DRIVEN SAFETY DEVICE HOOKED TO THE CONFIGURATION
        // SETTINGS OF CRNRSTN ::
        //
        // Saturday, September 16, 2023 @ 0603 hrs.

        $results = array();
        $results_final_output = array();
        $results_filePath_output = array();
        $is_dir_status_array = array();
        $path = realpath($directory);

        //
        // SINCE WE ARE GOING TO PAY FOR THE LOOPS, MIGHT AS WELL
        // MAXIMIZE ROI, AND GET SOME LOW HANGING META-FRUIT.
        $tmp_results_total_filesize = 0;

        //
        // LOAD ACTIVE FILE ATTRIBUTES.
        $tmp_active_file_attributes_ARRAY = $this->get_resource('system_file_active_attributes_profile', 0, 'CRNRSTN::RESOURCE::LOCAL_FILE_SYSTEM');

        //
        // ESTABLISH ENDPOINT SERIALIZATION.
        if(!isset($endpoint_serial)){

            //
            // PROPER-RELEVANT TO THE LOCAL FILE SYSTEM...THIS
            // EXERCISE WILL BE....EVEN ON TOP OF THE
            // CRNRSTN :: SOAP-SERVICES REAL-TIME SESSION CAST
            // SERVICES LAYER (SSRT-SCSL).
            $endpoint_serial = $this->hash($_SERVER['SERVER_ADDR']);

        }

        //
        // CHECK FOR PRE-EXISTING FILE HANDLING REQUEST.
        if(!isset(self::$system_integrations_directory_content_ARRAY[self::$request_id])){

            self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory]['DIR_PATH'] = $directory;
            self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory]['TYPE'] = filetype($directory);

        }

        $tmp_stat = false;
        if($tmp_active_file_attributes_ARRAY['BLOCK_ALLOCATE'] == 1 ||
            $tmp_active_file_attributes_ARRAY['BLOCK_SIZE'] == 1 ||
            $tmp_active_file_attributes_ARRAY['DATE_LASTMODIFIED'] == 1 ||
            $tmp_active_file_attributes_ARRAY['DATE_LASTACCESSED'] == 1 ||
            $tmp_active_file_attributes_ARRAY['GID_STRING'] == 1 ||
            $tmp_active_file_attributes_ARRAY['GID_INT'] == 1 ||
            $tmp_active_file_attributes_ARRAY['UID_STRING'] == 1 ||
            $tmp_active_file_attributes_ARRAY['UID_INTEGER'] == 1){

            $tmp_stat = true;

        }

//        $objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path), RecursiveIteratorIterator::SELF_FIRST);
//        foreach($objects as $tmp_resource_path => $object){
//
//            $tmp_type = filetype($tmp_resource_path);
//            error_log(__LINE__ . ' crnrstn $tmp_type[' . $tmp_type . '].');
//            echo __LINE__ . ' crnrstn ' . $tmp_type . '<br>';
//
//        }
//
//        die();

        $objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path), RecursiveIteratorIterator::SELF_FIRST);
        foreach($objects as $tmp_resource_path => $object){

            //if((strpos($tmp_resource_path, '/.') !== false) || (strpos($tmp_resource_path, '/..') !== false)){
            if((strpos($tmp_resource_path, '/..') !== false)){

            }else{

                //
                // filetype();
                // Returns the type of the file. Possible values are fifo, char, dir, block, link, file,
                // socket and unknown.
                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['TYPE'] = filetype($tmp_resource_path);

                switch(self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['TYPE']){
                    case 'dir':

                        //
                        // IF DIRECTORY META IS GOOD TO RETURN.
                        if(!($return_files_only !== false)){

                            if($tmp_active_file_attributes_ARRAY['FILESIZE'] == 1){

                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['FILESIZE'] = 0;

                            }

                            $results[] = $tmp_resource_path;
                            //error_log(__LINE__ . ' crnrstn RAW ->' . $tmp_resource_path);

                            //
                            // IF THIS IS A FILE.
                            if(self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['TYPE'] == 'file'){

                                error_log(__LINE__ . ' crnrstn FILE ->' . $tmp_resource_path);

                                //
                                // WE HAVE A FILE.
                                if($this->path_no_slash_dot($tmp_resource_path) == true){

                                    $results_filePath_output[$tmp_resource_path] = 1;
                                    $results_final_output[$tmp_resource_path] = 1;

                                    //
                                    // TO DISABLE USE OF stat(), SEE system_file_active_attributes_profile
                                    // IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                                    if($tmp_stat == true){

                                        $tmp_filestat_ARRAY = stat($tmp_resource_path);

                                    }

                                    if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['UID_INTEGER'] == 1)){

                                        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['UID_INTEGER'] = $tmp_filestat_ARRAY['uid'];

                                    }

                                    if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['GID_INT'] == 1)){

                                        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['GID_INT'] = $tmp_filestat_ARRAY['gid'];

                                    }

                                    if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['DATE_LASTACCESSED'] == 1)){

                                        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['DATE_LASTACCESSED'] = $tmp_filestat_ARRAY['atime'];

                                    }

                                    if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['DATE_LASTMODIFIED'] == 1)){

                                        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['DATE_LASTMODIFIED'] = $tmp_filestat_ARRAY['mtime'];

                                    }

                                    if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['BLOCK_SIZE'] == 1)){

                                        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['BLOCK_SIZE'] = $tmp_filestat_ARRAY['blksize'];

                                    }

                                    if($tmp_active_file_attributes_ARRAY['FILESIZE'] == 1){

                                        //
                                        // WINDOWS COMPATIBLE.
                                        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['FILESIZE'] = $this->find_filesize($tmp_resource_path);

                                    }

                                    if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['UID_STRING'] == 1)){

                                        //
                                        // TO DISABLE USE OF posix_getpwuid(), SEE system_file_active_attributes_profile
                                        // IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                                        $tmp_array = posix_getpwuid($tmp_filestat_ARRAY['uid']);
                                        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['UID_STRING'] = $tmp_array['name'];

                                    }

                                    if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['UID_STRING'] == 1)){

                                        //
                                        // TO DISABLE USE OF posix_getgrgid(), SEE system_file_active_attributes_profile
                                        // IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                                        $tmp_array = posix_getgrgid($tmp_filestat_ARRAY['gid']);
                                        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['GID_STRING'] = $tmp_array['name'];

                                    }

                                    if($tmp_active_file_attributes_ARRAY['PERMISSIONS_FULL'] == 1){

                                        //
                                        // TO DISABLE USE OF fileperms(), SEE system_file_active_attributes_profile
                                        // IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                                        $perms = fileperms($tmp_resource_path);
                                        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['PERMISSIONS_FULL'] = $this->return_full_permissions($perms);

                                    }

                                    if($tmp_active_file_attributes_ARRAY['PERMISSIONS_OCTAL'] == 1){

                                        //
                                        // TO DISABLE USE OF fileperms(), SEE system_file_active_attributes_profile
                                        // IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                                        $perms = fileperms($tmp_resource_path);

                                        //
                                        // SOURCE :: https://www.php.net/manual/en/function.fileperms.php
                                        // AUTHOR :: coolmic at example dot com :: https://www.php.net/manual/en/function.fileperms.php#113060
                                        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['PERMISSIONS_OCTAL'] = decoct($perms & 0777);

                                    }

                                    if($tmp_active_file_attributes_ARRAY['TOTAL_FILESIZE'] == 1){

                                        $tmp_results_total_filesize += self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['FILESIZE'];

                                    }

                                }

                                $is_dir_status_array[] = 0;

                            }else{

                                //error_log(__LINE__ . ' crnrstn DIR ->' . $tmp_resource_path);

                                //
                                // WE HAVE A DIRECTORY.
                                $is_dir_status_array[] = 1;
                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['DIR_PATH'] = $directory;
                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['TYPE'] = filetype($directory);

                            }

                            //
                            // LEGACY CODE FOR EMPTY DIRECTORIES.
                            $tmp_dirPath_flag_ARRAY = array();
                            $tmp_dirPath_flagOut_ARRAY = array();

                            //
                            // LOOP THROUGH RESULT SET AND ADD ANY EMPTY DIR.
                            $tmp_result_cnt = sizeof($results);
                            for($results_pos = 0; $results_pos < $tmp_result_cnt; $results_pos++){

                                $tmp_dir_selection = $this->find_deepest_empty_dir($results, $is_dir_status_array, $results_pos, $tmp_dirPath_flag_ARRAY);

                                if(isset($tmp_dir_selection)){

                                    //error_log(__LINE__ . ' crnrstn WE LIKE DIR ->' . $tmp_dir_selection['flag_array'][0]);
                                    $tmp_dirPath_flag_ARRAY[$tmp_dir_selection['flag_array'][0]] = 1;
                                    //self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['DIR_PATH'] = $directory;
                                    //self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['TYPE'] = filetype($directory);


                                }

                            }

                            //
                            // FOR EACH DIRECTORY PATH, IS THERE A FILE CONTAINING IT THEREIN?
                            foreach($results_filePath_output as $filePth => $fileKey){

                                foreach($tmp_dirPath_flag_ARRAY as $dirPath => $dirKey){

                                    $pos = strpos($filePth, $dirPath);
                                    if($pos !== false && !isset($tmp_dirPath_flagOut_ARRAY[$dirPath])){

                                        //
                                        // DISQUALIFY THIS DIRECTORY FOR FILE PATH MATCH.
                                        //error_log(__LINE__ . ' crnrstn DISQUALIFY THIS DIRECTORY->' . $dirPath);

                                        $tmp_dirPath_flagOut_ARRAY[$dirPath] = 5;

                                    }

                                }

                            }

                            //
                            // APPEND EMPTY DIRECTORIES TO ARRAY OF FILEPATH.
                            foreach($tmp_dirPath_flag_ARRAY as $dirPath => $dirKey){

                                if(!isset($tmp_dirPath_flagOut_ARRAY[$dirPath])){

                                    // error_log(__LINE__ . ' crnrstn WE BURN DIR ->' . $dirPath);
                                    $results_final_output[$dirPath] = 1;
                                    //self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['DIR_PATH'] = $directory;
                                    //self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['TYPE'] = filetype($directory);

                                }

                            }

                        }

                        if($tmp_active_file_attributes_ARRAY['FILESIZE'] == 1){

                            self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['FILESIZE'] = 0;

                        }

                    break;
                    case 'char':
                    case 'fifo':
                    case 'block':
                    case 'link':
                    case 'socket':
                    case 'unknown':
                    case 'file':
                    default:

                        if($tmp_active_file_attributes_ARRAY['FILESIZE'] == 1){

                            //
                            // INITIALIZE FILESIZE.
                            self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['FILESIZE'] = 0;

                        }

                        $results[] = $tmp_resource_path;

                        //
                        // WE HAVE A FILE.
                        if($this->path_no_slash_dot($tmp_resource_path) == true){

                            $results_filePath_output[$tmp_resource_path] = 1;
                            $results_final_output[$tmp_resource_path] = 1;

                            //
                            // TO DISABLE USE OF stat(), SEE system_file_active_attributes_profile
                            // IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                            if($tmp_stat == true){

                                $tmp_filestat_ARRAY = stat($tmp_resource_path);

                            }

                            if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['UID_INTEGER'] == 1)){

                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['UID_INTEGER'] = $tmp_filestat_ARRAY['uid'];

                            }

                            if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['GID_INT'] == 1)){

                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['GID_INT'] = $tmp_filestat_ARRAY['gid'];

                            }

                            if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['DATE_LASTACCESSED'] == 1)){

                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['DATE_LASTACCESSED'] = $tmp_filestat_ARRAY['atime'];

                            }

                            if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['DATE_LASTMODIFIED'] == 1)){

                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['DATE_LASTMODIFIED'] = $tmp_filestat_ARRAY['mtime'];

                            }

                            if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['BLOCK_SIZE'] == 1)){

                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['BLOCK_SIZE'] = $tmp_filestat_ARRAY['blksize'];

                            }

                            if($tmp_active_file_attributes_ARRAY['FILESIZE'] == 1){

                                //
                                // WINDOWS COMPATIBLE.
                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['FILESIZE'] = $this->find_filesize($tmp_resource_path);

                            }

                            if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['UID_STRING'] == 1)){

                                //
                                // TO DISABLE USE OF posix_getpwuid(), SEE system_file_active_attributes_profile
                                // IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                                $tmp_array = posix_getpwuid($tmp_filestat_ARRAY['uid']);
                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['UID_STRING'] = $tmp_array['name'];

                            }

                            if(($tmp_stat == true) && ($tmp_active_file_attributes_ARRAY['UID_STRING'] == 1)){

                                //
                                // TO DISABLE USE OF posix_getgrgid(), SEE system_file_active_attributes_profile
                                // IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                                $tmp_array = posix_getgrgid($tmp_filestat_ARRAY['gid']);
                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['GID_STRING'] = $tmp_array['name'];

                            }

                            if($tmp_active_file_attributes_ARRAY['PERMISSIONS_FULL'] == 1){

                                //
                                // TO DISABLE USE OF fileperms(), SEE system_file_active_attributes_profile
                                // IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                                $perms = fileperms($tmp_resource_path);
                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['PERMISSIONS_FULL'] = $this->return_full_permissions($perms);

                            }

                            if($tmp_active_file_attributes_ARRAY['PERMISSIONS_OCTAL'] == 1){

                                //
                                // TO DISABLE USE OF fileperms(), SEE system_file_active_attributes_profile
                                // IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                                $perms = fileperms($tmp_resource_path);

                                //
                                // SOURCE :: https://www.php.net/manual/en/function.fileperms.php
                                // AUTHOR :: coolmic at example dot com :: https://www.php.net/manual/en/function.fileperms.php#113060
                                self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['PERMISSIONS_OCTAL'] = decoct($perms & 0777);

                            }

                            if($tmp_active_file_attributes_ARRAY['TOTAL_FILESIZE'] == 1){

                                $tmp_results_total_filesize += self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['FILESIZE'];

                            }

                        }

                        $is_dir_status_array[] = 0;

                    break;

                }

            }

        }

        if($tmp_active_file_attributes_ARRAY['TOTAL_FILESIZE'] == 1){

            self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial]['TOTAL_FILESIZE'][] = $tmp_results_total_filesize;

        }

    }

    //
    // SOURCE :: https://www.php.net/manual/en/function.fileperms.php
    private function return_full_permissions($perms){

        //$perms = fileperms('/etc/passwd');

        switch($perms & 0xF000){
            case 0xC000: // socket

                $info = 's';

            break;
            case 0xA000: // symbolic link

                $info = 'l';

            break;
            case 0x8000: // regular

                $info = 'r';

            break;
            case 0x6000: // block special

                $info = 'b';

            break;
            case 0x4000: // directory

                $info = 'd';

            break;
            case 0x2000: // character special

                $info = 'c';

            break;
            case 0x1000: // FIFO pipe

                $info = 'p';
            break;
            default: // unknown

                $info = 'u';

        }

        // Owner
        $info .= (($perms & 0x0100) ? 'r' : '-');
        $info .= (($perms & 0x0080) ? 'w' : '-');
        $info .= (($perms & 0x0040) ?
            (($perms & 0x0800) ? 's' : 'x' ) :
            (($perms & 0x0800) ? 'S' : '-'));

        // Group
        $info .= (($perms & 0x0020) ? 'r' : '-');
        $info .= (($perms & 0x0010) ? 'w' : '-');
        $info .= (($perms & 0x0008) ?
            (($perms & 0x0400) ? 's' : 'x' ) :
            (($perms & 0x0400) ? 'S' : '-'));

        // World
        $info .= (($perms & 0x0004) ? 'r' : '-');
        $info .= (($perms & 0x0002) ? 'w' : '-');
        $info .= (($perms & 0x0001) ?
            (($perms & 0x0200) ? 't' : 'x' ) :
            (($perms & 0x0200) ? 'T' : '-'));

        return $info;

    }

    public function max_disk_storage_utilization(){

        return self::$max_disk_storage_utilization;

    }

    public function max_disk_storage_utilization_warning(){

        return self::$max_disk_storage_utilization_warning;

    }

    public function fwrite($file_data, $file_path, $file_permissions, $length_override = NULL, $stream_override = NULL, $job_title = NULL, $job_description = NULL, $channel = CRNRSTN_CHANNEL_RUNTIME){

        //
        // WRAPPER FOR PHP NATIVE fwrite().
        // TO CHANGE THE DEFAULT (I.E. 0777) PERMISSION SETTINGS FOR NEW DIRECTORIES, PLEASE
        // SEE permissions_chmod IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
        // ALSO PLEASE NOTE THAT THE DISK MANAGEMENT CONFIGURATION PARAMETERS max_disk_storage_utilization
        // AND max_disk_storage_utilization_warning WILL BE HONORED; SEE _crnrstn.system_settings.inc.php.
        //
        // Sunday, September 17, 2023 @ 0751 hrs.
        return $this->oCRNRSTN_ASSET_MGR->fwrite($file_data, $file_path, $file_permissions, $length_override, $stream_override, $job_title, $job_description, $channel);

    }

    public function mkdir($directory, $permissions_override = NULL, $recursive_perms_override = true, $context = NULL, $channel = CRNRSTN_CHANNEL_RUNTIME){

        //
        // WRAPPER FOR PHP NATIVE mkdir().
        // TO CHANGE THE DEFAULT (I.E. 0777) PERMISSION SETTINGS FOR NEW DIRECTORIES, PLEASE...
        // SEE permissions_chmod IN _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
        // ALSO PLEASE NOTE THAT THE DISK MANAGEMENT CONFIGURATION PARAMETERS max_disk_storage_utilization
        // AND max_disk_storage_utilization_warning WILL BE HONORED; SEE _crnrstn.system_settings.inc.php.
        //
        // Sunday, September 17, 2023 @ 0750 hrs.
        return $this->oCRNRSTN_ASSET_MGR->mkdir($directory, $permissions_override, $recursive_perms_override, $context);

    }

    public function scandir($directory, $sorting_order = SCANDIR_SORT_ASCENDING, $context = NULL, $secondary_asort = SORT_STRING, $descending_arsort = false, $channel = CRNRSTN_CHANNEL_RUNTIME){

        //
        // WRAPPER FOR PHP NATIVE scandir().
        return $this->oCRNRSTN_ASSET_MGR->better_scandir($directory, $sorting_order, $context, $secondary_asort, $descending_arsort, $channel);

    }

    public function spool_destruct_output($str){

        $this->destruct_output .= $str;

    }

    /**
     * TAKEN FROM /_crnrstn/class/thirdparty/nusoap/class.nusoap_base.php [lnum 872]
     * Returns a string with the output of var_dump
     *
     * @param mixed $data The variable to var_dump
     * @return string The output of var_dump
     * @access public
     */
    public function var_dump($data, $string_output = true){

        if($string_output){

            ob_start();
            var_dump($data);
            $ret_val = ob_get_contents();
            ob_end_clean();

            return $this->print_r_str_skinny($ret_val, NULL, NULL, NULL, NULL, NULL);

        }

        var_dump($data);

        return NULL;

    }

    private function output_agg_destruct_str(){

        if($this->destruct_output != ''){

            //
            // GET DEFAULT THEME PROFILE.
            $theme_profile = $this->return_interact_ui_theme_profile();

            $this->oLog_output_ARRAY[] = $this->error_log('Process ' . __CLASS__ . '::__destruct initiated output of error log trace data.', __LINE__, __METHOD__, __FILE__, CRNRSTN_BARNEY);
            //error_log(__LINE__ . ' Process ' . __CLASS__ . '::__destruct initiated output of error log trace data.');
            //$this->print_r($this->destruct_output, 'C<span style="color:#F90000;">R</span>NRSTN Debug Mode 2 :: Error Log Trace Debug Output ::', $style_theme, __LINE__, __METHOD__, __FILE__);
            //print_r('<div style="height:10px; width:100%; clear:both; display: block; overflow: hidden;">&nbsp;</div>');
            print_r($this->destruct_output);

        }

    }

    public function set_session_resource($data_key, $data_value){

        return self::$oSESSION_MGR->set_session_resource($data_key, $data_value);

    }

    public function get_session_resource($data_key){

        return self::$oSESSION_MGR->get_session_resource($data_key);

    }

    public function isset_session_resource($data_key){

        return self::$oSESSION_MGR->isset_session_resource($data_key);

    }

    public function cache_usage_report(){

        //
        // TTL, MAX BYTES, IS_ACTIVE
        // CRNRSTN :: RRS MAP SYSTEM DEFAULTS ARE HERE: /_crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php
        $tmp_str_out = '';
        $tmp_runtime_bytes_ARRAY = $this->rrs_map_total_cache_bytes(CRNRSTN_CHANNEL_RUNTIME);

        $tmp_str_out .= '<div style="padding: 20px 10px 0 10px; color: #333; font-family: Courier New, Courier, monospace; font-size: 17px; font-weight: bold;">SERVER RRS MAP CACHE DATA</div>';
        $tmp_str_out .= '<div style="padding: 0 10px 0 10px; color: #333; font-family: Courier New, Courier, monospace; font-size: 13px; font-weight: normal;">C<span class="the_R_in_crnrstn">R</span>NRSTN :: RESPONSE RETURN SERIALIZATION MAP CACHE</div>';

        $tmp_status_ACTIVE = '<span style="color: #05c729; font-weight: bold;">ACTIVE</span>';
        $tmp_status_OFF = '<span style="color: #F90000; font-weight: bold;">OFF</span>';

        //
        // TODO :: I BELIEVE
        // THIS ARRAY SHOULD BE ONLY ACTIVE CHANNELS AND
        // SORTED IN CRNRSTN :: DECOUPLED DATA OBJECT (MC-DDO)
        // TRANSLATION SEQUENCE...THE GIST.
        //
        // CRNRSTN :: MULTI-CHANNEL DECOUPLED DATA
        // OBJECT (MC-DDO) SERVICES LAYER.
        // # # C # R # N # R # S # T # N # : : # # # #
        $tmp_cache_channel_ARRAY = $this->get_channel_config(NULL, 'cache_master_channels');

        //
        // PLEASE SEE,
        //  $oCRNRSTN->set_channel_config($channel_constant, $attribute_name, $data);
        //  $oCRNRSTN->get_channel_config($channel, $index_0 = NULL, $index_1 = NULL, $index_2 = NULL, $index_3 = NULL);
        //  $oCRNRSTN->isset_channel_config($channel_constant, $attribute_name, $return_type = CRNRSTN_BOOLEAN);
        //  $oCRNRSTN->is_channel_active($channel_constant, $return_type = CRNRSTN_BOOLEAN);

        /*
        //
        // MEMORY PERFORMANCE REPORTS.
        -----
        SYSTEM/SCRIPT COMBINED CURRENT REPORT - Both system and script memory allocations. Real-time metrics.
        $mem_report_queue[] = 0;
        MEM USAGE: 2 MiB total. 410.625 KiB by CRNRSTN ::

        COMPLETE CPU LOAD REPORT - Current System processor load and with averages taken over 1, 5, and 15 min.
        $mem_report_queue[] = 1;
        CPU LOAD: [0.1%, 0.1%, 0.1%] average in the last [1, 5, 15min] respectively.

        SYSTEM/SCRIPT (COMBINED) CURRENT DELTA FROM BOOT REPORT - The DELTAS (from BOOT) of both system and script memory allocations.
        $mem_report_queue[] = 2:
        MEM USAGE DELTA (+/- FROM PHP BOOT): +1.67 MiB total. +210.625 KiB by CRNRSTN ::

        COMPLETE PROCESSOR LOAD DELTA FROM BOOT REPORT - Current system processor load DELTA (from BOOT) and with DELTAS of load averages taken over 1, 5, and 15min respectively.
        $mem_report_queue[] = 3:
        CPU LOAD (+/- FROM PHP BOOT): [+0.1%, +0.1%, +0.1%] average processor load in the last [1, 5, 15min] respectively.

        SYSTEM DELTA FROM BOOT REPORT - The DELTA (from BOOT) of system memory usage.
        $mem_report_queue[] = 4:
        MEM USAGE (+/- FROM PHP BOOT): +1.67 MiB.

        SCRIPT DELTA FROM BOOT REPORT - The DELTA (from BOOT) of script memory allocation.
        $mem_report_queue[] = 5:
        CRNRSTN :: MEM USAGE (+/- FROM PHP BOOT): +1.67 MiB.

        SYSTEM DELTA FROM BOOT REPORT - The DELTA of current system memory usage from CRNRSTN :: BOOT.
        $mem_report_queue[] = 6:
        MEM USAGE DELTA (+/- FROM CRNRSTN :: BOOT): +1.67 MiB.

        SCRIPT DELTA FROM BOOT REPORT - The DELTA (from CRNRSTN :: BOOT) of script memory allocation vs. a memory performance snapshot of the same from CRNRSTN :: BOOT.
        $mem_report_queue[] = 7:
        CRNRSTN :: MEM USAGE (+/- FROM CRNRSTN :: BOOT): +1.67 MiB.

        FULL MEMORY BOOT STATE REPORT - The BOOT memory performance snapshot of system, script, and XDEBUG (script) memory allocations which was taken at the start of userland in PHP.
        $mem_report_queue[] = 8:
        BOOT MEM: PHP [2 MiB]. CRNRSTN :: [410.5625 KiB]. XDEBUG [410.625 KiB].

        CRNRSTN :: BOOT STATE REPORT - The BOOT memory performance snapshot of CRNRSTN :: which was taken at the start of CRNRSTN :: _construct().
        $mem_report_queue[] = 9;
        BOOT MEM USAGE: CRNRSTN :: [410.5625 KiB]. XDEBUG_CRNRSTN [410.625 KiB].

        CURRENT FULL MEMORY REPORT - System, script and XDEBUG (script) memory usage.
        $mem_report_queue[] = 10;
        MEM USAGE: PHP [2 MiB]. CRNRSTN :: [410.5625 KiB]. XDEBUG_CRNRSTN [410.625 KiB].

        */
        //
        // SHOW A LITTLE CACHE USAGE REPORT.
        foreach($tmp_cache_channel_ARRAY as $channel => $ch_alpha){

            $tmp_status = $tmp_status_OFF;
            if($this->get_channel_config($channel, 'cache_is_active') == true){

                //
                // PLEASE SEE,
                //  $oCRNRSTN->set_channel_config($channel_constant, $attribute_name, $data);
                //  $oCRNRSTN->get_channel_config($channel, $index_0 = NULL, $index_1 = NULL, $index_2 = NULL, $index_3 = NULL);
                //  $oCRNRSTN->isset_channel_config($channel_constant, $attribute_name, $return_type = CRNRSTN_BOOLEAN);
                //  $oCRNRSTN->is_channel_active($channel_constant, $return_type = CRNRSTN_BOOLEAN);
                $tmp_status = $tmp_status_ACTIVE;

            }

            $tmp_session_bytes_ARRAY = $this->rrs_map_total_cache_bytes($channel);

            $tmp_str_out .= '<div style="padding: 10px 0 0 10px; color: #666; font-family: Courier New, Courier, monospace; font-size: 11px; font-weight: bold;">
    ' . strtoupper($channel) . ' RRS MAP Cache:<br>
    </div>';
            $tmp_str_out .= '<div style="padding: 0 0 0 10px; color: #333; font-family: Courier New, Courier, monospace; font-size: 10px; font-weight: normal;">
    Current: ' . $this->format_bytes($tmp_session_bytes_ARRAY) . '<br>
    Maximum: ' . $this->format_bytes($this->get_channel_config($channel, 'max_map_cache_bytes')) . '<br>
    TTL: ' . $this->get_channel_config($channel, 'map_cache_ttl') . ' seconds<br>
    STATUS: ' . $tmp_status . '
    </div>';

        }

        $tmp_str_out .= '<div style="padding: 10px 0 0 10px; color: #666; font-family: Courier New, Courier, monospace; font-size: 11px; font-weight: bold;">
    Memory Performance Report:<br>
    </div>';

        $tmp_str_out .= '<div style="padding: 0 0 0 10px; color: #333; font-family: Courier New, Courier, monospace; font-size: 10px; font-weight: normal;">';

        $mem_report_queue = $this->get_resource('mem_rpt_cache_usage_report', 0, 'CRNRSTN::RESOURCE::REPORTING');
        $mem_reports_ARRAY = $this->mem_report($mem_report_queue, 'HTML');

        $tmp_mem_str = '';
        foreach($mem_reports_ARRAY as $mem_index => $rpt_HTML){

            $tmp_mem_str .= $rpt_HTML . '<br>';

        }

        $tmp_mem_str = $this->strrtrim($tmp_mem_str, '<br>');

        $tmp_str_out .= $tmp_mem_str . '    </div>';

        return $tmp_str_out;

    }

    public function rrs_map_total_cache_bytes($channel = NULL){

        return self::$oCRNRSTN_RRS_MAP->rrs_map_total_cache_bytes($channel);

    }

//    public function rrs_map_cache_sync_is_active(){
//
//        return self::$oCRNRSTN_RRS_MAP->rrs_map_cache_sync_is_active();
//
//    }

    public function return_cache_data($channel = NULL){

        if(isset($channel)){

            $cache_ARRAY = array();

            switch($channel){
                case CRNRSTN_CHANNEL_RUNTIME:

                    if(self::$oCRNRSTN_RRS_MAP->get_channel_config($channel, 'cache_is_active') == true){

                        //
                        // PLEASE SEE,
                        //  $oCRNRSTN->set_channel_config($channel_constant, $attribute_name, $data);
                        //  $oCRNRSTN->get_channel_config($channel, $index_0 = NULL, $index_1 = NULL, $index_2 = NULL, $index_3 = NULL);
                        //  $oCRNRSTN->isset_channel_config($channel_constant, $attribute_name, $return_type = CRNRSTN_BOOLEAN);
                        //  $oCRNRSTN->is_channel_active($channel_constant, $return_type = CRNRSTN_BOOLEAN);
                        //
                        // EXTRACT RRS MAP DATA.
                        $cache_ARRAY = self::$oCRNRSTN_RRS_MAP->return_cache_data($channel);

                    }else{

                        error_log(__LINE__ . ' crnrstn NO CACHE DATA AUTHORIZED TO RETURN FROM $channel[' . $channel . '] ' . $this->get_channel_config($channel, 'NAME') . '.');

                    }

                break;
                case CRNRSTN_CHANNEL_SESSION:
                    // SILENCE IS GOLDEN.
                case CRNRSTN_CHANNEL_COOKIE:
                case CRNRSTN_CHANNEL_DATABASE:
                case CRNRSTN_CHANNEL_SSDTLA:
                case CRNRSTN_CHANNEL_GET:
                case CRNRSTN_CHANNEL_POST:
                case CRNRSTN_CHANNEL_PSSDTLA:
                case CRNRSTN_CHANNEL_SOAP:
                case CRNRSTN_CHANNEL_FILE:
                    // IMPLEMENTATION PENDING. Tuesday, April 4, 2023 @ 2046 hrs
                    error_log(__LINE__ . ' ' . __METHOD__ . ' (' . $channel . ') ' . $this->get_channel_config($channel, 'NAME') . ' CHANNEL IS LOOKING TO RETURN CACHE.');

                break;
                default:

                    error_log(__LINE__ . ' crnrstn UNKNOWN CHANNEL AUTHORIZATION INTEGER RECEIVED $channel[' . $channel . ']' . $this->get_channel_config($channel, 'NAME') . '.');

                break;

            }

            return $cache_ARRAY;

        }

        $cache_ARRAY = array();
        $tmp_channel_ARRAY = self::$oCRNRSTN_RRS_MAP->return_cache_channels();

        foreach($tmp_channel_ARRAY as $index => $channel){

            switch($channel){
                case CRNRSTN_CHANNEL_SESSION:
                    // SILENCE IS GOLDEN.
                break;
                case CRNRSTN_CHANNEL_RUNTIME:

                    //if(self::$oCRNRSTN_RRS_MAP->xxxxxxxxx($channel . '_cache_is_active')){

                    //
                    // EXTRACT RRS MAP DATA.
                    $cache_ARRAY = self::$oCRNRSTN_RRS_MAP->return_cache_data($channel);

                    //
                    // PLEASE SEE,
                    //  $oCRNRSTN->set_channel_config($channel_constant, $attribute_name, $data);
                    //  $oCRNRSTN->get_channel_config($channel, $index_0 = NULL, $index_1 = NULL, $index_2 = NULL, $index_3 = NULL);
                    //  $oCRNRSTN->isset_channel_config($channel_constant, $attribute_name, $return_type = CRNRSTN_BOOLEAN);
                    //  $oCRNRSTN->is_channel_active($channel_constant, $return_type = CRNRSTN_BOOLEAN);
                    //}

                break;
                case CRNRSTN_CHANNEL_COOKIE:
                case CRNRSTN_CHANNEL_DATABASE:
                case CRNRSTN_CHANNEL_SSDTLA:
                case CRNRSTN_CHANNEL_GET:
                case CRNRSTN_CHANNEL_POST:
                case CRNRSTN_CHANNEL_PSSDTLA:
                case CRNRSTN_CHANNEL_SOAP:
                    // IMPLEMENTATION PENDING. Tuesday, April 4, 2023 @ 2046 hrs
                //break;
                default:

                    error_log(__LINE__ . ' crnrstn UNKNOWN CHANNEL AUTHORIZATION INTEGER RECEIVED $channel[' . $channel . ']' . $this->get_channel_config($channel, 'NAME') . '.');

                break;

            }

        }

        return $cache_ARRAY;

    }

    public function deactivate_destruct_rrs_map_sync(){

        self::$oCRNRSTN_RRS_MAP->deactivate_destruct_rrs_map_sync();

    }

//    public function cache_rrs_map_meta($attribute){
//
//        self::$oCRNRSTN_RRS_MAP->cache_rrs_map_meta($attribute);
//
//    }

    public function ini_cache_rrs_map_meta($attribute, $ugc_value, $value = ''){

        self::$oCRNRSTN_RRS_MAP->ini_cache_rrs_map_meta($attribute, $ugc_value, $value);

    }

    public function plaid($channel, $salt_ugc_override = NULL, $output_mode = NULL){

        //
        // TODO :: ADD METHOD CALL SUPPORT USING $salt_ugc_override AND $output_mode.
        // NOTE: SYSTEM SETTINGS INITIALIZATION CALLS THIS AFTER BROWSER RESPONSE OPTIONS.

        //
        // CRNRSTN :: PLAID.
        $CRNRSTN_PLAID_RESPONSE_RETURN = self::$oCRNRSTN_RRS_MAP->plaid($channel, $salt_ugc_override, $output_mode);
        if(strlen($CRNRSTN_PLAID_RESPONSE_RETURN) > 0){

            echo $CRNRSTN_PLAID_RESPONSE_RETURN;

            if(ob_get_level() > 0){ob_flush();}
            flush();
            exit();

        }

    }

    /*
    case CRNRSTN_CHANNEL_RUNTIME
    case CRNRSTN_CHANNEL_SESSION
    case CRNRSTN_CHANNEL_DATABASE
    case CRNRSTN_CHANNEL_COOKIE
    case CRNRSTN_CHANNEL_PSSDTLA
    case CRNRSTN_CHANNEL_SSDTLA

    CRNRSTN_CHANNEL_RUNTIME
    CRNRSTN_CHANNEL_ALL
    CRNRSTN_CHANNEL_DATABASE
    CRNRSTN_CHANNEL_SSDTLA
    CRNRSTN_CHANNEL_PSSDTLA
    CRNRSTN_CHANNEL_SESSION
    CRNRSTN_CHANNEL_COOKIE
    CRNRSTN_CHANNEL_SOAP
    CRNRSTN_CHANNEL_GET
    CRNRSTN_AUTHORIZE_ISUSERNAME
    CRNRSTN_AUTHORIZE_ISEMAIL
    CRNRSTN_AUTHORIZE_ISPASSWORD
    -----
    Monday, May 22, 2023 @ 0312 hrs
    CRNRSTN_AUTHORIZE_
    CRNRSTN_AUTHORIZE_ISMOBILENUMBER
    CRNRSTN_AUTHORIZE_ISPERSONAL_IDENTIFY
    CRNRSTN_AUTHORIZE_ISHIPPA

    */

    public function channel_access_is_authorized($channel, $data_authorization_profile){

        return self::$oCRNRSTN_CONFIG_MGR->channel_access_is_authorized($channel, $data_authorization_profile);

    }

    public function cache_storage_report($is_HTML = false){

        //
        // THE POSSIBILITIES:
        //      $tmp_content_type = 'HTML'
        //      $tmp_content_type = 'TEXT'
        //
        // SEE, $this->tidy_boolean($is_HTML, CRNRSTN_STRING, CRNRSTN_IS_HTML);
        // switch($tmp_content_type){
        //     case 'TEXT':
        //         //TEXT OUTPUT FORMAT.

        //     break;
        //     default:
        //         //case 'HTML':
        //         //HTML OUTPUT FORMAT.

        //     break;

        // }

        $tmp_str_out = '';

        if(isset($_SESSION['CRNRSTN_' . self::$config_serial])){

            //
            // ALL SESSION DATA.
            $tmp_str_out .= 'START_SESSION::' . print_r($_SESSION['CRNRSTN_' . self::$config_serial], true);

        }else{

            $tmp_str_out .= 'START_SESSION::' . print_r($_SESSION, true);

        }

        //
        // ALL RUNTIME DATA.
        //$tmp_str_out .= 'START_RUNTIME::' . print_r(self::$oCRNRSTN_RRS_MAP->cache_ARRAY, true);

        return $tmp_str_out;

    }

    private function return_int_arithmetic_sign($value){

        //
        // THIS METHOD EVALUATES RAW PHP NATIVE AND XDEBUG METHOD OUTPUT. DO YOU EVEN XDEBUG, BRO?
        // BUYER BEWARE OF THE INCOMING VALUE.
        if(is_bool($value) || is_null($value) || ($value == '')){

            // OOPS! FAIL QUIETLY.
            return '';

        }

        //
        // IS THERE A FASTER WAY TO REMOVE "+" FOR "ZERO"? AS THIS IS FOR REPORTING, YOU DON'T WANT "+" WHEN DELTA=0.
        if($value == '0.00' || $value == '0.0' || $value == '0' || $value == 0 || $value == 0.0 || $value == 0.00 ){

            return '';

        }

        if((double) $value > -1){

            return '+';

        }

        return '-';

    }

    private function mem_report_compile($mem_report_queue, $return_data_type, $php_logo_height, $to_plaid, $is_HTML, $report_delimiter_TEXT, $report_delimiter_HTML){

        $tmp_data_out_ARRAY = array();
        $tmp_content_type = $this->tidy_boolean($is_HTML, CRNRSTN_STRING, CRNRSTN_IS_HTML);

        //
        // CAPTURE SERVER PERFORMANCE SNAPSHOTS.
        // NOTE: memory_performance() stores RAW report data () for DELTA comparisons. This has a 'history' report mode.
        // NOTE: memory_performance() supports custom DELTA performance reports using a previous lookup_key as the historical snapshot "delta_key."
        $tmp_mem_start_ARRAY = $this->memory_performance('CRNRSTN_MEMORY_REPORT', 'start');
        $tmp_mem_delta_zero_output_ARRAY = $this->memory_performance('CRNRSTN_MEMORY_REPORT', 'delta');
        $tmp_mem_delta_construct_output_ARRAY = $this->memory_performance('CRNRSTN_MEMORY_REPORT', 'delta', 'CRNRSTN_CONSTRUCTOR');
        $tmp_mem_curr_output_ARRAY = $this->memory_performance('CRNRSTN_MEMORY_REPORT');
        $tmp_cnt = count($mem_report_queue);

        //
        // THE POSSIBILITIES:
        //      $tmp_content_type = 'HTML'
        //      $tmp_content_type = 'TEXT'
        //
        // SEE, $oCRNRSTN->tidy_boolean($is_HTML, CRNRSTN_STRING, CRNRSTN_IS_HTML);
        switch($tmp_content_type){
            case 'TEXT':

                $tmp_php_logo_html = '';
                $tmp_crnrstn_logo_html = '';
                $tmp_apache_logo_html = '';

            break;
            default:
                //case 'HTML':

                /*
                CRNRSTN_LOGO
                CRNRSTN_R_MD
                R_STONE_PILLAR
                APACHE_FEATHER
                APACHE_POWER_VERSION <-- ALL IMAGE ROTATION IS BROKEN.

                */

                $tmp_php_logo_html = $this->return_system_image('PHP_ELLIPSE', '', $php_logo_height, NULL, NULL, NULL, NULL, CRNRSTN_HTML);
                $tmp_crnrstn_logo_html = $this->return_system_image('CRNRSTN_LOGO', '', $php_logo_height, NULL, NULL, NULL, NULL, CRNRSTN_HTML);
                $tmp_apache_logo_html = $this->return_system_image('APACHE_POWER', '', $php_logo_height, NULL, NULL, NULL, NULL, CRNRSTN_HTML);

            break;

        }

        //
        // BUILD REPORT.
        foreach($mem_report_queue as $index => $report_id){

            switch($report_id){
                case 0:
                    // SYSTEM/SCRIPT COMBINED CURRENT REPORT - Both system and script memory allocations. Real-time metrics.
                    /*
                    MEM USAGE: 2 MiB total. 410.625 KiB by CRNRSTN ::

                    */

                    $tmp_space = '';

                    //
                    // CURRENT PERFORMANCE DATA.
                    $mem_PHP = $this->format_bytes($tmp_mem_curr_output_ARRAY['memory_get_real_usage']);
                    $mem_CRNRSTN = $this->format_bytes($tmp_mem_curr_output_ARRAY['memory_get_script_usage']);

                    $mem_descript[CRNRSTN_INTEGER] = 0;
                    $mem_descript[CRNRSTN_STRING] = '0';
                    //$mem_descript['TITLE']['HTML']['MODULE_OPEN'] = '<!--' . $this->html_version_burn('HTML META MODULE', 'END') . '-->';
                    $mem_descript['TITLE']['HTML'] = 'SYSTEM/SCRIPT COMBINED CURRENT REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'SYSTEM/SCRIPT COMBINED CURRENT REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'Both system and script memory allocations. Real-time metrics.';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'Both system and script memory allocations. Real-time metrics.';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    // - DIRECT INJECTION TO SESSION CACHE FOR REAL-TIME ASSET RETURN PERFORMANCE
                    //   REPORTING. THIS SHOULD BE ASSOCIATED WITH ADMIN AUTH SESSION. CONFIGURATION SETTINGS
                    //   CAN BE FOUND AT: _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                    // - DIRECT EXPOSURE TO CRNRSTN :: INTERACT UI VIA THE CRNRSTN :: SOAP SERVICES
                    //   DATA TUNNEL LAYER ARCHITECTURE (XML, JAVASCRIPT).
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['php'][] = $mem_PHP;
                        $tmp_data_out_ARRAY['crnrstn'][] = $mem_CRNRSTN;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    //
                    // TEXT OUTPUT FORMAT.
                    if($is_HTML == false){

                        //                                   MEM USAGE: 2 MiB total. 410.625 KiB by CRNRSTN ::
                        $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE: ' . $mem_PHP . ' total. ' . $mem_CRNRSTN . ' by CRNRSTN ::';

                        break;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    //                                   MEM USAGE: 2 MiB <img> 410.625 KiB <img> by CRNRSTN ::
                    $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE: ' .  $mem_PHP . ' ' . $tmp_php_logo_html . '&nbsp;&nbsp;' .  $mem_CRNRSTN . '&nbsp;' . $tmp_crnrstn_logo_html;

                break;
                case 1:
                    // COMPLETE CPU LOAD REPORT - Current System processor load and with averages taken over 1, 5, and 15 min.
                    /*
                    CPU LOAD: [0.1%, 0.1%, 0.1%] average in the last [1, 5, 15min] respectively.

                    */

                    $tmp_space = '';

                    //
                    // CURRENT CPU LOAD.
                    $cpu_ARRAY = $tmp_mem_curr_output_ARRAY['sys_getloadavg'];

                    $mem_descript['TITLE']['HTML'] = 'COMPLETE CPU LOAD REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'COMPLETE CPU LOAD REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'Current System processor load and with averages taken over 1, 5, and 15 min.';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'Current System processor load and with averages taken over 1, 5, and 15 min.';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    // - DIRECT INJECTION TO SESSION CACHE FOR REAL-TIME ASSET RETURN PERFORMANCE
                    //   REPORTING. THIS SHOULD BE ASSOCIATED WITH ADMIN AUTH SESSION. CONFIGURATION SETTINGS
                    //   CAN BE FOUND AT: _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                    // - DIRECT EXPOSURE TO CRNRSTN :: INTERACT UI VIA THE CRNRSTN :: SOAP SERVICES
                    //   DATA TUNNEL LAYER ARCHITECTURE (XML, JAVASCRIPT).
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['cpu'][] = $cpu_ARRAY;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    //
                    // TEXT OUTPUT FORMAT.
                    if($is_HTML == false){

                        $tmp_rpt_cnt = count($cpu_ARRAY);

                        //                           CPU LOAD: [0.1%, 0.1%, 0.1%] average in the last [1, 5, 15min] respectively.
                        $tmp_str_out = $tmp_space . 'CPU LOAD: [';
                        foreach($cpu_ARRAY as $rpt_index => $proc_load){

                            if($rpt_index > 0){

                                $tmp_space = ', ';

                            }else{

                                if($rpt_index >= ($tmp_rpt_cnt - 1)){

                                    $tmp_space = '';

                                }

                            }

                            //$tmp_arith_sign_proc = $this->return_int_arithmetic_sign($proc_load);

                            switch($rpt_index){
                                case 0:

                                    //$tmp_str_out .=  $tmp_arith_sign_proc . $proc_load . '%';
                                    $tmp_str_out .=  $proc_load . '%';

                                break;
                                case 1:
                                case 2:

                                    //$tmp_str_out .= $tmp_space . $tmp_arith_sign_proc . $proc_load . '%';
                                    $tmp_str_out .= $tmp_space . $proc_load . '%';

                                break;

                            }

                        }

                        // CPU LOAD: [0.1%, 0.1%, 0.1%] average in the last [1, 5, 15min] respectively.
                        $tmp_str_out .= '] average in the last [1, 5, 15min] respectively.';
                        $tmp_data_out_ARRAY[] = $tmp_str_out;

                        break;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    $tmp_rpt_cnt = count($cpu_ARRAY);
                    //                           CPU LOAD: <img>[0.1%, 0.1%, 0.1%] average in the last [1, 5, 15min] respectively.
                    $tmp_str_out = $tmp_space . 'CPU LOAD: ' .  $tmp_apache_logo_html . '[';
                    foreach($cpu_ARRAY as $rpt_index => $proc_load){

                        if($rpt_index > 0){

                            $tmp_space = ', ';

                        }else{

                            if($rpt_index >= ($tmp_rpt_cnt - 1)){

                                $tmp_space = '';

                            }

                        }

                        //$tmp_arith_sign_proc = $this->return_int_arithmetic_sign($proc_load);

                        switch($rpt_index){
                            case 0:

                                //$tmp_str_out .=  $tmp_arith_sign_proc . $proc_load . '%';
                                $tmp_str_out .= $proc_load . '%';

                            break;
                            case 1:
                            case 2:

                                //$tmp_str_out .= $tmp_space . $tmp_arith_sign_proc . $proc_load . '%';
                                $tmp_str_out .= $tmp_space . $proc_load . '%';

                            break;

                        }

                    }

                    // CPU LOAD: [0.1%, 0.1%, 0.1%] average in the last [1, 5, 15min] respectively.
                    $tmp_str_out .= '] average in the last [1, 5, 15min] respectively.';  //. $tmp_apache_logo_html;
                    $tmp_data_out_ARRAY[] = $tmp_str_out;

                break;
                case 2:
                    // SYSTEM/SCRIPT (COMBINED) CURRENT DELTA FROM BOOT REPORT - The DELTAS (from BOOT) of both system and script memory allocations.
                    /*
                    MEM USAGE DELTA (+/- FROM PHP BOOT): +1.67 MiB total. +210.625 KiB by CRNRSTN ::

                    */

                    $tmp_space = '';

                    //
                    // DELTA FROM PHP BOOT.
                    $mem_PHP_DELTA_PHP_BOOT = $this->format_bytes($tmp_mem_delta_zero_output_ARRAY['delta_memory_get_real_usage']);
                    $mem_CRNRSTN_DELTA_PHP_BOOT = $this->format_bytes($tmp_mem_delta_zero_output_ARRAY['delta_memory_get_script_usage']);
                    $tmp_arith_sign_PHP = $this->return_int_arithmetic_sign($tmp_mem_delta_zero_output_ARRAY['delta_memory_get_real_usage']);
                    $tmp_arith_sign_CRNRSTN = $this->return_int_arithmetic_sign($tmp_mem_delta_zero_output_ARRAY['delta_memory_get_script_usage']);

                    $mem_descript['TITLE']['HTML'] = 'SYSTEM/SCRIPT (COMBINED) CURRENT DELTA FROM BOOT REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'SYSTEM/SCRIPT (COMBINED) CURRENT DELTA FROM BOOT REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'The DELTAS (from BOOT) of both system and script memory allocations.';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'The DELTAS (from BOOT) of both system and script memory allocations.';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    // - DIRECT INJECTION TO SESSION CACHE FOR REAL-TIME ASSET RETURN PERFORMANCE
                    //   REPORTING. THIS SHOULD BE ASSOCIATED WITH ADMIN AUTH SESSION. CONFIGURATION SETTINGS
                    //   CAN BE FOUND AT: _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                    // - DIRECT EXPOSURE TO CRNRSTN :: INTERACT UI VIA THE CRNRSTN :: SOAP SERVICES
                    //   DATA TUNNEL LAYER ARCHITECTURE (XML, JAVASCRIPT).
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['php'][] = $tmp_arith_sign_PHP . $mem_PHP_DELTA_PHP_BOOT;
                        $tmp_data_out_ARRAY['crnrstn'][] = $tmp_arith_sign_CRNRSTN . $mem_CRNRSTN_DELTA_PHP_BOOT;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    //
                    // TEXT OUTPUT FORMAT.
                    if($is_HTML == false){

                        //                                    MEM USAGE DELTA (+/- FROM PHP BOOT): +1.67 MiB total. +210.625 KiB by CRNRSTN ::
                        $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE DELTA (+/- FROM PHP BOOT): ' . $tmp_arith_sign_PHP . $mem_PHP_DELTA_PHP_BOOT . ' total. ' . $tmp_arith_sign_CRNRSTN . $mem_CRNRSTN_DELTA_PHP_BOOT . ' by CRNRSTN ::';

                        break;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    //                                    MEM USAGE DELTA (+/- FROM PHP BOOT): +1.67 MiB total. +210.625 KiB by CRNRSTN ::
                    $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE DELTA (+/- FROM PHP BOOT): ' . $tmp_arith_sign_PHP . $mem_PHP_DELTA_PHP_BOOT . ' ' . $tmp_php_logo_html . '&nbsp;&nbsp;' . $tmp_arith_sign_CRNRSTN . $mem_CRNRSTN_DELTA_PHP_BOOT . ' '. $tmp_crnrstn_logo_html;

                break;
                case 3:
                    // COMPLETE PROCESSOR LOAD DELTA FROM BOOT REPORT - Current system processor load DELTA (from BOOT) and with DELTAS of load averages taken over 1, 5, and 15min respectively.
                    /*
                    CPU LOAD (+/- FROM PHP BOOT): [+0.1%, +0.1%, +0.1%] average processor load in the last [1, 5, 15min] respectively.

                    */

                    $tmp_space = '';

                    //
                    // CPU LOAD DELTAS FROM PHP BOOT.
                    $cpu_DELTA_BOOT_ARRAY = $tmp_mem_delta_zero_output_ARRAY['delta_sys_getloadavg'];

                    $mem_descript['TITLE']['HTML'] = 'COMPLETE PROCESSOR LOAD DELTA FROM BOOT REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'COMPLETE PROCESSOR LOAD DELTA FROM BOOT REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'Current system processor load DELTA (from BOOT) and with DELTAS of load averages taken over 1, 5, and 15min respectively.';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'Current system processor load DELTA (from BOOT) and with DELTAS of load averages taken over 1, 5, and 15min respectively.';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    // - DIRECT INJECTION TO SESSION CACHE FOR REAL-TIME ASSET RETURN PERFORMANCE
                    //   REPORTING. THIS SHOULD BE ASSOCIATED WITH ADMIN AUTH SESSION. CONFIGURATION SETTINGS
                    //   CAN BE FOUND AT: _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                    // - DIRECT EXPOSURE TO CRNRSTN :: INTERACT UI VIA THE CRNRSTN :: SOAP SERVICES
                    //   DATA TUNNEL LAYER ARCHITECTURE (XML, JAVASCRIPT).
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['cpu'][] = $cpu_DELTA_BOOT_ARRAY;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    //
                    // TEXT OUTPUT FORMAT.
                    if($is_HTML == false){

                        $tmp_rpt_cnt = count($cpu_DELTA_BOOT_ARRAY);

                        //                           CPU LOAD (+/- FROM PHP BOOT): [+0.1%, +0.1%, +0.1%] average processor load in the last [1, 5, 15min] respectively.
                        $tmp_str_out = $tmp_space . 'CPU LOAD (+/- FROM PHP BOOT): [';
                        foreach($cpu_DELTA_BOOT_ARRAY as $rpt_index => $proc_load){

                            if($rpt_index > 0){

                                $tmp_space = ', ';

                            }else{

                                if($rpt_index >= ($tmp_rpt_cnt - 1)){

                                    $tmp_space = '';

                                }

                            }

                            $tmp_arith_sign_proc = $this->return_int_arithmetic_sign($proc_load);

                            switch($rpt_index){
                                case 0:

                                    $tmp_str_out .= $proc_load . $tmp_arith_sign_proc . '%';

                                break;
                                case 1:
                                case 2:

                                    $tmp_str_out .= $tmp_space . $tmp_arith_sign_proc . $proc_load . '%';

                                break;

                            }

                        }

                        $tmp_str_out .= '] average processor load in the last [1, 5, 15min] respectively.';
                        $tmp_data_out_ARRAY[] = $tmp_str_out;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    $tmp_rpt_cnt = count($cpu_DELTA_BOOT_ARRAY);

                    //                           CPU LOAD (+/- FROM PHP BOOT): [+0.1%, +0.1%, +0.1%] average processor load in the last [1, 5, 15min] respectively.
                    $tmp_str_out = $tmp_space . 'CPU LOAD (+/- FROM PHP BOOT): ' . $tmp_apache_logo_html . '[';
                    foreach($cpu_DELTA_BOOT_ARRAY as $rpt_index => $proc_load){

                        if($rpt_index > 0){

                            $tmp_space = ', ';

                        }else{

                            if($rpt_index >= ($tmp_rpt_cnt - 1)){

                                $tmp_space = '';

                            }

                        }

                        $tmp_arith_sign_proc = $this->return_int_arithmetic_sign($proc_load);

                        switch($rpt_index){
                            case 0:

                                $tmp_str_out .= $proc_load . $tmp_arith_sign_proc . '%';

                            break;
                            case 1:
                            case 2:

                                $tmp_str_out .= $tmp_space . $tmp_arith_sign_proc . $proc_load . '%';

                            break;

                        }

                    }

                    $tmp_str_out .= '] average processor load in the last [1, 5, 15min] respectively.';
                    $tmp_data_out_ARRAY[] = $tmp_str_out;

                break;
                case 4:
                    // SYSTEM DELTA FROM BOOT REPORT - The DELTA (from BOOT) of system memory usage.
                    /*
                    MEM USAGE (+/- FROM PHP BOOT): +0.1%

                    */

                    $tmp_space = '';

                    //
                    // MEM DELTA FROM PHP BOOT. $mem_PHP_DELTA_CRNRSTN_BOOT
                    $mem_PHP_DELTA_PHP_BOOT = $this->format_bytes($tmp_mem_delta_zero_output_ARRAY['delta_memory_get_real_usage']);
                    $tmp_arith_sign_PHP = $this->return_int_arithmetic_sign($tmp_mem_delta_zero_output_ARRAY['delta_memory_get_real_usage']);

                    $mem_descript['TITLE']['HTML'] = 'SYSTEM DELTA FROM BOOT REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'SYSTEM DELTA FROM BOOT REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'The DELTA (from BOOT) of system memory usage.';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'The DELTA (from BOOT) of system memory usage.';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['php'][] = $tmp_arith_sign_PHP . $mem_PHP_DELTA_PHP_BOOT;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    //
                    // TEXT OUTPUT FORMAT.
                    if($is_HTML == false){

                        //                                    MEM USAGE (+/- FROM PHP BOOT): +1.67 MiB.
                        $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE (+/- FROM PHP BOOT): ' . $tmp_arith_sign_PHP . $mem_PHP_DELTA_PHP_BOOT . '.';

                        break;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    //                                    MEM USAGE (+/- FROM PHP BOOT): +1.67 MiB <img>
                    $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE (+/- FROM PHP BOOT): ' . $tmp_arith_sign_PHP . $mem_PHP_DELTA_PHP_BOOT . ' ' . $tmp_php_logo_html;

                break;
                case 5:
                    // SCRIPT DELTA FROM BOOT REPORT - The DELTA (from BOOT) of script memory allocation.
                    /*
                    CRNRSTN :: MEM USAGE (+/- FROM PHP BOOT): +1.67 MiB.

                    */

                    $tmp_space = '';

                    //
                    // CRNRSTN :: DELTA FROM BOOT.
                    $mem_CRNRSTN_PHP_BOOT = $this->format_bytes($tmp_mem_delta_zero_output_ARRAY['delta_memory_get_script_usage']);
                    $tmp_arith_sign_CRNRSTN = $this->return_int_arithmetic_sign($tmp_mem_delta_zero_output_ARRAY['delta_memory_get_script_usage']);

                    $mem_descript['TITLE']['HTML'] = 'SCRIPT DELTA FROM BOOT REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'SCRIPT DELTA FROM BOOT REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'The DELTA (from BOOT) of script memory allocation.';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'The DELTA (from BOOT) of script memory allocation.';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['php'][] = $tmp_arith_sign_CRNRSTN . $mem_CRNRSTN_PHP_BOOT;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    //
                    // TEXT OUTPUT FORMAT.
                    if($is_HTML == false){

                        //                                    CRNRSTN :: MEM USAGE (+/- FROM PHP BOOT): +1.67 MiB.
                        $tmp_data_out_ARRAY[] = $tmp_space . 'CRNRSTN :: MEM USAGE (+/- FROM PHP BOOT): ' . $tmp_arith_sign_CRNRSTN . $mem_CRNRSTN_PHP_BOOT . '.';

                        break;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    //                                    MEM USAGE (+/- FROM PHP BOOT): +1.67 MiB <img>
                    $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE (+/- FROM PHP BOOT): ' . $tmp_arith_sign_CRNRSTN . $mem_CRNRSTN_PHP_BOOT . ' ' . $tmp_crnrstn_logo_html;

                break;
                case 6:
                    // COMPLETE PROCESSOR LOAD DELTA FROM SCRIPT BOOT REPORT - Current system processor load DELTA (from CRNRSTN :: BOOT) and with DELTAS of load averages taken over 1, 5, and 15min respectively.
                    /*
                    CPU LOAD (+/- FROM CRNRSTN :: BOOT): [+0.1%, +0.1%, +0.1%] average processor load in the last [1, 5, 15min] respectively.

                    */

                    $tmp_space = '';

                    //
                    // CPU LOAD DELTAS FROM PHP BOOT.
                    $cpu_DELTA_CRNRSTN_BOOT_ARRAY = $tmp_mem_delta_construct_output_ARRAY['delta_sys_getloadavg'];

                    $mem_descript['TITLE']['HTML'] = 'COMPLETE PROCESSOR LOAD DELTA FROM SCRIPT BOOT REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'COMPLETE PROCESSOR LOAD DELTA FROM SCRIPT BOOT REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'Current system processor load DELTA (from CRNRSTN :: BOOT) and with DELTAS of load averages taken over 1, 5, and 15min respectively.';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'Current system processor load DELTA (from CRNRSTN :: BOOT) and with DELTAS of load averages taken over 1, 5, and 15min respectively.';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    // - DIRECT INJECTION TO SESSION CACHE FOR REAL-TIME ASSET RETURN PERFORMANCE
                    //   REPORTING. THIS SHOULD BE ASSOCIATED WITH ADMIN AUTH SESSION. CONFIGURATION SETTINGS
                    //   CAN BE FOUND AT: _crnrstn/_config/_config.defaults/_crnrstn.system_settings.inc.php.
                    // - DIRECT EXPOSURE TO CRNRSTN :: INTERACT UI VIA THE CRNRSTN :: SOAP SERVICES
                    //   DATA TUNNEL LAYER ARCHITECTURE (XML, JAVASCRIPT).
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['cpu'][] = $cpu_DELTA_CRNRSTN_BOOT_ARRAY;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    //
                    // TEXT OUTPUT FORMAT.
                    if($is_HTML == false){

                        $tmp_rpt_cnt = count($cpu_DELTA_CRNRSTN_BOOT_ARRAY);

                        //                           CPU LOAD (+/- FROM CRNRSTN :: BOOT): [+0.1%, +0.1%, +0.1%] average processor load in the last [1, 5, 15min] respectively.
                        $tmp_str_out = $tmp_space . 'CPU LOAD (+/- FROM CRNRSTN :: BOOT): [';
                        foreach($cpu_DELTA_CRNRSTN_BOOT_ARRAY as $rpt_index => $proc_load){

                            if($rpt_index > 0){

                                $tmp_space = ', ';

                            }else{

                                if($rpt_index >= ($tmp_rpt_cnt - 1)){

                                    $tmp_space = '';

                                }

                            }

                            $tmp_arith_sign_proc = $this->return_int_arithmetic_sign($proc_load);

                            switch($rpt_index){
                                case 0:

                                    $tmp_str_out .= $proc_load . $tmp_arith_sign_proc . '%';

                                break;
                                case 1:
                                case 2:

                                    $tmp_str_out .= $tmp_space . $tmp_arith_sign_proc . $proc_load . '%';

                                break;

                            }

                        }

                        $tmp_str_out .= '] average processor load in the last [1, 5, 15min] respectively.';
                        $tmp_data_out_ARRAY[] = $tmp_str_out;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    $tmp_rpt_cnt = count($cpu_DELTA_CRNRSTN_BOOT_ARRAY);

                    //                           CPU LOAD (+/- FROM CRNRSTN :: BOOT): [+0.1%, +0.1%, +0.1%] average processor load in the last [1, 5, 15min] respectively.
                    $tmp_str_out = $tmp_space . 'CPU LOAD (+/- FROM C<span style="color:#F00;">R</span>NRSTN :: BOOT): ' . $tmp_apache_logo_html . '[';
                    foreach($cpu_DELTA_CRNRSTN_BOOT_ARRAY as $rpt_index => $proc_load){

                        if($rpt_index > 0){

                            $tmp_space = ', ';

                        }else{

                            if($rpt_index >= ($tmp_rpt_cnt - 1)){

                                $tmp_space = '';

                            }

                        }

                        $tmp_arith_sign_proc = $this->return_int_arithmetic_sign($proc_load);

                        switch($rpt_index){
                            case 0:

                                $tmp_str_out .= $proc_load . $tmp_arith_sign_proc . '%';

                            break;
                            case 1:
                            case 2:

                                $tmp_str_out .= $tmp_space . $tmp_arith_sign_proc . $proc_load . '%';

                            break;

                        }

                    }

                    // ...+0.1%, +0.1%] average processor load in the last [1, 5, 15min] respectively.
                    $tmp_str_out .= '] average processor load in the last [1, 5, 15min] respectively.';
                    $tmp_data_out_ARRAY[] = $tmp_str_out;

                break;
                case 7:
                    // SYSTEM DELTA FROM SCRIPT BOOT REPORT - The DELTA of current system memory usage from CRNRSTN :: BOOT.
                    /*
                    MEM USAGE DELTA (+/- FROM CRNRSTN :: BOOT): +1.67 MiB.

                    */

                    $tmp_space = '';

                    $mem_PHP_DELTA_CRNRSTN_BOOT = $this->format_bytes($tmp_mem_delta_construct_output_ARRAY['delta_memory_get_real_usage']);
                    $tmp_arith_sign_PHP = $this->return_int_arithmetic_sign($tmp_mem_delta_construct_output_ARRAY['delta_memory_get_real_usage']);

                    $mem_descript['TITLE']['HTML'] = 'SYSTEM DELTA FROM SCRIPT BOOT REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'SYSTEM DELTA FROM SCRIPT BOOT REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'The DELTA of current system memory usage from CRNRSTN :: BOOT.';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'The DELTA of current system memory usage from CRNRSTN :: BOOT.';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['php'][] = $tmp_arith_sign_PHP . $mem_PHP_DELTA_CRNRSTN_BOOT;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    //
                    // TEXT OUTPUT FORMAT.
                    if($is_HTML == false){

                        //                                    MEM USAGE DELTA (+/- FROM CRNRSTN :: BOOT): +1.67 MiB.
                        $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE (+/- FROM CRNRSTN :: BOOT): ' . $tmp_arith_sign_PHP . $mem_PHP_DELTA_CRNRSTN_BOOT . '.';

                        break;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE (+/- FROM C<span style="color:#F00;">R</span>NRSTN :: BOOT): ' . $tmp_arith_sign_PHP . $mem_PHP_DELTA_CRNRSTN_BOOT . ' ' . $tmp_php_logo_html;

                break;
                case 8:
                    // SCRIPT DELTA FROM SCRIPT BOOT REPORT - The DELTA (from CRNRSTN :: BOOT) of script memory allocation vs. a memory performance snapshot of the same.
                    /*
                    CRNRSTN :: MEM USAGE (+/- FROM CRNRSTN :: BOOT): +1.67 MiB.

                    */

                    $tmp_space = '';

                    //
                    // CRNRSTN :: DELTA FROM CRNRSTN :: BOOT.
                    $mem_CRNRSTN_DELTA_FROM_CRNRSTN_BOOT = $this->format_bytes($tmp_mem_delta_construct_output_ARRAY['delta_memory_get_script_usage']);
                    $tmp_arith_sign_CRNRSTN = $this->return_int_arithmetic_sign($tmp_mem_delta_construct_output_ARRAY['delta_memory_get_script_usage']);

                    $mem_descript['TITLE']['HTML'] = 'SCRIPT DELTA FROM SCRIPT BOOT REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'SCRIPT DELTA FROM SCRIPT BOOT REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'The DELTA (from CRNRSTN :: BOOT) of script memory allocation vs. a memory performance snapshot of the same.';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'The DELTA (from CRNRSTN :: BOOT) of script memory allocation vs. a memory performance snapshot of the same.';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['crnrstn'][] = $tmp_arith_sign_CRNRSTN . $mem_CRNRSTN_DELTA_FROM_CRNRSTN_BOOT;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    //
                    // TEXT OUTPUT FORMAT.
                    if($is_HTML == false){

                        //                                    CRNRSTN :: MEM USAGE (+/- FROM CRNRSTN :: BOOT): +1.67 MiB.
                        $tmp_data_out_ARRAY[] = $tmp_space . 'CRNRSTN :: MEM USAGE (+/- FROM CRNRSTN :: BOOT): '. $tmp_arith_sign_CRNRSTN . $mem_CRNRSTN_DELTA_FROM_CRNRSTN_BOOT . '.';

                        break;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    //                                    MEM USAGE (+/- FROM CRNRSTN :: BOOT): +1.67 MiB <img>
                    $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE (+/- FROM C<span style="color:#F00;">R</span>NRSTN :: BOOT): ' . $tmp_arith_sign_CRNRSTN . $mem_CRNRSTN_DELTA_FROM_CRNRSTN_BOOT . ' ' . $tmp_crnrstn_logo_html;

                break;
                case 9:
                    // FULL MEMORY BOOT STATE REPORT - The BOOT memory performance snapshot of system and script memory allocations which was taken at the start of userland in PHP.
                    /*
                    BOOT MEM: PHP [2 MiB]. CRNRSTN :: [410.5625 KiB]. XDEBUG [410.625 KiB].

                    */

                    $tmp_space = '';

                    //
                    // BOOT MEMORY USAGE.
                    $mem_BOOT_PHP = $tmp_mem_start_ARRAY['memory_get_real_usage'];
                    $mem_BOOT_CRNRSTN = $tmp_mem_start_ARRAY['memory_get_script_usage'];
                    //$mem_BOOT_XDEBUG_CRNRSTN = CRNRSTN_MEMORY_XDEBUG_SCRIPT_USAGE_START;

                    $mem_descript['TITLE']['HTML'] = 'FULL MEMORY BOOT STATE REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'FULL MEMORY BOOT STATE REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'The BOOT memory performance snapshot of system and script memory allocations which was taken at the start of userland in PHP.';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'The BOOT memory performance snapshot of system and script memory allocations which was taken at the start of userland in PHP.';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['php'][] = $mem_BOOT_PHP;
                        $tmp_data_out_ARRAY['crnrstn'][] = $mem_BOOT_CRNRSTN;
                        //$tmp_data_out_ARRAY['xdebug_crnrstn'][] = $mem_BOOT_XDEBUG_CRNRSTN;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    //
                    // TEXT OUTPUT FORMAT.
                    if($is_HTML == false){

                        //                                    BOOT MEM USAGE: PHP [2 MiB]. CRNRSTN :: [410.5625 KiB]. XDEBUG_CRNRSTN [410.625 KiB].
                        //$tmp_data_out_ARRAY[] = $tmp_space . 'BOOT MEM USAGE: PHP [' . $this->format_bytes($mem_BOOT_PHP, 5) . ']. CRNRSTN :: [' . $this->format_bytes($mem_BOOT_CRNRSTN, 5) . ']. XDEBUG_CRNRSTN [' . $this->format_bytes($mem_BOOT_XDEBUG_CRNRSTN, 5) . '].';
                        $tmp_data_out_ARRAY[] = $tmp_space . 'BOOT MEM USAGE: PHP [' . $this->format_bytes($mem_BOOT_PHP, 5) . ']. CRNRSTN :: [' . $this->format_bytes($mem_BOOT_CRNRSTN, 5) . '].';

                        break;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    //                                    BOOT MEM USAGE: 2 MiB <img>  410.5625 KiB <img>  410.625 KiB <img>
                    //$tmp_data_out_ARRAY[] = $tmp_space . 'BOOT MEM USAGE: ' . $this->format_bytes($mem_BOOT_PHP, 5) . ' ' . $tmp_php_logo_html . '&nbsp;&nbsp;' . $this->format_bytes($mem_BOOT_CRNRSTN, 5) . ' ' . $tmp_crnrstn_logo_html . '&nbsp;&nbsp;' . $this->format_bytes($mem_BOOT_XDEBUG_CRNRSTN, 5) . ' ' . $tmp_crnrstn_logo_html . ' by XDEBUG';
                    $tmp_data_out_ARRAY[] = $tmp_space . 'BOOT MEM USAGE: ' . $this->format_bytes($mem_BOOT_PHP, 5) . ' ' . $tmp_php_logo_html . '&nbsp;&nbsp;' . $this->format_bytes($mem_BOOT_CRNRSTN, 5) . ' ' . $tmp_crnrstn_logo_html;

                break;
                case 10:
                    // CRNRSTN :: BOOT STATE REPORT - The BOOT memory performance snapshot of CRNRSTN :: which was taken at the start of CRNRSTN :: _construct().
                    /*
                    BOOT MEM USAGE: CRNRSTN :: [410.5625 KiB]. XDEBUG_CRNRSTN [410.625 KiB].

                    */

                    $tmp_space = '';

                    //
                    // CRNRSTN :: BOOT MEMORY USAGE.
                    $mem_BOOT_CRNRSTN = $tmp_mem_start_ARRAY['memory_get_script_usage'];
                    //$mem_BOOT_XDEBUG_CRNRSTN = CRNRSTN_MEMORY_XDEBUG_SCRIPT_USAGE_START;

                    $mem_descript['TITLE']['HTML'] = 'CRNRSTN :: BOOT STATE REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'CRNRSTN :: BOOT STATE REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'The BOOT memory performance snapshot of CRNRSTN :: which was taken at the start of CRNRSTN :: _construct().';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'The BOOT memory performance snapshot of CRNRSTN :: which was taken at the start of CRNRSTN :: _construct().';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['crnrstn'][] = $mem_BOOT_CRNRSTN;
                        //$tmp_data_out_ARRAY['xdebug_crnrstn'][] = $mem_BOOT_XDEBUG_CRNRSTN;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    //
                    // TEXT OUTPUT FORMAT.
                    if($is_HTML == false){

                        //                                    BOOT MEM USAGE: CRNRSTN :: [410.5625 KiB]. XDEBUG_CRNRSTN [410.625 KiB].
                        //$tmp_data_out_ARRAY[] = $tmp_space . 'BOOT MEM USAGE: CRNRSTN :: [' . $this->format_bytes($mem_BOOT_CRNRSTN, 5) . ']. XDEBUG_CRNRSTN [' . $this->format_bytes($mem_BOOT_XDEBUG_CRNRSTN, 5) . '].';
                        $tmp_data_out_ARRAY[] = $tmp_space . 'BOOT MEM USAGE: CRNRSTN :: [' . $this->format_bytes($mem_BOOT_CRNRSTN, 5) . '].';

                        break;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    //                                    BOOT MEM USAGE: [410.5625 KiB] <img> [410.625 KiB] <img>
                    //$tmp_data_out_ARRAY[] = $tmp_space . 'BOOT MEM USAGE: ' . $this->format_bytes($mem_BOOT_CRNRSTN, 5) . ' ' . $tmp_crnrstn_logo_html . '&nbsp;&nbsp;' . $this->format_bytes($mem_BOOT_XDEBUG_CRNRSTN, 5) . ' ' . $tmp_crnrstn_logo_html . ' by XDEBUG';
                    $tmp_data_out_ARRAY[] = $tmp_space . 'BOOT MEM USAGE: ' . $this->format_bytes($mem_BOOT_CRNRSTN, 5) . ' ' . $tmp_crnrstn_logo_html;

                break;
                case 11:
                    // CURRENT FULL MEMORY REPORT - System, script and XDEBUG (script) memory usage.
                    /*
                    MEM USAGE: PHP [2 MiB]. CRNRSTN :: [410.5625 KiB]. XDEBUG_CRNRSTN [410.625 KiB].

                    */

                    $tmp_space = '';

                    //
                    // CURRENT MEMORY USAGE.
                    $mem_PHP = $tmp_mem_curr_output_ARRAY['memory_get_real_usage'];
                    $mem_CRNRSTN = $tmp_mem_curr_output_ARRAY['memory_get_script_usage'];

                    $mem_descript['TITLE']['HTML'] = 'CURRENT FULL MEMORY REPORT';
                    $mem_descript['TITLE']['TEXT'] = 'CURRENT FULL MEMORY REPORT';
                    $mem_descript['DESCRIPTION']['HTML'] = 'System, script and XDEBUG (script) memory usage.';
                    $mem_descript['DESCRIPTION']['TEXT'] = 'System, script and XDEBUG (script) memory usage.';

                    //
                    // REPORTING OUTPUT FOR CRNRSTN :: PLAID.
                    if($to_plaid == true){

                        $tmp_data_out_ARRAY['report_id'][] = $report_id;
                        $tmp_data_out_ARRAY['php'][] = $mem_PHP;
                        $tmp_data_out_ARRAY['crnrstn'][] = $mem_CRNRSTN;
                        $tmp_data_out_ARRAY['rtime'][] = $this->wall_time();
                        $tmp_data_out_ARRAY['datecreated'][] = $this->return_micro_time();

                        break;

                    }

                    if($is_HTML == false){
                        //                                   MEM USAGE: PHP [2 MiB]. CRNRSTN :: [410.5625 KiB]. XDEBUG_CRNRSTN [410.625 KiB].
                        //$tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE: PHP [' . $this->format_bytes($mem_PHP, 5) . ']. CRNRSTN :: [' . $this->format_bytes($mem_CRNRSTN, 5) . ']. XDEBUG_CRNRSTN [' . $this->format_bytes(xdebug_memory_usage(), 5) . '].';
                        $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE: PHP [' . $this->format_bytes($mem_PHP, 5) . ']. CRNRSTN :: [' . $this->format_bytes($mem_CRNRSTN, 5) . '].';

                        break;

                    }

                    //
                    // HTML OUTPUT FORMAT.
                    //                                   MEM USAGE: PHP [2 MiB]. CRNRSTN :: [410.5625 KiB]. XDEBUG_CRNRSTN [410.625 KiB].
                    //$tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE: ' . $this->format_bytes($mem_PHP, 5) . ' ' . $tmp_php_logo_html . '&nbsp;&nbsp;' . $this->format_bytes($mem_CRNRSTN, 5) . ' ' . $tmp_crnrstn_logo_html . '&nbsp;&nbsp;' . $this->format_bytes(xdebug_memory_usage(), 5) . ' ' . $tmp_crnrstn_logo_html . ' by XDEBUG';
                    $tmp_data_out_ARRAY[] = $tmp_space . 'MEM USAGE: ' . $this->format_bytes($mem_PHP, 5) . ' ' . $tmp_php_logo_html . '&nbsp;&nbsp;' . $this->format_bytes($mem_CRNRSTN, 5) . ' ' . $tmp_crnrstn_logo_html;

                break;

            }

        }


        switch($this->data_type_filter($return_data_type)){
            case CRNRSTN_STRING:

                $tmp_str = '';
                foreach($tmp_data_out_ARRAY as $index_str => $report_str){

                    if($is_HTML !== false){

                        $tmp_str .= $report_str . $report_delimiter_HTML;

                    }else{

                        $tmp_str .= $report_str . $report_delimiter_TEXT;

                    }

                }

                return $tmp_str;

            break;
            default:
                //case CRNRSTN_ARRAY

                return $tmp_data_out_ARRAY;

            break;

        }

    }

    public function file_ext($filename){

        $tmp_filename_ARRAY = explode('.', $filename);

        return array_pop($tmp_filename_ARRAY);

    }

    public function lightweight_page_return($str, $is_html_doc = true, $content_prefix = '<pre><code>', $content_append = '</code></pre>'){

        $tmp_str_out = '';

        if($is_html_doc !== false){

            //
            // RETURN CONTENT AS A PROPER <HTML> DOCUMENT.
            $tmp_str_out .= '<!DOCTYPE html>
<html lang="' . $this->iso_language_html() . '">
<head>
    <title>CRNRSTN :: v' . $this->version_crnrstn() . '</title>
    '. $this->system_output_head_html(CRNRSTN_CSS_MAIN_DESKTOP) . '

</head>
<body>
';
            $tmp_str_out .= $content_prefix . $str . $content_append;

            $tmp_str_out .= '
</body>
</html>';

            return $tmp_str_out;

        }

        //
        // RETURN CONTENT AS A SIMPLE TAG WRAPPED STRING.
        $tmp_str_out .= $content_prefix . $str . $content_append;

        return $tmp_str_out;

    }

    //
    // RETURNS ARRAY OF DESIRED REPORTS (STRING DATA).
    // E.G. "Memory Usage: TOTAL_SYS[2 MiB]. SCRIPT_SYS[410.5625 KiB]. XDEBUG[410.625 KiB]."
    public function mem_report($mem_report_queue, $return_data_type = CRNRSTN_STRING, $php_logo_height = 20, $to_plaid = false, $is_HTML = false, $report_delimiter_TEXT = '. ', $report_delimiter_HTML = '<br>'){
        // WHERE, $mem_report_queue = array(0,3,1);
        // WHERE, $mem_report_queue = 1;
        // WHERE, $return_data_type = CRNRSTN_STRING OR CRNRSTN_ARRAY

        if(!isset($php_logo_height)){

            $php_logo_height = 20;

        }

        //
        // PROCESS ARRAY OF INTEGER REPORT TYPES.
        if(is_array($mem_report_queue)){

            $tmp_report = $this->mem_report_compile($mem_report_queue, $return_data_type, $php_logo_height, $to_plaid, $is_HTML, $report_delimiter_TEXT, $report_delimiter_HTML);

            return $tmp_report;

        }

        //
        // PROCESS INTEGER REPORT TYPE.
        if(is_int($mem_report_queue)){

            $tmp_ARRAY = array();
            $tmp_ARRAY[] = $mem_report_queue;

            $tmp_report = $this->mem_report_compile($tmp_ARRAY, $return_data_type, $php_logo_height, $to_plaid, $is_HTML, $report_delimiter_TEXT, $report_delimiter_HTML);

            return $tmp_report;

        }

        return '';

    }

    //
    // RETURNS CRNRSTN_STRING OR CRNRSTN_ARRAY WITH DESIRED REPORTS.
    public function channel_report($channel_constant, $channel_report_queue, $return_data_type = CRNRSTN_STRING, $php_logo_height = 20, $to_plaid = false, $is_HTML = true, $report_delimiter_TEXT = '. ', $report_delimiter_HTML = '<br>'){
        // WHERE, $channel_report_queue = array(CRNRSTN_CHANNEL_SOAP, CRNRSTN_CHANNEL_GET, CRNRSTN_CHANNEL_COOKIE);
        // WHERE, $channel_report_queue = CRNRSTN_CHANNEL_SOAP;

        return $this->oCRNRSTN_CONFIG_MGR->channel_report($channel_constant, $channel_report_queue, $return_data_type, $php_logo_height, $to_plaid, $is_HTML, $report_delimiter_TEXT, $report_delimiter_HTML);

    }

    public function file_report($file_report_queue, $output_format = 'TEXT', $ubuntu_logo_height = 20, $to_plaid = false, $is_HTML = false, $report_delimiter_TEXT = '. ', $report_delimiter_HTML = '<br>'){

        /*
        $endpoint_serial = $this->hash($_SERVER['SERVER_ADDR']);
        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory]['DIR_PATH'] = $directory;
        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory]['TYPE'] = filetype($directory);

        if($tmp_active_file_attributes_ARRAY['BLOCK_ALLOCATE'] == 1 ||
        $tmp_active_file_attributes_ARRAY['BLOCK_SIZE'] == 1 ||
        $tmp_active_file_attributes_ARRAY['DATE_LASTMODIFIED'] == 1 ||
        $tmp_active_file_attributes_ARRAY['DATE_LASTACCESSED'] == 1 ||
        $tmp_active_file_attributes_ARRAY['GID_STRING'] == 1 ||
        $tmp_active_file_attributes_ARRAY['GID_INT'] == 1 ||
        $tmp_active_file_attributes_ARRAY['UID_STRING'] == 1 ||
        $tmp_active_file_attributes_ARRAY['UID_INTEGER'] == 1){

        self::$system_integrations_directory_content_ARRAY[self::$request_id][$endpoint_serial][$directory][$tmp_resource_path]['TYPE'] = filetype($tmp_resource_path);

        */

        //
        // PROCESS DIRECTORY CONTENT.
        $tmp_endpoint_serial = $this->hash($_SERVER['SERVER_ADDR']);
        foreach(self::$system_integrations_directory_content_ARRAY[self::$request_id][$tmp_endpoint_serial] as $tmp_resource_path => $dir_content_chunkARRAY){

            $this->print_r('dir_content_chunkARRAY[' . print_r($dir_content_chunkARRAY, true) . '].', 'Image Processing.', NULL, __LINE__, __METHOD__, __FILE__);

            die();
        //foreach($tmp_dir_content_list as $tmp_resource_path => $is_file){

            /*
            switch(){
                case 'TOTAL_FILESIZE':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial]['TOTAL_FILESIZE'][]                             = $tmp_results_total_filesize;

                break;
                case 'PERMISSIONS_OCTAL':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['PERMISSIONS_OCTAL'][$name]   = decoct($perms & 0777);

                break;
                case 'PERMISSIONS_FULL':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['PERMISSIONS_FULL'][$name]    = $this->return_full_permissions($perms);

                break;
                case 'BLOCK_ALLOCATE':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['BLOCK_ALLOCATE'][$name]      = $tmp_filestat_ARRAY['blocks'];

                break;
                case 'BLOCK_SIZE':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['BLOCK_SIZE'][$name]          = $tmp_filestat_ARRAY['blksize'];

                break;
                case 'DATE_LASTMODIFIED':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['DATE_LASTMODIFIED'][$name]   = $tmp_filestat_ARRAY['mtime'];

                break;
                case 'DATE_LASTACCESSED':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['DATE_LASTACCESSED'][$name]   = $tmp_filestat_ARRAY['atime'];

                break;
                case 'GID_INT':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['GID_INT'][$name]             = $tmp_filestat_ARRAY['gid'];

                break;
                case 'GID_STRING':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['GID_STRING'][$name]          = $tmp_array['name'];

                break;
                case 'UID_STRING':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['UID_STRING'][$name]          = $tmp_array['name'];

                break;
                case 'UID_INTEGER':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['UID_INTEGER'][$name]         = $tmp_filestat_ARRAY['uid'];

                break;
                case 'FILESIZE':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['FILESIZE'][$name]            = 0;

                break;
                case 'DIR_PATH':
                    //$this->system_integrations_dir_content_touch_ARRAY[self::$request_id][$endpoint_serial][$tmp_path_serial]['DIR_PATH']                   = $dir_path;

                break;
                default:

                break;

            }

            */
            //$this->print_r('Failure opening [' . $tmp_filename . '] for inclusion. Attempting to repair the BASE64 file system.', 'Image Processing.', NULL, __LINE__, __METHOD__, __FILE__);

            // $this->print_r('$tmp_endpoint_serial[' . $tmp_endpoint_serial . '].
            // $mime_type_config_path[' . $mime_type_config_path . '].
            //
            // $tmp_resource_path[' . $tmp_resource_path . '].
            // $tmp_control_asset_ARRAY[' . print_r($tmp_control_asset_ARRAY, true) . '].', 'File Processing Test.', NULL, __LINE__, __METHOD__, __FILE__);
            // die();
            if($dir_content_chunkARRAY['TYPE'] == 'file' || $dir_content_chunkARRAY['TYPE'] == 'dir'){
                //if(is_file($tmp_resource_path)){

                //
                // TODO :: TECHNICALLY, WE SHOULD BE CHECKING AND STAYING UNDER MEM AND CPU PERFORMANCE SPECS.
                $tmp_report = '';

                //
                // RAW FILE MIME TYPE.
                $tmp_mime_type_str = mime_content_type($tmp_resource_path);

                //
                // FILENAME.
                $tmp_filename = basename($tmp_resource_path);

                //
                // RAW FILE EXTENSION.
                $tmp_file_extension = $this->file_ext($tmp_filename);

                //
                // TODO :: FIND THE BELOW TECHNIQUE IN CRNRSTN :: AND REPLACE ALL USES WITH file_ext().
                //$tmp_filename_ARRAY = explode('.', $tmp_filename);
                //$tmp_file_extension = array_pop($tmp_filename_ARRAY);

                //
                // MIME TYPE DIRECTORY NAME AND PATH.
                $tmp_dir_name_mime_type = $this->str_sanitize($tmp_mime_type_str, 'file_mime_type_to_directory');
                $tmp_mime_dir_path = $dir_content_chunkARRAY['DIR_PATH'] . DIRECTORY_SEPARATOR . $tmp_dir_name_mime_type;
                $tmp_file_extension_folder = $tmp_mime_dir_path . DIRECTORY_SEPARATOR . 'CRNRSTN_' . strtoupper($tmp_file_extension);

                //
                // IF NO MIME-TYPE FOLDER EXISTS, PREPARE TO MAKE ALL DIRECTORIES.
                // PER MIME-TYPE AND FILE EXTENSION.
                if(!is_dir($tmp_mime_dir_path)){

                    if(!isset($tmp_flag_built_dir_ARRAY[$tmp_mime_dir_path])){

                        $missing_mime_type_dir_cnt++;

                        $tmp_mime_dir_path_curt_ARRAY = explode(CRNRSTN_ROOT . '/', $tmp_mime_dir_path);
                        $tmp_file_system_activity_report = 'MAKE ' . strtoupper($dir_content_chunkARRAY['TYPE']) . ' <span style="color: #248613;">' . $tmp_mime_dir_path_curt_ARRAY[1] . '</span>';

                        //
                        // IF THERE ARE NO HARD DISK FULL WARNINGS OR DISK WRITE BLOCKS. MAKE THE DIRECTORY.

                        //
                        // ADD NEW MIME TYPE DIRECTORY.
                        $this->concat_log_string($tmp_report, __LINE__ . ' ui html mgr ' . $tmp_file_system_activity_report);

                    }

                    if(!isset($tmp_flag_built_dir_ARRAY[$tmp_file_extension_folder])){

                        $tmp_flag_built_dir_ARRAY[$tmp_file_extension_folder] = 1;
                        $missing_file_extension_dir_cnt++;

                        $tmp_file_extension_folder_curt_ARRAY = explode(CRNRSTN_ROOT . '/', $tmp_file_extension_folder);
                        $tmp_file_system_activity_report = 'MAKE ' . strtoupper($dir_content_chunkARRAY['TYPE']) . ' <span style="color: #248613;">' . $tmp_file_extension_folder_curt_ARRAY[1] . '</span>';

                        //
                        // IF THERE ARE NO HARD DISK FULL WARNINGS OR DISK WRITE BLOCKS. MAKE THE DIRECTORY.

                        //
                        // ADD NEW FILE EXTENSION DIRECTORY.
                        $this->concat_log_string($tmp_report, __LINE__ . ' ui html mgr ' . $tmp_file_system_activity_report);

                    }

                    $tmp_file_str = $tmp_mime_dir_path . DIRECTORY_SEPARATOR . 'CRNRSTN_' . strtoupper($tmp_file_extension) . DIRECTORY_SEPARATOR . $tmp_filename;
                    if(!is_file($tmp_file_str)){

                        //
                        // DO NOT MOVE OR DELETE THESE ENDPOINTS.
                        // $this->asset_routing_data_key_lookup_ARRAY['mime_type_exclusions']

                        //
                        // WE HAVE THE MIME-TYPE AND FILE EXTENSION DIRECTORIES. PUT FILE?
                        $tmp_endpoint_path_curt_ARRAY = explode(CRNRSTN_ROOT . '/', $tmp_resource_path);
                        $tmp_final_path = $tmp_mime_dir_path . DIRECTORY_SEPARATOR . 'CRNRSTN_' . strtoupper($tmp_file_extension);
                        $tmp_final_path_curt_ARRAY = explode(CRNRSTN_ROOT . '/', $tmp_final_path);
                        $tmp_file_system_activity_report = 'MOVE ' . strtoupper($dir_content_chunkARRAY['TYPE']) . ' <span style="color: #ff0000; ">' . $tmp_filename . '</span> >> <a href="#" target="_self" style="color: #0066CC; text-decoration: none;">[CLICK HERE]</a><br>&nbsp;&nbsp;SOURCE: <span style="color: #5f0202;">' . $tmp_endpoint_path_curt_ARRAY[1] . '</span><br>&nbsp;&nbsp;TARGET ENDPOINT DESTINATION: <span style="color: #47950c;">' . $tmp_final_path_curt_ARRAY[1] . '</span>';

                        //
                        // IF THERE ARE NO HARD DISK FULL WARNINGS OR DISK WRITE BLOCKS. MAKE THE DIRECTORY.

                        //
                        // ADD NEW FILE EXTENSION DIRECTORY.
                        $this->concat_log_string($tmp_report, __LINE__ . ' ui html mgr ' . $tmp_file_system_activity_report);

                    }else{

                        //
                        // IGNORE SELF-REFERENCES TO PROPERLY PLACED DEMO FILES.
                        if($tmp_resource_path != $tmp_mime_dir_path . DIRECTORY_SEPARATOR . 'CRNRSTN_' . strtoupper($tmp_file_extension) . DIRECTORY_SEPARATOR . $tmp_filename){

                            //
                            // FILE EXISTS ALREADY. DELETE FILE?
                            $tmp_endpoint_path_curt_ARRAY = explode(CRNRSTN_ROOT . '/', $tmp_resource_path);
                            $tmp_final_path = $tmp_mime_dir_path . DIRECTORY_SEPARATOR . 'CRNRSTN_' . strtoupper($tmp_file_extension);
                            $tmp_final_path_curt_ARRAY = explode(CRNRSTN_ROOT . '/', $tmp_final_path);
                            $tmp_file_system_activity_report = '<span style="font-weight: bold; color: #F90000;">!!DELETE!!</span> <span style="font-weight: bold; color: #F90000;">' . $tmp_filename . '</span> <span style="color: #F90000;">(' . $this->format_bytes(filesize($tmp_resource_path), 4) . ')</span> >> <a href="#" target="_self" style="color: #0066CC; text-decoration: none;">[CLICK HERE]</a><br>&nbsp;&nbsp;SOURCE: <span style="color: #5f0202;">' . $tmp_endpoint_path_curt_ARRAY[1] . '</span><br>&nbsp;&nbsp;FILE EXISTS ALREADY >> ' . $tmp_final_path_curt_ARRAY[1];

                            //
                            // ADD NEW FILE EXTENSION DIRECTORY.
                            $this->concat_log_string($tmp_report, __LINE__ . ' ui html mgr ' . $missing_file_extension_dir_cnt . ' ' . $tmp_file_system_activity_report);

                        }else{

                            //
                            // THIS FILE IS IN THE RIGHT PLACE.
                            $tmp_file_system_activity_report = '<span style="font-weight: bold; color: #16ac16;">* SUCCESS *</span> ' . $tmp_filename . ' >> "' . $tmp_mime_dir_path . DIRECTORY_SEPARATOR . 'CRNRSTN_' . strtoupper($tmp_file_extension) . '"';

                        }

                    }

                }else{

                    //
                    // IS THE FILE EXTENSION DIRECTORY AVAILABLE INSIDE
                    // OF ITS RESPECTIVE MIME-TYPE DIRECTORY?
                    if(!is_dir($tmp_file_extension_folder)){

                        if(!isset($tmp_flag_built_dir_ARRAY[$tmp_file_extension_folder])){

                            $tmp_flag_built_dir_ARRAY[$tmp_file_extension_folder] = 1;
                            $missing_file_extension_dir_cnt++;

                            $tmp_file_extension_folder_curt_ARRAY = explode(CRNRSTN_ROOT . '/', $tmp_file_extension_folder);
                            $tmp_file_system_activity_report = 'MAKE ' . strtoupper($dir_content_chunkARRAY['TYPE']) . ' <span style="color: #248613;">' . $tmp_file_extension_folder_curt_ARRAY[1] . '</span>.';

                            //
                            // IF THERE ARE NO HARD DISK FULL WARNINGS OR DISK WRITE BLOCKS. MAKE THE DIRECTORY.

                            //
                            // ADD NEW FILE EXTENSION DIRECTORY.
                            $this->concat_log_string($tmp_report, __LINE__ . ' ui html mgr ' . $tmp_file_system_activity_report);

                        }

                    }

                    $tmp_file_str = $tmp_mime_dir_path . DIRECTORY_SEPARATOR . 'CRNRSTN_' . strtoupper($tmp_file_extension) . DIRECTORY_SEPARATOR . $tmp_filename;
                    if(!is_file($tmp_file_str)){

                        //
                        // DO NOT MOVE OR DELETE THESE ENDPOINTS.
                        // $this->asset_routing_data_key_lookup_ARRAY['mime_type_exclusions']

                        //
                        // WE HAVE THE MIME-TYPE AND FILE EXTENSION DIRECTORIES. PUT FILE?
                        $tmp_endpoint_path_curt_ARRAY = explode(CRNRSTN_ROOT . '/', $tmp_resource_path);
                        $tmp_final_path = $tmp_mime_dir_path . DIRECTORY_SEPARATOR . 'CRNRSTN_' . strtoupper($tmp_file_extension);
                        $tmp_final_path_curt_ARRAY = explode(CRNRSTN_ROOT . '/', $tmp_final_path);
                        $tmp_file_system_activity_report = 'MOVE ' . strtoupper($dir_content_chunkARRAY['TYPE']) . ' <span style="color: #fd0000;">' . $tmp_filename . '</span> >> <a href="#" target="_self" style="color: #0066CC; text-decoration: none;">[CLICK HERE]</a><br>&nbsp;&nbsp;SOURCE: <span style="color: #5f0202;">' . $tmp_endpoint_path_curt_ARRAY[1] . '</span><br>&nbsp;&nbsp;TARGET ENDPOINT DESTINATION: <span style="color: #47950c;">' . $tmp_final_path_curt_ARRAY[1] . '</span>';

                        //
                        // IF THERE ARE NO HARD DISK FULL WARNINGS OR DISK WRITE BLOCKS. MAKE THE FILE, AND REPORT.

                        //
                        // ADD NEW FILE EXTENSION DIRECTORY.
                        $this->concat_log_string($tmp_report, __LINE__ . ' ui html mgr ' . $tmp_file_system_activity_report);

                    }else{

                        //
                        // IGNORE SELF-REFERENCES TO PROPERLY PLACED DEMO FILES.
                        if($tmp_resource_path != $tmp_mime_dir_path . DIRECTORY_SEPARATOR . 'CRNRSTN_' . strtoupper($tmp_file_extension) . DIRECTORY_SEPARATOR . $tmp_filename){

                            //
                            // FILE EXISTS ALREADY. DELETE FILE?
                            $tmp_endpoint_path_curt_ARRAY = explode(CRNRSTN_ROOT . '/', $tmp_resource_path);
                            $tmp_final_path = $tmp_mime_dir_path . DIRECTORY_SEPARATOR . 'CRNRSTN_' . strtoupper($tmp_file_extension);
                            $tmp_final_path_curt_ARRAY = explode(CRNRSTN_ROOT . '/', $tmp_final_path);
                            $tmp_file_system_activity_report = '<span style="font-weight: bold; color: #F90000;">!!DELETE!!</span> <span style="font-weight: bold; color: #F90000;">' . $tmp_filename . '</span> <span style="color: #F90000;">(' . $this->format_bytes(filesize($tmp_resource_path), 4) . ')</span> >> <a href="#" target="_self" style="color: #0066CC; text-decoration: none;">[CLICK HERE]</a><br>&nbsp;&nbsp;SOURCE: <span style="color: #5f0202;">' . $tmp_endpoint_path_curt_ARRAY[1] . '</span><br>&nbsp;&nbsp;FILE EXISTS ALREADY >> ' . $tmp_final_path_curt_ARRAY[1];

                            //
                            // ADD NEW FILE EXTENSION DIRECTORY.
                            $this->concat_log_string($tmp_report, __LINE__ . ' ui html mgr ' . $tmp_file_system_activity_report);

                        }else{

                            //
                            // THIS FILE IS IN THE RIGHT PLACE.
                            $tmp_file_system_activity_report = '<span style="font-weight: bold; color: #16ac16;">* SUCCESS *</span> [' . $tmp_filename . '] >> "' . $tmp_mime_dir_path . DIRECTORY_SEPARATOR . 'CRNRSTN_' . strtoupper($tmp_file_extension) . '"';

                        }

                    }

                }

                //$this->concat_log_string($tmp_report, __LINE__ . ' ui html mgr FILE[' . $tmp_resource_path . '].');

            }else{

                //$this->concat_log_string($tmp_report, __LINE__ . ' ui html mgr DIR[' . $tmp_resource_path . '].');

            }

            if(strlen($tmp_file_system_activity_report) > 0 && !isset($tmp_flag_built_dir_ARRAY[$tmp_mime_dir_path])){

                $tmp_flag_built_dir_ARRAY[$tmp_mime_dir_path] = 1;

            }

        }

        return $tmp_report;

    }

    public function data_report($data, $title = 'CRNRSTN :: INPUT DATA REPORT'){

        return $title . ' | TYPE=[' . strtoupper(gettype($data)) . ']. LEN=[' . strlen(strval($data)) . '].';

    }

    public function concat_log_string(&$log_string, $new_activity_string = NULL, $is_HTML = true, $is_recursive = false){

        if($is_HTML == true){

            if($log_string != '' && $is_recursive == false){

                if(is_array($new_activity_string)){

                    foreach($new_activity_string as $index => $log){

                        $log_string .= '<br>' . $log;

                    }

                }else{

                    if($new_activity_string != ''){

                        $log_string .= '<br>' . $new_activity_string;

                    }

                }

            }else{

                if($is_recursive == true){

                    if($log_string == ''){

                        $log_string .= $new_activity_string;

                    }else{

                        $log_string .= '<br>' . $new_activity_string;

                    }

                }else{

                    if(is_array($new_activity_string)){

                        foreach($new_activity_string as $index => $log){

                            $this->concat_log_string($log_string, $log, true, true);

                        }

                    }else{

                        $log_string .= $new_activity_string;

                    }

                }

            }

        }

    }

    public function __destruct(){

        if(isset(self::$oLogger)){

            $this->output_agg_destruct_str();

        }

        //
        // RESOURCE CONSUMPTION MONITORING TOUCH POINT.
        $tmp_mem_start_ARRAY = $this->memory_performance('CRNRSTN_DESTRUCT', 'start');
        $tmp_mem_delta_zero_output_ARRAY = $this->memory_performance('CRNRSTN_DESTRUCT', 'delta');
        $tmp_mem_delta_construct_output_ARRAY = $this->memory_performance('CRNRSTN_DESTRUCT', 'delta', 'CRNRSTN_CONSTRUCTOR');
        $tmp_mem_curr_output_ARRAY = $this->memory_performance('CRNRSTN_DESTRUCT');

//        $tmp_str_bytes_hashed = '';
//        $tmp_str_server_load = '';
//
//        foreach($this->total_bytes_hashed_ARRAY as $algo => $bytes_hashed){
//
//            $tmp_str_bytes_hashed .= '[' . $algo . ' ' . $this->format_bytes($bytes_hashed) . ']';
//
//        }

        /*
        PROCESSOR[' . $tmp_mem_start_ARRAY['sys_getloadavg'][0] . '% ,' . $tmp_mem_start_ARRAY['sys_getloadavg'][0] . '% ,' . $tmp_mem_start_ARRAY['sys_getloadavg'][0] . '%] average load in the last 1, 5, 15min.

        */

//        if(isset(self::$oCRNRSTN_CONFIG_MGR->oCRNRSTN_DDO)){
//
//            //$this->oLog_output_ARRAY[] = $this->error_log('goodbye crnrstn :: ' . __METHOD__ . ' called. [rtime ' . $this->wall_time() . ' secs][bytes_stored ' . $this->format_bytes(self::$oCRNRSTN_CONFIG_MGR->oCRNRSTN_DDO->return_total_bytes_stored('TEXT'), 5) . '][bytes_hashed ' . print_r($this->total_bytes_hashed_ARRAY, true). '].', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
//            //error_log(__LINE__ . ' goodbye crnrstn :: ' . __METHOD__ . ' called. [rtime ' . $this->wall_time() . ' secs][bytes_stored ' . $this->format_bytes(self::$oCRNRSTN_CONFIG_MGR->oCRNRSTN_DDO->return_total_bytes_stored('TEXT'), 5) . '][bytes_hashed ' . print_r($this->total_bytes_hashed_ARRAY, true). '].');
//
//        }

//       $tmp_report_mem = $this->mem_report(7);
//       error_log(__LINE__ . ' ' . $tmp_report_mem[0]);
        //error_log('BOOT MEM USAGE: CRNRSTN :: [' . $this->format_bytes($tmp_mem_start_ARRAY['memory_get_script_usage'], 5) . ']. TOTAL_SYS[' . $this->format_bytes($tmp_mem_start_ARRAY['memory_get_real_usage'], 5) . ']. PROCESSOR[' . $tmp_mem_start_ARRAY['sys_getloadavg'][0] . '%, ' . $tmp_mem_start_ARRAY['sys_getloadavg'][0] . '%, ' . $tmp_mem_start_ARRAY['sys_getloadavg'][0] . '%] average load in the last [1, 5, 15min] respectively.');
        //error_log('CRNRSTN :: MEM USAGE: ' . $this->format_bytes($tmp_mem_curr_output_ARRAY['memory_get_script_usage']) . '. Which from the start is DELTA ' . $this->format_bytes($tmp_mem_delta_zero_output_ARRAY['delta_memory_get_script_usage']) . '. ' . $tmp_mem_curr_output_ARRAY['sys_getloadavg'][0] . '% average load in last min (DELTA ' . $tmp_mem_delta_zero_output_ARRAY['delta_sys_getloadavg'][0] . '% from start). ' . $tmp_mem_curr_output_ARRAY['sys_getloadavg'][1] . '% average load in last 5 min (DELTA ' . $tmp_mem_delta_zero_output_ARRAY['delta_sys_getloadavg'][1] . '% from start). ' . $tmp_mem_curr_output_ARRAY['sys_getloadavg'][2] . '% average load in last 15 min (DELTA ' . $tmp_mem_delta_zero_output_ARRAY['delta_sys_getloadavg'][2] . '% from start).');
        //error_log('CRNRSTN :: MEM USAGE (+/- FROM CRNRSTN :: BOOT): ' . $this->return_int_arithmetic_sign($tmp_mem_delta_construct_output_ARRAY['delta_memory_get_script_usage']) . $this->format_bytes($tmp_mem_delta_construct_output_ARRAY['delta_memory_get_script_usage']) . ' from __construct. DELTA ' . $tmp_mem_delta_construct_output_ARRAY['delta_sys_getloadavg'][0] . '% average load in the last min. DELTA ' . $tmp_mem_delta_construct_output_ARRAY['delta_sys_getloadavg'][1] . '% average load in the last 5 min. DELTA ' . $tmp_mem_delta_construct_output_ARRAY['delta_sys_getloadavg'][2] . '% average load in the last 15 min.');

        //$this->oLog_output_ARRAY[] = $this->error_log('BOOT MEM USAGE: CRNRSTN :: [' . $this->format_bytes($tmp_mem_start_ARRAY['memory_get_script_usage'], 5) . ']. TOTAL_SYS[' . $this->format_bytes($tmp_mem_start_ARRAY['memory_get_real_usage'], 5) . ']. PROCESSOR[' . $tmp_mem_start_ARRAY['sys_getloadavg'][0] . '%, ' . $tmp_mem_start_ARRAY['sys_getloadavg'][0] . '%, ' . $tmp_mem_start_ARRAY['sys_getloadavg'][0] . '%] average load in the last [1, 5, 15min] respectively.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
        //$this->oLog_output_ARRAY[] = $this->error_log('CRNRSTN :: MEM USAGE: ' . $this->format_bytes($tmp_mem_curr_output_ARRAY['memory_get_script_usage']) . '. Which from the start is DELTA ' . $this->format_bytes($tmp_mem_delta_zero_output_ARRAY['delta_memory_get_script_usage']) . '. ' . $tmp_mem_curr_output_ARRAY['sys_getloadavg'][0] . '% average load in last min (DELTA ' . $tmp_mem_delta_zero_output_ARRAY['delta_sys_getloadavg'][0] . '% from start). ' . $tmp_mem_curr_output_ARRAY['sys_getloadavg'][1] . '% average load in last 5 min (DELTA ' . $tmp_mem_delta_zero_output_ARRAY['delta_sys_getloadavg'][1] . '% from start). ' . $tmp_mem_curr_output_ARRAY['sys_getloadavg'][2] . '% average load in last 15 min (DELTA ' . $tmp_mem_delta_zero_output_ARRAY['delta_sys_getloadavg'][2] . '% from start).', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);
        //$this->oLog_output_ARRAY[] = $this->error_log('CRNRSTN :: MEM USAGE (+/- FROM CRNRSTN :: BOOT): ' . $this->return_int_arithmetic_sign($tmp_mem_delta_construct_output_ARRAY['delta_memory_get_script_usage']) . $this->format_bytes($tmp_mem_delta_construct_output_ARRAY['delta_memory_get_script_usage']) . ' from __construct. DELTA ' . $tmp_mem_delta_construct_output_ARRAY['delta_sys_getloadavg'][0] . '% average load in the last min. DELTA ' . $tmp_mem_delta_construct_output_ARRAY['delta_sys_getloadavg'][1] . '% average load in the last 5 min. DELTA ' . $tmp_mem_delta_construct_output_ARRAY['delta_sys_getloadavg'][2] . '% average load in the last 15 min.', __LINE__, __METHOD__, __FILE__, CRNRSTN_SETTINGS_CRNRSTN);

    }

}
